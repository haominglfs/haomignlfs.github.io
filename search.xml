<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>redis高可用方案</title>
      <link href="/2020/10/21/redis%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/"/>
      <url>/2020/10/21/redis%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021212318.png" style="zoom:150%;"></p><a id="more"></a><h3 id="单机"><a href="#单机" class="headerlink" title="单机"></a>单机</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>下载安装包</p><p><a href="http://download.redis.io/releases/redis-5.0.4.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-4.0.14.tar.gz</a></p></li><li><p>解压文件</p><p><code>tar -xzvf redis-4.0.14.tar.gz</code></p></li><li><p>编译安装</p><p><code>make &amp;&amp; make install</code></p></li></ol><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol><li><p>在/usr/local/redis/redis4.0.14目录下复制redis.conf到/etc/redis/目录下，修改配置文件</p><ul><li><p>端口：port 6379</p></li><li><p>后台启动：daemonize yes</p></li><li><p>日志文件输出名字：logfile ./redis.log (需要手动创建文件)</p></li><li><p>文件存储目录：dir /usr/local/redis/log (需要手动创建文件夹)</p></li><li><p>连接redis密码：requirepass dcits001!</p></li><li><p>允许任何人连接redis：bind 0.0.0.0</p></li><li><p>tcp-backlog修改为2048并执行echo 511 &gt; /proc/sys/net/core/somaxconn</p><p>要不启动会出现警告：</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021155843.png" alt></p></li></ul></li><li><p>将下列内容添加到/etc/sysctl.conf中,保存退出, 执行sysctl -p 配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.core.somaxconn = 1024 </span><br><span class="line">vm.overcommit_memory = 1</span><br></pre></td></tr></table></figure></li><li><p>将<code>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</code>添加到<code>/etc/rc.local</code>中,执行<code>source /etc/rc.local</code>生效配置。</p></li></ol><h4 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h4><ol><li><p>在<code>/usr/local/redis/redis-4.0.14/utils</code>目录下，执行<code>./install_server.sh</code></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021160053.png" alt> </p></li><li><p>设为开机启动</p><p><code>chkconfig redis_6379 on</code></p></li><li><p>常用启动及停止命令</p><p><code>service redis_6379 start</code></p><p><code>service redis_6379 stop</code></p><blockquote><p>如果停止失败，出现:</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021160225.png" alt></p><p>是由于设置密码的原因,修改 /etc/init.d/redis_6379</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021160259.png" alt></p></blockquote></li><li><p>打开防火墙并开放6379端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld #查看防火墙状态</span><br><span class="line">systemctl start firewalld #打开防火墙</span><br><span class="line">systemctl stop firewalld #关闭防火墙</span><br><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent   # 开放6379端口</span><br><span class="line">firewall-cmd --zone=public --remove-port=6379/tcp --permanent  #关闭6379端口</span><br><span class="line">firewall-cmd –reload  #配置立即生效</span><br></pre></td></tr></table></figure></li></ol><h3 id="主从"><a href="#主从" class="headerlink" title="主从"></a>主从</h3><p>开启两台redis从服务器，可以位于两台服务器或同一台服务器的不同端口。</p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><ol><li><p>master的redis配置文件只要设置好bind即可</p><p><code>bind 0.0.0.0</code></p></li><li><p>修改slave的redis配置文件,如果master设置了验证密码，还需配置masterauth</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slaveof 192.168.56.112 6379 (映射到主服务器上，6379是端口号)</span><br><span class="line">masterauth d001!</span><br></pre></td></tr></table></figure></li><li><p>配置完之后启动slave的Redis服务</p><p><code>service redis_6379 restart</code></p></li></ol><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021161339.png" alt></p><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><ol><li><p>Sentinel可以切换主从数据库，主数据库可能会变成从数据库，所以三台机器上都需要同时设置requirepass和masterauth配置项。编辑 /etc/redis/redis.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requirepass d001!</span><br><span class="line">masterauth d001!</span><br></pre></td></tr></table></figure></li><li><p>配置sentinel配置文件 /etc/redis/sentinel.conf，每个sentinel配置基本相同，内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">port 26379</span><br><span class="line">bind 192.168.56.112  #每个主机该配置不同</span><br><span class="line">sentinel monitor redis-master 192.168.56.112 6379 2</span><br><span class="line">sentinel down-after-milliseconds redis-master 5000</span><br><span class="line">sentinel failover-timeout redis-master 180000</span><br><span class="line">sentinel parallel-syncs redis-master 2</span><br><span class="line">sentinel auth-pass redis-master dctis001!</span><br><span class="line">sentinel notification-script redis-master /etc/redis/notify.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">sentinel client-reconfig-script mymaster /etc/redis/failover.sh</span></span><br><span class="line">logfile /var/log/redis/redis-sentinel.log</span><br></pre></td></tr></table></figure><ul><li><p><code>daemonize yes</code> 以后台进程模式运行。</p></li><li><p><code>port 26379</code>  Sentinel实例之间的通讯端口，该端口号默认为26379。</p></li><li><p><code>bind 192.168.56.112</code>  Sentinel默认会绑定到127.0.0.1，这里要在多台机器间通信，我们将它绑定到主机IP上。</p></li><li><p><code>sentinel monitor redis-master 192.168.56.112 6379 2</code></p><p>Sentinel去监视一个名为redis-master的主服务器，这个主服务器的IP地址为192.168.56.112 ，端口号为6379。将这个主服务器判断为失效至少需要2个Sentinel同意，一般设置为N/2+1(N为Sentinel总数)。只要同意Sentinel的数量不达标，自动故障迁移就不会执行。</p></li><li><p><code>sentinel down-after-milliseconds redis-master 5000</code></p><p>down-after-milliseconds选项指定了Sentinel认为服务器已经断线所需的毫秒数。如果服务器在给定的毫秒数之内，没有返回Sentinel发送的PING命令的回复，或者返回一个错误，那么Sentinel将这个服务器标记为主观下线(subjectively down，简称SDOWN)。</p></li><li><p><code>sentinel failover-timeout redis-master 180000</code></p><p>如果在多少毫秒内没有把宕掉的那台Master恢复，那Sentinel认为这是一次真正的宕机。在下一次选取时排除该宕掉的Master作为可用的节点，然后等待一定的设定值的毫秒数后再来探测该节点是否恢复，如果恢复就把它作为一台Slave加入Sentinel监测节点群，并在下一次切换时为他分配一个”选取号”。</p></li><li><p><code>sentinel parallel-syncs redis-master 2</code></p><p>parallel-syncs选项指定了在执行故障转移时，最多可以有多少个从服务器同时对新的主服务器进行同步。这个数字越小，完成故障转移所需的时间就越长。</p></li><li><p><code>sentinel auth-pass redis-master d001!</code></p><p>当Master设置了密码时，Sentinel连接Master和Slave时需要通过设置参数auth-pass配置相应密码。</p></li><li><p><code>sentinel notification-script redis-master /etc/redis/notify.sh</code></p><p>指定Sentinel检测到该监控的Redis实例failover时调用的报警脚本。脚本被允许执行的最大时间为60秒，超过这个时间脚本会被kill。该配置项可选，但线上系统建议配置。这里的通知脚本简单的记录一下failover事件。</p></li><li><p><code>sentinel client-reconfig-script redis-master /etc/redis/failover.sh</code></p><p>指定Sentinel failover之后重配置客户端时执行的脚本，该配置项可选，但线上系统建议配置。</p></li><li><p><code>logfile /var/log/redis/redis-sentinel.log</code></p><p>日志文件所在位置，默认在/var/log/redis/redis-sentinel.log。该文件要手动创建。</p></li></ul></li><li><p>创建通知脚本/etc/redis/notify.sh，并增加执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line">echo "master failovered at `date`" &gt; /var/log/redis/redis_issues.log</span><br></pre></td></tr></table></figure><p><code>chmod +x /etc/redis/notify.sh</code></p></li><li><p>运行sentinel</p><p><code>redis-sentinel /etc/redis/sentinel.conf</code></p></li></ol><h4 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h4><ol><li><p>将redis预设脚本复制到 /etc/init.d/ 中</p><p><code>cp ~/redis-4.0.14/utils/redis_init_script /etc/init.d/redis_sentinel</code></p></li><li><p>调整脚本内容 vi /etc/init.d/redis_sentinel</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021163036.png" alt></p><ul><li><code>REDISPORT</code>  默认为26379,但只要和其他端口不重复就行</li><li><code>EXEC</code>  /usr/local/bin/redis-sentinel  指定redis-sentinel命令路径</li><li><code>CONF</code> /etc/redis/sentinel.conf  配置文件路径</li></ul></li><li><p>建立systemd,  vi /etc/systemd/system/redis_sentinel.service，内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit] </span><br><span class="line">Description=Redis Sentinel on port 26379</span><br><span class="line">    </span><br><span class="line">[Service] </span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/etc/init.d/redis_sentinel start</span><br><span class="line">ExecStop=/etc/init.d/redis_sentinel stop</span><br><span class="line">    </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>更新systemd配置</p><p><code>systemctl daemon-reload</code></p></li><li><p>设置开机自启动</p><p><code>systemctl enable redis_sentinel.service</code></p></li></ol><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql高可用方案</title>
      <link href="/2020/10/19/mysql%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/"/>
      <url>/2020/10/19/mysql%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021151526.png" style="zoom:150%;"></p><a id="more"></a><h3 id="galera集群"><a href="#galera集群" class="headerlink" title="galera集群"></a>galera集群</h3><h4 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h4><p>galera集群至少需要三个节点的服务器硬件，以下操作在三个节点执行。安装后，在任意一个节点执行SQL，都是同步的。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>添加RPM源 vi etc/yum.repos.d/galera.repo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[galera]</span><br><span class="line">name = Galera</span><br><span class="line">baseurl = https://releases.galeracluster.com/galera-3/DIST/RELEASE/ARCH gpgkey = https://releases.galeracluster.com/GPG-KEY-galeracluster.com gpgcheck = 1</span><br><span class="line"></span><br><span class="line">[mysql-wsrep]</span><br><span class="line">name = MySQL-wsrep</span><br><span class="line">baseurl=https://releases.galeracluster.com/mysql-wsrep-VERSION/DIST/RELEASE/ARCH </span><br><span class="line">gpgkey = https://releases.galeracluster.com/GPG-KEY-galeracluster.com</span><br><span class="line">gpgcheck = 1</span><br></pre></td></tr></table></figure></li><li><p>yum 安装</p><p><code>yum install galera-3 mysql-wsrep-5.7 rsync</code></p></li><li><p>配置开机自启动</p><p><code>systemctl enable mysqld</code></p></li><li><p>启动mysql</p><p><code>systemctl start mysqld</code></p></li><li><p>登录MySql命令行，修改密码</p><blockquote><p>如果版本为5.7，系统为root设置了随机密码，需要修改配置文件 /etc/my.cnf,在最后添加如下配置，并重启mysql服务</p><p><code>skip-grant-tables=1 #跳过密码验证，等密码设置成功后，再将此配置删除掉</code></p></blockquote></li><li><p>登录mysql</p><p><code>mysql -uroot -p</code></p></li><li><p>修改密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update mysql.user set authentication_string=password(&apos;001!&apos;) where user=&apos;root&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>设置远程访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;001!&apos; WITH GRANT OPTION;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><blockquote><p>如果执行出现如下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ERROR 3009 (HY000): Column count of mysql.user is wrong. Expected 45, found 43. Created with MySQL 50649, now running 50730. Please use mysql_upgrade to fix this error.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>原因：用户在创建时选择的是MySQL5.7的版本，而导入的备份文件为MySQL5.6的，版本不一致导致MySQL系统表有差异所之后。执行如下命令解决:mysql_upgrade -uroot -p</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021154120.png" alt></p></blockquote></li><li><p>服务器关闭selinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config</span><br></pre></td></tr></table></figure></li><li><p>服务器关闭防火墙或者添加端口允许</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 3306  MySQL client connections and mysqldump SST</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4567  Galera Cluster replication traffic</span></span><br><span class="line">firewall-cmd --zone=public --add-port=4567/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4568  IST</span></span><br><span class="line">firewall-cmd --zone=public --add-port=4568/tcp --permanent</span><br></pre></td></tr></table></figure></li></ol><h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><ol><li><p>修改 /etc/my.cnf 文件，添加配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!includedir /etc/my.cnf.d/</span><br></pre></td></tr></table></figure></li><li><p>增加配置文件 /etc/my.cnf.d/galera.cnf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">binlog_format=ROW #binlog文件格式：行</span><br><span class="line">default-storage-engine=innodb</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Galera Provider Configuration</span></span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib64/galera-3/libgalera_smm.so</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Galera Cluster Configuration</span></span><br><span class="line">wsrep_cluster_name="fucloud_cluster"</span><br><span class="line">wsrep_cluster_address="gcomm://192.168.56.108,192.168.56.109,192.168.56.110"  #整个集群的IP地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Galera Synchronization Configuration</span></span><br><span class="line">wsrep_sst_method=rsync  #拷贝模式xtrabackup-v2 或者 rsync</span><br><span class="line"><span class="meta">#</span><span class="bash">wsrep_sst_method=xtrabackup-v2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Galera Node Configuration 节点配置，每个节点只是这部分不同</span></span><br><span class="line">wsrep_node_address="192.168.56.110" #本节点ip地址</span><br><span class="line">wsrep_node_name="mysql3" #本节点名称</span><br></pre></td></tr></table></figure></li></ol><h4 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h4><ol><li><p>随机选择一个节点，使用专用脚本 mysqld_bootstrap 初始化集群</p><p><code>mysqld_bootstrap</code></p></li><li><p>在其他节点上启动 mysqld 服务</p><p><code>systemctl start mysqld</code></p></li></ol><h4 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h4><ol><li><p>确认集群启动成功（返回当前的集群节点数量）</p><p><code>mysql&gt; show status like &#39;wsrep_cluster_size&#39;;</code></p></li><li><p>查看galera状态 </p><p><code>mysql&gt; show status like &#39;wsrep%&#39;;</code></p></li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.cnblogs.com/weijie0717/p/8445167.html" target="_blank" rel="noopener">https://www.cnblogs.com/weijie0717/p/8445167.html</a></p><p><a href="https://my.oschina.net/colben/blog/1831527" target="_blank" rel="noopener">https://my.oschina.net/colben/blog/1831527</a></p><p><a href="https://blog.51cto.com/14089205/2477697" target="_blank" rel="noopener">https://blog.51cto.com/14089205/2477697</a></p><p><a href="https://galeracluster.com/" target="_blank" rel="noopener">https://galeracluster.com/</a></p><h3 id="双主mysql-keepalived集群"><a href="#双主mysql-keepalived集群" class="headerlink" title="双主mysql+keepalived集群"></a>双主mysql+keepalived集群</h3><p>两台mysql互为主备，使用keepalived监控mysql状态，进行自动failover。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><h5 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h5><p>mysql安装参考以上。</p><h5 id="keepalived"><a href="#keepalived" class="headerlink" title="keepalived"></a>keepalived</h5><ol><li><p>创建依赖环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum -y install openssl-devel gcc gcc-c++</span><br><span class="line">[root@localhost mkdir /etc/keepalived</span><br><span class="line">[root@localhost wget https://www.keepalived.org/software/keepalived-2.0.18.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>安装keepalived</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@localhost]#</span><span class="bash"> tar -zxvf keepalived-2.0.18.tar.gz</span></span><br><span class="line"><span class="meta">[root@localhost]#</span><span class="bash"> mv keepalived-2.0.18 /usr/<span class="built_in">local</span>/keepalived</span></span><br><span class="line"><span class="meta">[root@localhost]#</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/keepalived</span></span><br><span class="line"><span class="meta">[root@localhost]#</span><span class="bash"> ./configure &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure></li><li><p>创建启动文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@localhost]#</span><span class="bash"> cp -a /usr/<span class="built_in">local</span>/etc/keepalived   /etc/init.d/</span></span><br><span class="line"><span class="meta">[root@localhost]#</span><span class="bash"> cp -a /usr/<span class="built_in">local</span>/etc/sysconfig /keepalived/etc/sysconfig/</span></span><br><span class="line"><span class="meta">[root@localhost]#</span><span class="bash"> cp -a /usr/<span class="built_in">local</span>/sbin/keepalived  /usr/sbin/</span></span><br></pre></td></tr></table></figure></li><li><p>设置开机启动</p><p><code>[root@localhost yum.repos.d]# systemctl enable keepalived</code></p></li></ol><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="mysql主备配置"><a href="#mysql主备配置" class="headerlink" title="mysql主备配置"></a>mysql主备配置</h5><ol><li><p>配置服务器mysql1，修改/etc/my.cnf文件，增加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=1             #id唯一</span><br><span class="line">log-bin=mysql-bin       #开启binlog日志功能</span><br><span class="line">auto-increment-increment=2</span><br><span class="line">auto-increment-offset=1</span><br><span class="line">log-slave-updates</span><br></pre></td></tr></table></figure></li><li><p>配置服务器mysql2，修改/etc/my.cnf文件，增加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=2</span><br><span class="line">log-bin=mysql-bin       #开启binlog日志功能 </span><br><span class="line">auto-increment-increment=2</span><br><span class="line">auto-increment-offset=2</span><br><span class="line">log-slave-updates</span><br></pre></td></tr></table></figure></li><li><p>重启两台服务器的mysql服务</p><p><code>systemctl restart mysqld</code></p></li><li><p>在mysql1服务器上建立账户并授权</p><p><code>grant replication slave on *.* to &#39;itscmpsync&#39;@&#39;%&#39; identified by &#39;dcits001!&#39;;</code></p><blockquote><p>注：一般不用root帐号，“%”表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.56.109(mysql2服务器的ip地址)，加强安全</p></blockquote></li><li><p>登录mysql1服务器的mysql，查询master的状态</p><p><code>mysql&gt; show master status;</code></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021140558.png" alt></p><blockquote><p>注：执行完此步骤后不要再操作master1服务器MYSQL，防止主服务器状态值变化</p></blockquote></li><li><p>配置mysql2服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">change master to master_host=<span class="string">'101.200.56.108'</span>,master_user=<span class="string">'itscmpsync'</span>,master_password=<span class="string">'dcits001!'</span>,master_log_file=<span class="string">'mysql-bin.000008'</span>,master_log_pos=154;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：master_log_file和master_log_pos的值应与mysql1服务器状态列出的值对应</p></blockquote></li><li><p>启动mysql2服务器复制功能</p><p><code>mysql&gt;start slave;</code></p></li><li><p>检查mysql2服务器复制功能状态</p><p><code>mysql&gt;show slave status\G</code></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021140620.png" alt></p><blockquote><p>Slave_IO_Running: Yes //此状态必须YES </p><p>Slave_SQL_Running: Yes //此状态必须YES</p></blockquote></li><li><p>同样的操作，设置mysql1为mysql2的从服务器，在mysql2服务器上建立账户并授权</p><p><code>mysql&gt;grant replication slave on *.* to &#39;itscmpsync&#39;@&#39;%&#39; identified by &#39;dcits001!&#39;;</code></p><blockquote><p>注：一般不用root帐号，“%”表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.56.108(mysql1服务器的ip地址)，加强安全</p></blockquote></li><li><p>登录mysql2服务器的mysql，查询master的状态</p><p><code>mysql&gt;show master status;</code></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021140642.png" alt></p><blockquote><p>注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化</p></blockquote></li><li><p>配置mysql1服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">change master to master_host=<span class="string">'192.168.56.109'</span>,master_user=<span class="string">'itscmpsync'</span>,master_password=<span class="string">'dcits001!'</span>,master_log_file=<span class="string">'mysql-bin.000010'</span>,master_log_pos=154;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：master_log_file和master_log_pos的值应与mysql2服务器状态列出的值对应</p></blockquote></li><li><p>启动mysql1服务器复制功能</p><p><code>mysql&gt;show slave status\G</code></p></li><li><p>检查mysql1服务器复制功能状态</p><p><code>mysql&gt;show slave status\G</code></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021140659.png" alt></p></li></ol><h5 id="keepalived配置"><a href="#keepalived配置" class="headerlink" title="keepalived配置"></a>keepalived配置</h5><ol><li><p>编辑mysql1服务器keepalived配置文件，/etc/keepalived/keepalived.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">  router_id mysql-1  #运行keepalived服务器标识</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">   state BACKUP       #指定keepalived的角色，两台配置此处均是BACKUP，设为BACKUP将根据优先级决定主或从</span><br><span class="line">   interface enp0s8#指定检测网络的接口</span><br><span class="line"><span class="meta">   #</span><span class="bash">虚拟路由标示，这个标示是一个数字(取值在0-255之间，用来区分多个instance的VRRP组播)，同一个vrrp实例使用唯一的标示，确保和mysql2相同，同网内不同集群此项必须不同，否则发生冲突</span></span><br><span class="line">   virtual_router_id 51   </span><br><span class="line">   priority 100#用来选举master,该项取值范围是1-255（在此范围之外会被识别成默认值100），数值大的为master</span><br><span class="line">   advert_int 1        #发vrrp包的时间间隔，即多久进行一次master选举（可以认为是健康检测时间间隔）</span><br><span class="line"><span class="meta">   #</span><span class="bash">不抢占，允许优先级较低的作为master，即使有priority更高的节点启动，一般只在优先级高的mysql配置</span></span><br><span class="line">   Nopreempt </span><br><span class="line">   authentication &#123;  #认证区域，认证类型有PASS和HA(IPSEC),推荐使用PASS(密码只识别前8位)</span><br><span class="line">       auth_type PASS</span><br><span class="line">       auth_pass 1111</span><br><span class="line">   &#125;</span><br><span class="line">   virtual_ipaddress &#123;    #VIP区域，指定vip地址</span><br><span class="line">       192.168.56.150     #虚拟vip</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置虚拟服务器，需要指定虚拟IP地址和服务端口，IP与端口之间用空格隔开</span></span><br><span class="line">virtual_server 192.168.56.150 3306 &#123; </span><br><span class="line">   delay_loop 2   #每隔2秒检查一次real_server状态</span><br><span class="line">   lb_algo rr #设置后端调度算法，这里设置为rr,即轮询算法</span><br><span class="line">   lb_kind DR     #设置LVS实现负载均衡的机制，有NAT、TUN、DR三个模式可选</span><br><span class="line"><span class="meta">   #</span><span class="bash">会话保持时间，单位为秒。这个选项对动态网页非常有用，为集群系统中的session共享提供了一个很好的解决方案，有了这个会话保持功能，用户的请求会被一只分发到某个服务节点，直到超过这个会话的保持时间</span></span><br><span class="line">   persistence_timeout 60 </span><br><span class="line">   protocol TCP    #指定转发协议类型，有TCP和UDP两种</span><br><span class="line">   real_server 192.168.56.108 3306 &#123; #配置服务节点1，需要指定real server的真实IP地址和端口</span><br><span class="line">       weight 3  #配置服务的权重</span><br><span class="line">       notify_down /etc/keepalived/bin/mysql.sh  #检测到服务down后执行的脚本</span><br><span class="line">       TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3         #连接超时时间 </span><br><span class="line">            nb_get_retry 3            #重连次数</span><br><span class="line">            delay_before_retry 3      #重连间隔时间</span><br><span class="line">            connect_port 3306      #健康检查端口 </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑mysql2服务器keepalived配置文件，/etc/keepalived/keepalived.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">  router_id mysql-2         #服务器标识</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">   state BACKUP</span><br><span class="line">   interface enp0s8</span><br><span class="line">   virtual_router_id 51</span><br><span class="line">   priority 50               #优先级，用来选举</span><br><span class="line">   advert_int 1</span><br><span class="line">   authentication &#123;</span><br><span class="line">       auth_type PASS</span><br><span class="line">       auth_pass 1111</span><br><span class="line">   &#125;</span><br><span class="line">   virtual_ipaddress &#123;</span><br><span class="line">       192.168.56.150</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.56.150 3306 &#123;</span><br><span class="line">   delay_loop 2</span><br><span class="line">   lb_algo rr</span><br><span class="line">   lb_kind DR</span><br><span class="line">   persistence_timeout 60</span><br><span class="line">   protocol TCP</span><br><span class="line">   real_server 192.168.56.109 3306 &#123; </span><br><span class="line">       weight 3</span><br><span class="line">       notify_down    /etc/keepalived/bin/mysql.sh</span><br><span class="line">       TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 3306</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>分别在mysql1和mysql2上创建服务down后脚本 /etc/keepalived/bin/mysql.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">pkill keepalived</span><br><span class="line">sleep  10</span><br><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure></li><li><p>配置运行权限</p><p><code>chmod +x mysql.sh</code></p></li><li><p>启动keepalived</p><p><code>systemctl start keepalived</code></p></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>采用keepalived作为高可用方案时，两个节点最好都设置成BACKUP模式，避免因为意外情况下（比如脑裂）相互抢占导致往两个节点写入相同数据而引发冲突；</li><li>把两个节点的auto_increment_increment（自增步长）和auto_increment_offset（自增起始值）设成不同值。其目的是为了避免master节点意外宕机时，可能会有部分binlog未能及时复制到slave上被应用，从而会导致slave新写入数据的自增值和原先master上冲突了，因此一开始就使其错开；当然了，如果有合适的容错机制能解决主从自增ID冲突的话，也可以不这么做；</li><li>.slave节点服务器配置不要太差，否则更容易导致复制延迟。作为热备节点的slave服务器，硬件配置不能低于master节点；</li><li>如果对延迟问题很敏感的话，可考虑使用<a href="https://cloud.tencent.com/product/tdsql?from=10680" target="_blank" rel="noopener">MariaDB</a>分支版本，或者直接上线MySQL 5.7最新版本，利用多线程复制的方式可以很大程度降低复制延迟；</li></ol><h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><p><a href="https://cloud.tencent.com/developer/article/1139739" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1139739</a></p><p><a href="https://cloud.tencent.com/developer/article/1343127" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1343127</a></p><p><a href="https://cloud.tencent.com/developer/article/1343127" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1343127</a></p><p><a href="https://www.cnblogs.com/gered/p/11221702.html" target="_blank" rel="noopener">https://www.cnblogs.com/gered/p/11221702.html</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echart+百度地图</title>
      <link href="/2020/08/23/echart-%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/"/>
      <url>/2020/08/23/echart-%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200823162355.png" alt></p><a id="more"></a><p>最近使用echart在地图上绘制散点图，总结一下，防止以后忘记。</p><p><strong>注意</strong>：使用了django框架，如果使用其他技术，需要修改路径。</p><h3 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h3><h4 id="echart"><a href="#echart" class="headerlink" title="echart"></a>echart</h4><p><code>&lt;script src=&quot;js/echarts.js&quot;&gt;&lt;/script&gt;</code></p><h4 id="百度地图扩展"><a href="#百度地图扩展" class="headerlink" title="百度地图扩展"></a>百度地图扩展</h4><p><code>&lt;script src=&quot;js/bmap.js&quot;&gt;&lt;/script&gt;</code></p><p><a href="https://github.com/apache/incubator-echarts/tree/master/extension/bmap" target="_blank" rel="noopener">源码地址、使用文档</a></p><h4 id="百度地图api"><a href="#百度地图api" class="headerlink" title="百度地图api"></a>百度地图api</h4><p><code>&lt;script src=&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=#{在百度地图开放平台申请的ak}&quot;&gt;&lt;/script&gt;</code></p><p><a href="https://lbsyun.baidu.com/" target="_blank" rel="noopener">开放平台地址</a></p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><h4 id="ECharts-将百度地图部分配置集成在了-bmap-中，包括："><a href="#ECharts-将百度地图部分配置集成在了-bmap-中，包括：" class="headerlink" title="ECharts 将百度地图部分配置集成在了 bmap 中，包括："></a>ECharts 将百度地图部分配置集成在了 bmap 中，包括：</h4><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th><th><strong>格式</strong></th></tr></thead><tbody><tr><td>center</td><td>中心点的百度坐标</td><td>坐标数组, 如：[116.307698, 40.056975]</td></tr><tr><td>zoom</td><td>初始缩放比</td><td>number</td></tr><tr><td>roam</td><td>是否允许用户缩放操作</td><td>boolean</td></tr><tr><td>mapStyle</td><td>地图自定义样式</td><td>object, 如：{ styleJson: […] }</td></tr></tbody></table><h4 id="自定义百度地图样式"><a href="#自定义百度地图样式" class="headerlink" title="自定义百度地图样式"></a>自定义百度地图样式</h4><p>地图的样式配置 <code>bmap.mapStyle</code> 中 <code>styleJson</code> 与百度地图内置的样式配置一致，具体参考百度地图API开发指南中 <a href="http://lbsyun.baidu.com/index.php?title=jspopular/guide/custom" target="_blank" rel="noopener">定制个性地图</a>章节的介绍。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">bmap: &#123;</span><br><span class="line">      center: [<span class="number">116.307698</span>, <span class="number">40.056975</span>],</span><br><span class="line">         zoom: <span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">         roam: <span class="literal">true</span>, <span class="comment">// 允许缩放</span></span><br><span class="line"></span><br><span class="line">         mapStyle: &#123;  <span class="comment">// 百度地图自定义样式</span></span><br><span class="line">         styleJson: [</span><br><span class="line">         <span class="comment">// 陆地</span></span><br><span class="line">                 &#123;</span><br><span class="line"><span class="string">"featureType"</span>: <span class="string">"land"</span>,</span><br><span class="line">                          <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                          <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                              <span class="string">"color"</span>: <span class="string">"#073763"</span></span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      <span class="comment">// 水系</span></span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">"featureType"</span>: <span class="string">"water"</span>,</span><br><span class="line">                          <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                          <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                              <span class="string">"color"</span>: <span class="string">"#073763"</span>,</span><br><span class="line">                              <span class="string">"lightness"</span>: <span class="number">-54</span></span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      <span class="comment">// 国道与高速</span></span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">"featureType"</span>: <span class="string">"highway"</span>,</span><br><span class="line">                          <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                          <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                              <span class="string">"color"</span>: <span class="string">"#45818e"</span></span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      <span class="comment">// 边界线</span></span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">"featureType"</span>: <span class="string">"boundary"</span>,</span><br><span class="line">                          <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                          <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                              <span class="string">"color"</span>: <span class="string">"#ffffff"</span>,</span><br><span class="line">                              <span class="string">"lightness"</span>: <span class="number">-62</span>,</span><br><span class="line">                              <span class="string">"visibility"</span>: <span class="string">"on"</span></span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      <span class="comment">// 行政标注</span></span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">"featureType"</span>: <span class="string">"label"</span>,</span><br><span class="line">                          <span class="string">"elementType"</span>: <span class="string">"labels.text.fill"</span>,</span><br><span class="line">                          <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                              <span class="string">"color"</span>: <span class="string">"#ffffff"</span>,</span><br><span class="line">                              <span class="string">"visibility"</span>: <span class="string">"on"</span></span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">"featureType"</span>: <span class="string">"label"</span>,</span><br><span class="line">                          <span class="string">"elementType"</span>: <span class="string">"labels.text.stroke"</span>,</span><br><span class="line">                          <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                              <span class="string">"color"</span>: <span class="string">"#444444"</span>,</span><br><span class="line">                              <span class="string">"visibility"</span>: <span class="string">"on"</span></span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">         ]</span><br><span class="line">         &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="百度地图api-1"><a href="#百度地图api-1" class="headerlink" title="百度地图api"></a>百度地图api</h4><p>除了上述四个配置，其他地图设置都可以通过 <a href="http://lbsyun.baidu.com/index.php?title=jspopular" target="_blank" rel="noopener">百度地图提供的API</a> 实现</p><h5 id="获取百度地图实例："><a href="#获取百度地图实例：" class="headerlink" title="获取百度地图实例："></a>获取百度地图实例：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bmap = bmapCharts.getModel().getComponent(<span class="string">'bmap'</span>).getBMap(); <span class="comment">// 百度地图实例</span></span><br><span class="line">bmap.addControl(<span class="keyword">new</span> BMap.NavigationControl()); <span class="comment">// 缩放控件</span></span><br><span class="line">bmap.addControl(<span class="keyword">new</span> BMap.ScaleControl()); <span class="comment">// 比例尺</span></span><br></pre></td></tr></table></figure><p>var bmap = bmapCharts.getModel().getComponent(‘bmap’).getBMap(); // 百度地图实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&#123;% load <span class="keyword">static</span> %&#125;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">"echarts-records"</span> style=<span class="string">"width: 1000px;height:500px"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--引入百度地图的jssdk，这里需要使用你在百度地图开发者平台申请的 ak--&gt;</span><br><span class="line">&lt;script src=<span class="string">"http://api.map.baidu.com/api?v=2.0&amp;ak=#&#123;在百度地图开放平台申请的ak&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"&#123;% static 'js/echarts.js'%&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- 引入百度地图扩展 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"&#123;% static 'js/bmap.js'%&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> echartsRecords = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'echarts-records'</span>), <span class="string">'walden'</span>);</span><br><span class="line">        <span class="keyword">var</span> data = [];</span><br><span class="line">        <span class="keyword">var</span> geoCoordMap = &#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> convertData = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> res = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> geoCoord = geoCoordMap[data[i].name];</span><br><span class="line">                <span class="keyword">if</span> (geoCoord) &#123;</span><br><span class="line">                    res.push(&#123;</span><br><span class="line">                        name: data[i].name,</span><br><span class="line">                        value: geoCoord.concat(data[i].value[<span class="number">0</span>].value)</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        option = &#123;</span><br><span class="line">            backgroundColor: <span class="string">'transparent'</span>,</span><br><span class="line">            title: &#123;</span><br><span class="line">                text: <span class="string">'数据统计'</span>,</span><br><span class="line">                left: <span class="string">'center'</span>,</span><br><span class="line">                textStyle: &#123;</span><br><span class="line">                    color: <span class="string">'#fff'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            tooltip : &#123;</span><br><span class="line">                trigger: <span class="string">'item'</span>,</span><br><span class="line">                formatter: <span class="function"><span class="keyword">function</span>(<span class="params">params, ticket, callback</span>)</span>&#123;<span class="comment">//定制提示信息</span></span><br><span class="line">                    <span class="keyword">var</span> toolTiphtml = <span class="string">''</span></span><br><span class="line">                    <span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(params.data.value[<span class="number">0</span>],params.data.value[<span class="number">1</span>]);</span><br><span class="line">                    gc.getLocation(point, <span class="function"><span class="keyword">function</span> (<span class="params">rs</span>) </span>&#123;<span class="comment">//根据经纬度获取地址信息</span></span><br><span class="line">                        <span class="keyword">var</span> address = rs.address;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(params.name==data[i].name)&#123;</span><br><span class="line">                                toolTiphtml += address+<span class="string">':&lt;br&gt;'</span></span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j&lt;data[i].value.length;j++)&#123;</span><br><span class="line">                                    toolTiphtml+=data[i].value[j].name+<span class="string">': '</span>+data[i].value[j].value+<span class="string">"&lt;br&gt;"</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                callback(ticket, toolTiphtml);<span class="comment">//异步回掉获取提示信息</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'loading'</span>;<span class="comment">//内容还没返回时显示的内容</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            bmap: &#123;</span><br><span class="line">                center: [<span class="number">104.114129</span>, <span class="number">37.550339</span>],</span><br><span class="line">                <span class="comment">//mapType: 'china',</span></span><br><span class="line">                zoom: <span class="number">5</span>,<span class="comment">// 百度地图缩放等级，数字越大，放大越大，地图比例尺越小</span></span><br><span class="line">                roam: <span class="string">'move'</span>, <span class="comment">// 是否开启拖拽缩放，可以只设置 'scale' 或者 'move' true</span></span><br><span class="line">                mapStyle: &#123;<span class="comment">//地图样式，参考https://developer.baidu.com/map/custom/</span></span><br><span class="line">                    styleJson: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"water"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#044161"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"land"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#004981"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"boundary"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"geometry"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#064f85"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"railway"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"highway"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"geometry"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#004981"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"highway"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"geometry.fill"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#005b96"</span>,</span><br><span class="line">                                <span class="string">"lightness"</span>: <span class="number">1</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"highway"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"labels"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"arterial"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"geometry"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#004981"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"arterial"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"geometry.fill"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#00508b"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"poi"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"green"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#056197"</span>,</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"subway"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"manmade"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"local"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"arterial"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"labels"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"boundary"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"geometry.fill"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#029fd4"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"building"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#1a5787"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"label"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            series : [</span><br><span class="line">                &#123;</span><br><span class="line">                    name: <span class="string">'Net capacity'</span>,</span><br><span class="line">                    <span class="comment">//type: 'scatter',</span></span><br><span class="line">                    type: <span class="string">'effectScatter'</span>,</span><br><span class="line">                    coordinateSystem: <span class="string">'bmap'</span>,</span><br><span class="line">                    data: convertData(data),</span><br><span class="line">                    encode: &#123;</span><br><span class="line">                        value: <span class="number">2</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    symbolSize: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> val[<span class="number">2</span>] / <span class="number">700</span>;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    label: &#123;</span><br><span class="line">                        formatter: <span class="string">'&#123;b&#125;'</span>,</span><br><span class="line">                        position: <span class="string">'right'</span>,</span><br><span class="line">                        fontSize :<span class="number">20</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    itemStyle: &#123;</span><br><span class="line">                        color: <span class="string">'#ddb926'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    emphasis: &#123;</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            show: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    type: <span class="string">'custom'</span>,</span><br><span class="line">                    coordinateSystem: <span class="string">'bmap'</span>,</span><br><span class="line">                    renderItem: renderItem,</span><br><span class="line">                    itemStyle: &#123;</span><br><span class="line">                        opacity: <span class="number">0.5</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    animation: <span class="literal">false</span>,</span><br><span class="line">                    silent: <span class="literal">true</span>,</span><br><span class="line">                    data: [<span class="number">0</span>],</span><br><span class="line">                    z: <span class="number">-10</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        echartsRecords.setOption(option);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取百度地图实例</span></span><br><span class="line">        <span class="keyword">var</span> bmap = echartsRecords.getModel().getComponent(<span class="string">'bmap'</span>).getBMap();</span><br><span class="line">        <span class="comment">//使用百度地图自带的控件</span></span><br><span class="line">        <span class="comment">//bmap.addControl(new BMap.MapTypeControl());</span></span><br><span class="line">        <span class="keyword">var</span> top_left_control = <span class="keyword">new</span> BMap.ScaleControl(&#123;<span class="attr">anchor</span>: BMAP_ANCHOR_TOP_LEFT&#125;);<span class="comment">// 左上角，添加比例尺</span></span><br><span class="line">    <span class="keyword">var</span> top_left_navigation = <span class="keyword">new</span> BMap.NavigationControl();  <span class="comment">//左上角，添加默认缩放平移控件</span></span><br><span class="line">        bmap.addControl(top_left_control)</span><br><span class="line">        bmap.addControl(top_left_navigation)</span><br><span class="line">        <span class="keyword">var</span> gc = <span class="keyword">new</span> BMap.Geocoder();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// echarts 窗口缩放自适应</span></span><br><span class="line">        <span class="comment">//用于使chart自适应高度和宽度,通过窗体高宽计算容器高宽</span></span><br><span class="line">        <span class="keyword">var</span> resizeEchartContainer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            width = $(<span class="string">"#echart_card"</span>).width();</span><br><span class="line">            height = $(<span class="string">"#echart_card"</span>).height();</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'echarts-records'</span>).style.width = width+<span class="string">'px'</span>;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'echarts-records'</span>).style.height = height+<span class="string">'px'</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            resizeEchartContainer(); </span><br><span class="line">            echartsRecords.resize();</span><br><span class="line">        &#125;</span><br><span class="line">        resizeEchartContainer();</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="echart底图加载方式"><a href="#echart底图加载方式" class="headerlink" title="echart底图加载方式"></a>echart底图加载方式</h3><p>以上使用的为第一种</p><p><a href="https://www.cnblogs.com/hao-1234-1234/p/9292996.html" target="_blank" rel="noopener">底图加载方式</a></p><p><a href="http://datav.aliyun.com/tools/atlas/#&amp;lat=8.407168163601076&amp;lng=135&amp;zoom=2" target="_blank" rel="noopener">获取坐标json数据</a></p><h3 id="根据经纬度获取详细地址"><a href="#根据经纬度获取详细地址" class="headerlink" title="根据经纬度获取详细地址"></a>根据经纬度获取详细地址</h3><h4 id="地址解析服务"><a href="#地址解析服务" class="headerlink" title="地址解析服务"></a>地址解析服务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"l-map"</span>);      </span><br><span class="line">map.centerAndZoom(<span class="keyword">new</span> BMap.Point(<span class="number">116.404</span>, <span class="number">39.915</span>), <span class="number">11</span>);      </span><br><span class="line"><span class="comment">// 创建地址解析器实例     </span></span><br><span class="line"><span class="keyword">var</span> myGeo = <span class="keyword">new</span> BMap.Geocoder();      </span><br><span class="line"><span class="comment">// 将地址解析结果显示在地图上，并调整地图视野    </span></span><br><span class="line">myGeo.getPoint(<span class="string">"北京市海淀区上地10街10号"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">point</span>)</span>&#123;      </span><br><span class="line">    <span class="keyword">if</span> (point) &#123;      </span><br><span class="line">        map.centerAndZoom(point, <span class="number">16</span>);      </span><br><span class="line">        map.addOverlay(<span class="keyword">new</span> BMap.Marker(point));      </span><br><span class="line">    &#125;      </span><br><span class="line"> &#125;, </span><br><span class="line"><span class="string">"北京市"</span>);</span><br></pre></td></tr></table></figure><h4 id="逆地址解析服务"><a href="#逆地址解析服务" class="headerlink" title="逆地址解析服务"></a>逆地址解析服务</h4><h5 id="指定经纬度获取地址"><a href="#指定经纬度获取地址" class="headerlink" title="指定经纬度获取地址"></a>指定经纬度获取地址</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"l-map"</span>);      </span><br><span class="line">map.centerAndZoom(<span class="keyword">new</span> BMap.Point(<span class="number">116.404</span>, <span class="number">39.915</span>), <span class="number">11</span>);      </span><br><span class="line"><span class="comment">// 创建地理编码实例, 并配置参数获取乡镇级数据</span></span><br><span class="line"><span class="keyword">var</span> myGeo = <span class="keyword">new</span> BMap.Geocoder(&#123;<span class="attr">extensions_town</span>: <span class="literal">true</span>&#125;);      </span><br><span class="line"><span class="comment">// 根据坐标得到地址描述    </span></span><br><span class="line">myGeo.getLocation(<span class="keyword">new</span> BMap.Point(<span class="number">116.364</span>, <span class="number">39.993</span>), <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;      </span><br><span class="line">    <span class="keyword">if</span> (result)&#123;      </span><br><span class="line">    alert(result.address);      </span><br><span class="line">    &#125;      </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="鼠标点击地图获取地址"><a href="#鼠标点击地图获取地址" class="headerlink" title="鼠标点击地图获取地址"></a>鼠标点击地图获取地址</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"allmap"</span>);</span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(<span class="number">116.331398</span>,<span class="number">39.897445</span>);</span><br><span class="line">map.centerAndZoom(point,<span class="number">12</span>);</span><br><span class="line"><span class="keyword">var</span> geoc = <span class="keyword">new</span> BMap.Geocoder();    </span><br><span class="line">map.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;        </span><br><span class="line">    <span class="keyword">var</span> pt = e.point;</span><br><span class="line">    geoc.getLocation(pt, <span class="function"><span class="keyword">function</span>(<span class="params">rs</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> addComp = rs.addressComponents;</span><br><span class="line">        alert(addComp.province + <span class="string">", "</span> + addComp.city + <span class="string">", "</span> + addComp.district + <span class="string">", "</span> + addComp.street + <span class="string">", "</span> + addComp.streetNumber);</span><br><span class="line">    &#125;);        </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="http://lbsyun.baidu.com/index.php?title=jspopular3.0/guide/geocoding" target="_blank" rel="noopener">官方文档</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/hao-1234-1234/p/10954979.html" target="_blank" rel="noopener">https://www.cnblogs.com/hao-1234-1234/p/10954979.html</a></p><p><a href="https://blog.csdn.net/qq_35736779/article/details/99772172" target="_blank" rel="noopener">https://blog.csdn.net/qq_35736779/article/details/99772172</a></p><p><a href="https://juejin.im/post/6844904160945504269" target="_blank" rel="noopener">https://juejin.im/post/6844904160945504269</a></p><p>### </p>]]></content>
      
      
      <categories>
          
          <category> echart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -echart -百度地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli4快速搭建项目详解</title>
      <link href="/2020/07/28/vue-cli4%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/07/28/vue-cli4%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728230318.png" alt></p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="卸载旧版本-并安装vue-cli4"><a href="#卸载旧版本-并安装vue-cli4" class="headerlink" title="卸载旧版本,并安装vue-cli4"></a>卸载旧版本,并安装vue-cli4</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall vue-cli -g</span><br><span class="line">npm install -g @vue/cli    <span class="comment">//vue-cli2.x的安装命令是 cnpm install -g vue-cli</span></span><br><span class="line">vue -V <span class="comment">//校验是否安装成功</span></span><br></pre></td></tr></table></figure><p>如图，表示安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728221009.png" alt></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><code>vue create 项目名</code></p><h3 id="选择配置"><a href="#选择配置" class="headerlink" title="选择配置"></a>选择配置</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728221327.png" alt></p><blockquote><p><strong>default</strong>：默认配置（只有babel和eslint）<br><strong>Manually select features</strong>：手动配置<br>一般做项目默认配置是不够的，我们选第二项。</p></blockquote><h3 id="进行配置"><a href="#进行配置" class="headerlink" title="进行配置"></a>进行配置</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728221729.png" alt></p><table><thead><tr><th style="text-align:center"><strong>选项</strong></th><th style="text-align:center"><strong>解释</strong></th></tr></thead><tbody><tr><td style="text-align:center">Babel</td><td style="text-align:center">一种能让浏览器自动识别向后兼容各版本JavaScript的功能（选）</td></tr><tr><td style="text-align:center">TypeScript</td><td style="text-align:center">一种.ts后缀兼容js的语法（不选）</td></tr><tr><td style="text-align:center">Progressive Web App（PWA）Support</td><td style="text-align:center">渐进式网络应用（不选）</td></tr><tr><td style="text-align:center">Router</td><td style="text-align:center">vue的路由管理组件（选）</td></tr><tr><td style="text-align:center">Vuex</td><td style="text-align:center">vue的状态仓库管理组件（选）</td></tr><tr><td style="text-align:center">CSS Pre-processors</td><td style="text-align:center">CSS预编译（选）</td></tr><tr><td style="text-align:center">Linter/Formatter</td><td style="text-align:center">代码检验 格式检查（选）</td></tr><tr><td style="text-align:center">Unit Testing</td><td style="text-align:center">单元测试 以开发角度测试代码（不选）</td></tr><tr><td style="text-align:center">E2E Testing</td><td style="text-align:center">e2e测试 以用户角度测试代码（不选）</td></tr></tbody></table><h3 id="选择router模式"><a href="#选择router模式" class="headerlink" title="选择router模式"></a><strong>选择router模式</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728222352.png" alt></p><blockquote><p>history和hash是router组件的mode选项，一般默认用history更普遍和实用。</p><p>具体可以参考：<a href="https://segmentfault.com/q/1010000010340823" target="_blank" rel="noopener">https://segmentfault.com/q/1010000010340823</a></p></blockquote><h3 id="选择CSS预编译方式"><a href="#选择CSS预编译方式" class="headerlink" title="选择CSS预编译方式"></a><strong>选择CSS预编译方式</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728223123.png" alt></p><blockquote><p>这里看你个人习惯，我经常用<code>Sass/Scss（with dart-sass）</code></p><p>node-sass和dart-sass区别：<a href="https://www.dart-china.org/t/topic/146" target="_blank" rel="noopener">https://www.dart-china.org/t/topic/146</a>      <a href="https://www.sasscss.com/" target="_blank" rel="noopener">https://www.sasscss.com/</a></p></blockquote><h3 id="选择代码校验方式"><a href="#选择代码校验方式" class="headerlink" title="选择代码校验方式"></a><strong>选择代码校验方式</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728224248.png" alt></p><blockquote><p>我习惯选<code>ESLint with error prevention only</code>或者最后一项<code>ESLint+Prettier</code>。如果是用VScode的小伙伴推荐最后一项，与VScode里的Prettier插件配合不错。</p></blockquote><h3 id="选择代码检查时间点"><a href="#选择代码检查时间点" class="headerlink" title="选择代码检查时间点"></a><strong>选择代码检查时间点</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728224450.png" alt></p><blockquote><p>选择第一项<code>Lint on save</code>，在保存后就自动检验代码和格式.</p></blockquote><h3 id="询问配置保存位置"><a href="#询问配置保存位置" class="headerlink" title="询问配置保存位置"></a><strong>询问配置保存位置</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728224602.png" alt></p><blockquote><p>询问是否将配置放在package.json文件中。推荐选第一项<code>In dedicated config files</code>，创建新的配置文件。</p><p>如果是选择 独立文件放置，项目会有单独如下图所示的几件文件。</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728225456.png" alt></p></blockquote><h3 id="保存为预配置"><a href="#保存为预配置" class="headerlink" title="保存为预配置"></a><strong>保存为预配置</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728224919.png" alt></p><blockquote><p>询问是否将以上配置保存为<strong>预配置</strong>。这个根据自己意愿，预配置对以后创建项目来说还是方便点的，选择“Y”or“N”。如果“Y”，就继续设置预配置名称；如果“N”就自动跳过。</p></blockquote><h3 id="开始创建"><a href="#开始创建" class="headerlink" title="开始创建"></a>开始创建</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728225117.png" alt></p><blockquote><p>回车开始自动创建项目，需要一定时间，创建成功结束后可以看到以下项目结构！</p><p><img src="/Users/haominglfs/Library/Application Support/typora-user-images/image-20200728225324969.png" alt="image-20200728225324969"></p></blockquote><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>控制台输入如下命令启动项目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd my-project <span class="comment">// 进入到项目根目录</span></span><br><span class="line">npm run serve <span class="comment">// 启动项目</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728225805.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot异常处理</title>
      <link href="/2020/06/21/SpringBoot%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2020/06/21/SpringBoot%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200626105320.jpg" alt="img"></p><a id="more"></a><ol><li><p>统一异常处理</p><p><a href="http://www.gxitsky.com/2019/01/30/springboot-app-38-global-exception-handle/" target="_blank" rel="noopener">http://www.gxitsky.com/2019/01/30/springboot-app-38-global-exception-handle/</a></p><p><a href="http://www.zhaojun.im/springboot-exception/" target="_blank" rel="noopener">http://www.zhaojun.im/springboot-exception/</a></p><p><a href="https://www.jianshu.com/p/9792846ee029" target="_blank" rel="noopener">https://www.jianshu.com/p/9792846ee029</a></p><p><a href="https://www.cnblogs.com/harrychinese/p/SpringBoot_exception_handler_best_practice.html" target="_blank" rel="noopener">https://www.cnblogs.com/harrychinese/p/SpringBoot_exception_handler_best_practice.html</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> exception </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> exception </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity</title>
      <link href="/2020/06/21/SpringSecurity/"/>
      <url>/2020/06/21/SpringSecurity/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200626110646.jpg" alt="img"></p><a id="more"></a><ol><li>解决SpringSecurity手动退出登录后再次登录成功会重定向到登录界面的问题(<a href="https://www.jianshu.com/p/4a5061951c77" target="_blank" rel="noopener">https://www.jianshu.com/p/4a5061951c77</a>)</li></ol><p><code>.and().logoutSuccessUrl(&quot;/&quot;)</code></p><ol start="2"><li><p>设置session超时退出(<a href="https://www.cnblogs.com/zyly/p/12316099.html" target="_blank" rel="noopener">https://www.cnblogs.com/zyly/p/12316099.html</a>)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.servlet.session.timeout</span>=<span class="string">1800</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//session管理,失效后跳转</span></span><br><span class="line">http.sessionManagement().invalidSessionUrl(<span class="string">"/login"</span>);</span><br></pre></td></tr></table></figure></li><li><p>SpringBoot中SpringSecurity 中不能抛出异常UserNameNotFoundException 问题解析与处理</p><p><a href="https://juejin.im/post/5c432efce51d4551e653a77e" target="_blank" rel="noopener">https://juejin.im/post/5c432efce51d4551e653a77e</a></p><p><a href="https://www.jianshu.com/p/4a7654fa0bd3" target="_blank" rel="noopener">https://www.jianshu.com/p/4a7654fa0bd3</a></p><p><a href="https://blog.csdn.net/sun1021873926/article/details/60332059" target="_blank" rel="noopener">https://blog.csdn.net/sun1021873926/article/details/60332059</a></p><p><a href="https://www.jianshu.com/p/5714777114b1" target="_blank" rel="noopener">https://www.jianshu.com/p/5714777114b1</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DaoAuthenticationProvider <span class="title">authenticationProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  DaoAuthenticationProvider provider = <span class="keyword">new</span> DaoAuthenticationProvider();</span><br><span class="line">  provider.setHideUserNotFoundExceptions(<span class="keyword">false</span>);</span><br><span class="line">  provider.setUserDetailsService(mUserDetailsService);</span><br><span class="line">  provider.setPasswordEncoder(passwordEncoder);</span><br><span class="line">  <span class="keyword">return</span> provider;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加验证码</p><p><a href="https://www.jianshu.com/p/5a83e364869c" target="_blank" rel="noopener">https://www.jianshu.com/p/5a83e364869c</a></p></li><li><p>Spring Security整合thymeleaf</p><p><a href="https://www.jianshu.com/p/953c8998e2bd" target="_blank" rel="noopener">https://www.jianshu.com/p/953c8998e2bd</a></p></li><li><p>源码分析</p><p><a href="https://segmentfault.com/a/1190000018616620" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018616620</a></p><p><a href="https://blog.csdn.net/u012702547/article/details/89629415" target="_blank" rel="noopener">https://blog.csdn.net/u012702547/article/details/89629415</a></p><p><a href="https://www.cnblogs.com/crazymakercircle/p/12040402.html" target="_blank" rel="noopener">https://www.cnblogs.com/crazymakercircle/p/12040402.html</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thymeleaf</title>
      <link href="/2020/06/21/thymeleaf/"/>
      <url>/2020/06/21/thymeleaf/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200626111742.jpg" alt="img"></p><a id="more"></a><ol><li><p>判断对象是否为空</p><p>使用 ${xxx?.xxx?} 可以判断对象是否为空，? 号 前的对象或者属性为空那么就不再进行渲染，而且不会导致出现报错的情况</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> thymeleaf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea热加载配置</title>
      <link href="/2020/06/07/idea%E7%83%AD%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/06/07/idea%E7%83%AD%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200607151649.png" alt></p><a id="more"></a><h3 id="热加载方式"><a href="#热加载方式" class="headerlink" title="热加载方式"></a>热加载方式</h3><ol><li>JRebel 收费，有点贵</li><li>Spring-Loader  不稳定</li><li>DCEVM+Hotswap Agent 免费（当然选择这种）</li></ol><h3 id="DCEVM-Hotswap-Agent"><a href="#DCEVM-Hotswap-Agent" class="headerlink" title="DCEVM+Hotswap Agent"></a>DCEVM+Hotswap Agent</h3><h4 id="下载DCEVM"><a href="#下载DCEVM" class="headerlink" title="下载DCEVM"></a>下载DCEVM</h4><p><a href="https://github.com/dcevm/dcevm/releases/download/light-jdk8u51%2B3/DCEVM-light-8u51-installer.jar" target="_blank" rel="noopener">latest release of DCEVM Java patch</a></p><p><code>sudo java -jar DCEVM-8u181-installer-build2.jar</code></p><p>选择jdk安装目录，并点击”Install DCEVM as altjvm”按钮</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200607143035.png" alt></p><h4 id="下载Hotswap-agent-jar"><a href="#下载Hotswap-agent-jar" class="headerlink" title="下载Hotswap agent jar"></a>下载Hotswap agent jar</h4><p><a href="https://github.com/HotswapProjects/HotswapAgent/releases" target="_blank" rel="noopener">latest release of Hotswap agent jar</a></p><p>放到任意目录</p><h4 id="安装idea插件-HotSwapAgent"><a href="#安装idea插件-HotSwapAgent" class="headerlink" title="安装idea插件 HotSwapAgent"></a>安装idea插件 HotSwapAgent</h4><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200607143722.png" alt></p><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200607143942.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200607144328.png" alt></p><h4 id="以debug模式启动应用程序"><a href="#以debug模式启动应用程序" class="headerlink" title="以debug模式启动应用程序"></a>以debug模式启动应用程序</h4><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200607164047.png" alt></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>修改代码或者添加新方法，点击编译</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200607145054.png" alt></p><h3 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h3><h3 id="DCEVM-amp-HotswapAgent"><a href="#DCEVM-amp-HotswapAgent" class="headerlink" title="DCEVM &amp; HotswapAgent"></a><a href="https://dcevm.github.io/" target="_blank" rel="noopener">DCEVM</a> &amp; <a href="http://www.hotswapagent.org/" target="_blank" rel="noopener">HotswapAgent</a></h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/dmitry-zhuravlev/hotswap-agent-intellij-plugin" target="_blank" rel="noopener">https://github.com/dmitry-zhuravlev/hotswap-agent-intellij-plugin</a></p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> 热加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8学习</title>
      <link href="/2020/05/30/java8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/05/30/java8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200626111451.jpg" alt="img"></p><a id="more"></a><h3 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h3><ol><li><p>函数式接口就是只定义一个抽象方法的接口</p></li><li><p>函数式接口的抽象方法的签名称为函数描述符。</p><ul><li>Predicate:java.util.function.Predicate<t>接口定义了一个名叫test的抽象方法，它接受泛型T对象，并返回一个boolean。</t></li><li>Consumer:java.util.function.Consumer<t>接口定义了一个名叫accept的抽象方法，它接受泛型T的对象，没有返回（void）。</t></li><li>Function:java.util.function.Function&lt;T, R&gt;接口定义了一个叫作apply的抽象方法，它接受泛型T的对象，并返回一个泛型R的对象。</li><li>DoublePredicate、IntConsumer、LongBinaryOperator、IntFunction、ToIntFunction<t>、IntToDoubleFunction</t></li></ul></li></ol><h3 id="流"><a href="#流" class="headerlink" title="流"></a>流</h3><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li>filter 筛选</li><li>distinct 去重 （据流所生成元素的hashCode和equals方法实现）</li><li>切片<ul><li>takeWhile 遭遇第一个不符合要求的元素时停止处理</li><li>dropWhile 它会从头开始，丢弃所有谓词结果为false的元素。一旦遭遇谓词计算的结果为true，它就停止处理，并返回所有剩余的元素，即便要处理的对象是一个由无限数量元素构成的流，它也能工作得很好</li></ul></li><li>limit 截短流</li><li>skip 跳过元素</li><li>map 映射 （使用映射一词，是因为它和转换类似，但其中的细微差别在于它是“创建一个新版本”而不是去“修改”）</li><li>flatMap 扁平化为一个流，把一个流中的每个值都换成另一个流，然后把所有的流连接起来成为一个流</li><li>allMatch 匹配所有元素</li><li>anyMatch 至少匹配一个</li><li>noneMatch 没有任何匹配元素</li><li>findAny 返回当前流中的任意元素</li><li>findFist  查找第一个元素</li></ol><h4 id="原始类型流特化"><a href="#原始类型流特化" class="headerlink" title="原始类型流特化"></a>原始类型流特化</h4><p>Java 8引入了三个原始类型特化流接口来解决这个问题：IntStream、DoubleStream和LongStream，分别将流中的元素特化为int、long和double，从而避免了暗含的装箱成本。</p><h5 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h5><p>mapToInt、mapToDouble和mapToLong</p><h5 id="转换回对象流"><a href="#转换回对象流" class="headerlink" title="转换回对象流"></a>转换回对象流</h5><p>boxed</p><h4 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h4><ol><li>range  不包含结束值</li><li>rangeClosed 包含结束值</li></ol><h4 id="构建流"><a href="#构建流" class="headerlink" title="构建流"></a>构建流</h4><h5 id="由值创建流"><a href="#由值创建流" class="headerlink" title="由值创建流"></a>由值创建流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; java = Stream.of(<span class="string">"java"</span>, <span class="string">"php"</span>, <span class="string">"js"</span>);</span><br><span class="line">Stream&lt;Object&gt; empty = Stream.empty(); <span class="comment">//创建空流</span></span><br></pre></td></tr></table></figure><h5 id="由数组创建流"><a href="#由数组创建流" class="headerlink" title="由数组创建流"></a>由数组创建流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] numbers = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">23</span>&#125;;</span><br><span class="line">IntStream stream = Arrays.stream(numbers);</span><br></pre></td></tr></table></figure><h5 id="由文件生成流"><a href="#由文件生成流" class="headerlink" title="由文件生成流"></a>由文件生成流</h5><h5 id="由函数生成无限流"><a href="#由函数生成无限流" class="headerlink" title="由函数生成无限流"></a>由函数生成无限流</h5><ol><li>Stream.iterate</li><li>Stream.generate</li></ol><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习</title>
      <link href="/2020/05/15/python%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/05/15/python%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><code>if__name__==&#39;__main__&#39;</code></p><p>在学习Python基础语法的时候，在程序最后经常会遇到这句话，这里简单解释下它的意义。总地来说，这句代码的作用是既能保证当前的.py文件直接运行，也能保证其可以作为模块被其他.py文件导入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">()</span>:</span></span><br><span class="line">    print(__name__)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    getName()</span><br><span class="line">//输出__main__</span><br></pre></td></tr></table></figure><p>这说明，<code>__name__</code>本身是一个变量，但它不是一般的变量。实际上，它是在程序执行前就创建并赋值的，而赋值的机制是这里的关键。在当前程序被当作主程序被执行的时候，<code>__name__</code>自动被赋值为固定的字符串<code>__main__</code>；当它作为模块被其他文件调用的时候，自动被赋值为模块所在的文件名。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java8时间API</title>
      <link href="/2020/04/30/java8%E6%97%B6%E9%97%B4API/"/>
      <url>/2020/04/30/java8%E6%97%B6%E9%97%B4API/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200430173025.png" alt></p><a id="more"></a><h3 id="Java8之前的日期时间API"><a href="#Java8之前的日期时间API" class="headerlink" title="Java8之前的日期时间API"></a>Java8之前的日期时间API</h3><h4 id="表示时刻信息的-Date"><a href="#表示时刻信息的-Date" class="headerlink" title="表示时刻信息的 Date"></a>表示时刻信息的 Date</h4><h5 id="Date的设计饱受诟病，其缺陷包括但不限于："><a href="#Date的设计饱受诟病，其缺陷包括但不限于：" class="headerlink" title="Date的设计饱受诟病，其缺陷包括但不限于："></a>Date的设计饱受诟病，其缺陷包括但不限于：</h5><ul><li>类名误导，该类实际上不仅反映日期，还反映时间</li><li>方法名误导，getDate()返回日期中的天，getDay()返回的是周几</li><li>年份是与1900年的差值，可读性极差</li><li>月份是从0计数的，可读性极差</li><li>周几是相对于周日的差值，可读性极差</li><li>不提供时区设置，内部总是使用本地时区</li><li>不提供历法设置，内部使用格里历或儒略历</li><li>不提供格式化的转换，从字符串中解析日期时相当难用</li><li>参数返回太随意，比如设置1月33日，实际是2月2日</li><li>存在同名类，java.sql包下依然有一个作用相同的Date类</li><li>该类允许扩展，实际上，应当把日期-时间类设计为不可变的final类</li></ul><h5 id="当前定位"><a href="#当前定位" class="headerlink" title="当前定位"></a>当前定位</h5><p>Date 的目前定位是，<strong>唯一表示一个时刻</strong>，现在的 Date 类中接近百分之八十的方法都已废弃，被标记为 @Deprecated。还有几个为数不多没有被废弃的方法：</p><ul><li><code>public long getTime()</code>：返回内部存储的毫秒数</li><li><code>public void setTime(long time)</code>：重新设置内存的毫秒数</li><li><code>public boolean before(Date when)</code>：比较给定的时刻是否早于当前 Date 实例</li><li><code>public boolean after(Date when)</code>：比较给定的时刻是否晚于当前 Date 实例</li></ul><h4 id="描述年历的-Calendar"><a href="#描述年历的-Calendar" class="headerlink" title="描述年历的 Calendar"></a>描述年历的 Calendar</h4><p>Calendar 用于表示年月日等日期信息，它是一个抽象类，一般通过以下四种工厂方法获取它的实例对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">(TimeZone zone)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">(Locale aLocale)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">(TimeZone zone,Locale aLocale)</span></span></span><br><span class="line"><span class="function"><span class="comment">//最终调用的方法，因为不同的时区与国家语言对于时刻和年月日信息的输出是不同的，所以这也是为什么一个 Calendar 实例必须传入时区和国家信息的一个原因</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Calendar <span class="title">createCalendar</span><span class="params">(TimeZone zone,Locale aLocale)</span></span></span><br></pre></td></tr></table></figure><h4 id="DateFormat-格式化转换"><a href="#DateFormat-格式化转换" class="headerlink" title="DateFormat 格式化转换"></a>DateFormat 格式化转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line"><span class="comment">//将一个日期对象格式化为字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">format</span><span class="params">(Date date)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将一个格式化的字符串装换为一个日期对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String source)</span></span></span><br></pre></td></tr></table></figure><ul><li><p>yyyy：年份用四位进行输出</p></li><li><p>MM：月份用两位进行输出</p></li><li><p>dd：两位表示日信息</p></li><li><p>HH：两位来表示小时数</p></li><li><p>mm：两位表示分钟数</p></li><li><p>ss：两位来表示秒数</p></li><li><p>E：表示周几，如果 Locale 在中国则会输出 星期x，如果在美国或英国则会输出英文的星期</p></li><li><p>a：表示上午或下午</p></li></ul><h3 id="Java8-的时间日期-API"><a href="#Java8-的时间日期-API" class="headerlink" title="Java8 的时间日期 API"></a>Java8 的时间日期 API</h3><p>Java 8的日期和时间类包括Instant、Duration、Period、LocalDate、LocalTime、LocalDateTime，这些类都包含在java.time包中。</p><h4 id="表示时刻的-Instant"><a href="#表示时刻的-Instant" class="headerlink" title="表示时刻的 Instant"></a>表示时刻的 Instant</h4><p>Instant是时间线上的一个点，表示一个时间戳。Instant可以精确到纳秒，这超过了long的最大表示范围，所以在Instant的实现中是分成了两部分来表示，一部分是<code>seconds</code>，表示从1970-01-01 00:00:00开始到现在的秒数，另一个部分是<code>nanos</code>，表示纳秒部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据系统当前时间创建一个 Instant 实例，表示当前时刻</span></span><br><span class="line">Instant now = Instant.now(); </span><br><span class="line"><span class="comment">//通过传入一个标准时间的偏移值来构建一个 Instant 实例</span></span><br><span class="line">Instant instant = Instant.ofEpochSecond(<span class="keyword">long</span> epochSecond, <span class="keyword">long</span> nanoAdjustment);</span><br><span class="line"><span class="comment">//通过毫秒数值直接构建一个 Instant 实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Instant <span class="title">ofEpochMilli</span><span class="params">(<span class="keyword">long</span> epochMilli)</span>；</span></span><br></pre></td></tr></table></figure><h4 id="时间段Duration"><a href="#时间段Duration" class="headerlink" title="时间段Duration"></a>时间段Duration</h4><p>Duration是两个时间戳的差值，使用java.time中的时间戳类，例如Instant、LocalDateTime等实现了Temporal类的日期时间类为参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime from = LocalDateTime.of(<span class="number">2020</span>,<span class="number">4</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">LocalDateTime to = LocalDateTime.of(<span class="number">2020</span>,<span class="number">5</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">Duration duration = Duration.between(from, to);</span><br><span class="line"></span><br><span class="line">Duration duration1 = Duration.of(<span class="number">5</span>, ChronoUnit.DAYS);       <span class="comment">// 5天</span></span><br><span class="line">Duration duration2 = Duration.of(<span class="number">1000</span>, ChronoUnit.MILLIS);  <span class="comment">// 1000毫秒</span></span><br></pre></td></tr></table></figure><h4 id="日期段Period"><a href="#日期段Period" class="headerlink" title="日期段Period"></a>日期段Period</h4><p>Period是以年月日来衡量一个时间段，由于Period是以年月日衡量时间段，所以between()方法只能接收LocalDate类型的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2020-03-22 到 2020-04-22 这段时间</span></span><br><span class="line">Period period = Period.between(LocalDate.of(<span class="number">2020</span>, <span class="number">3</span>, <span class="number">22</span>),LocalDate.of(<span class="number">2020</span>, <span class="number">4</span>, <span class="number">22</span>));</span><br></pre></td></tr></table></figure><h4 id="处理日期的-LocalDate"><a href="#处理日期的-LocalDate" class="headerlink" title="处理日期的 LocalDate"></a>处理日期的 LocalDate</h4><p>LocalDate 是一个不可变类，它关注时间中年月日部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用当前系统时间的年月日信息初始化一个实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">now</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//显式指定年月日信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">of</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> dayOfMonth)</span></span>;</span><br><span class="line"><span class="comment">//根据 dayOfYear 可以推出 month 和 dayOfMonth</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">ofYearDay</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> dayOfYear)</span></span>;</span><br><span class="line"><span class="comment">//相对于格林零时区时间的日偏移量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">ofEpochDay</span><span class="params">(<span class="keyword">long</span> epochDay)</span></span>;</span><br><span class="line"></span><br><span class="line">LocalDate localDate = LocalDate.of(<span class="number">2020</span>, <span class="number">4</span>, <span class="number">22</span>);     <span class="comment">// 初始化一个日期：2022-04-22</span></span><br><span class="line"><span class="keyword">int</span> year = localDate.getYear();                     <span class="comment">// 年份：2020</span></span><br><span class="line">Month month = localDate.getMonth();                 <span class="comment">// 月份：MARCH</span></span><br><span class="line"><span class="keyword">int</span> dayOfMonth = localDate.getDayOfMonth();         <span class="comment">// 月份中的第几天：22</span></span><br><span class="line">DayOfWeek dayOfWeek = localDate.getDayOfWeek();     <span class="comment">// 一周的第几天：FRIDAY</span></span><br><span class="line"><span class="keyword">int</span> length = localDate.lengthOfMonth();             <span class="comment">// 月份的天数：30</span></span><br><span class="line"><span class="keyword">boolean</span> leapYear = localDate.isLeapYear();          <span class="comment">// 是否为闰年：true</span></span><br></pre></td></tr></table></figure><h4 id="处理时间的-LocalTime"><a href="#处理时间的-LocalTime" class="headerlink" title="处理时间的 LocalTime"></a>处理时间的 LocalTime</h4><p>类似于 LocalDate，LocalTime 专注于时间的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据系统当前时刻获取其中的时间部分内容</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">now</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//显式传入小时和分钟来构建一个实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">of</span><span class="params">(<span class="keyword">int</span> hour, <span class="keyword">int</span> minute)</span></span>;</span><br><span class="line"><span class="comment">//通过传入时分秒构造实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">of</span><span class="params">(<span class="keyword">int</span> hour, <span class="keyword">int</span> minute, <span class="keyword">int</span> second)</span></span>;</span><br><span class="line"><span class="comment">//传入时分秒和纳秒构建一个实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">of</span><span class="params">(<span class="keyword">int</span> hour, <span class="keyword">int</span> minute, <span class="keyword">int</span> second, <span class="keyword">int</span> nanoOfSecond)</span></span>;</span><br><span class="line"><span class="comment">//传入一个长整型数值代表当前日已经过去的秒数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">ofSecondOfDay</span><span class="params">(<span class="keyword">long</span> secondOfDay)</span></span>;</span><br><span class="line"><span class="comment">//传入一个长整型代表当前日已经过去的纳秒数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">ofNanoOfDay</span><span class="params">(<span class="keyword">long</span> nanoOfDay)</span></span>;</span><br><span class="line"></span><br><span class="line">LocalTime localTime = LocalTime.of(<span class="number">16</span>, <span class="number">25</span>, <span class="number">52</span>);     <span class="comment">// 初始化一个时间：16:25:52</span></span><br><span class="line"><span class="keyword">int</span> hour = localTime.getHour();                     <span class="comment">// 时：16</span></span><br><span class="line"><span class="keyword">int</span> minute = localTime.getMinute();                 <span class="comment">// 分：25</span></span><br><span class="line"><span class="keyword">int</span> second = localTime.getSecond();                 <span class="comment">// 秒：52</span></span><br></pre></td></tr></table></figure><h4 id="处理日期和时间的-LocalDateTime"><a href="#处理日期和时间的-LocalDateTime" class="headerlink" title="处理日期和时间的 LocalDateTime"></a>处理日期和时间的 LocalDateTime</h4><p>LocalDateTime类是LocalDate和LocalTime的结合体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过of()方法直接创建</span></span><br><span class="line">LocalDateTime ldt1 = LocalDateTime.of(<span class="number">2020</span>, Month.FEBRUARY, <span class="number">22</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">12</span>);</span><br><span class="line"><span class="comment">//可以调用LocalDate的atTime()方法或LocalTime的atDate()方法将LocalDate或LocalTime合并成一个LocalDateTime</span></span><br><span class="line">LocalDate localDate = LocalDate.of(<span class="number">2020</span>, Month.FEBRUARY, <span class="number">22</span>);</span><br><span class="line">LocalTime localTime = LocalTime.of(<span class="number">16</span>, <span class="number">23</span>, <span class="number">12</span>);</span><br><span class="line">LocalDateTime ldt2 = localDate.atTime(localTime);</span><br><span class="line"></span><br><span class="line"><span class="comment">//向LocalDate和LocalTime的转化</span></span><br><span class="line">LocalDate date = ldt1.toLocalDate();</span><br><span class="line">LocalTime time = ldt1.toLocalTime();</span><br></pre></td></tr></table></figure><h4 id="日期操作"><a href="#日期操作" class="headerlink" title="日期操作"></a>日期操作</h4><p>比较简单的日期操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比较简单的日期操作</span></span><br><span class="line">LocalDate date = LocalDate.of(<span class="number">2020</span>, <span class="number">4</span>, <span class="number">22</span>);          <span class="comment">// 2020-04-22</span></span><br><span class="line">LocalDate date1 = date.withYear(<span class="number">2021</span>);              <span class="comment">// 修改为 2021-04-22</span></span><br><span class="line">LocalDate date2 = date.withMonth(<span class="number">3</span>);                <span class="comment">// 修改为 2020-03-22</span></span><br><span class="line">LocalDate date3 = date.withDayOfMonth(<span class="number">1</span>);           <span class="comment">// 修改为 2020-04-01</span></span><br><span class="line">LocalDate date4 = date.plusYears(<span class="number">1</span>);                <span class="comment">// 增加一年 2021-04-22</span></span><br><span class="line">LocalDate date5 = date.minusMonths(<span class="number">2</span>);              <span class="comment">// 减少两个月，到2020年的2月</span></span><br><span class="line">LocalDate date6 = date.plus(<span class="number">5</span>, ChronoUnit.DAYS);    <span class="comment">// 增加5天 2020-04-27</span></span><br></pre></td></tr></table></figure><p>比较复杂的日期操作，比如将时间调到下一个工作日，或者是下个月的最后一天，这时候我们可以使用with()方法的另一个重载方法，它接收一个TemporalAdjuster参数，可以使我们更加灵活的调整日期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回下一个距离当前时间最近的星期日</span></span><br><span class="line">LocalDate date7 = date.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));</span><br><span class="line"><span class="comment">// 返回本月最后衣蛾周六</span></span><br><span class="line">LocalDate date9 = date.with(TemporalAdjusters.lastInMonth(DayOfWeek.SATURDAY));</span><br></pre></td></tr></table></figure><p>下面列出时间调节器类TemporalAdjuster提供的一些方法</p><table><thead><tr><th><strong>方法名</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>dayOfWeekInMonth</td><td>返回同一个月中每周的第几天</td></tr><tr><td>firstDayOfMonth</td><td>返回当月的第一天</td></tr><tr><td>firstDayOfNextMonth</td><td>返回下月的第一天</td></tr><tr><td>firstDayOfNextYear</td><td>返回下一年的第一天</td></tr><tr><td>firstDayOfYear</td><td>返回本年的第一天</td></tr><tr><td>firstInMonth</td><td>返回同一个月中第一个星期几</td></tr><tr><td>lastDayOfMonth</td><td>返回当月的最后一天</td></tr><tr><td>lastDayOfNextMonth</td><td>返回下月的最后一天</td></tr><tr><td>lastDayOfNextYear</td><td>返回下一年的最后一天</td></tr><tr><td>lastDayOfYear</td><td>返回本年的最后一天</td></tr><tr><td>lastInMonth</td><td>返回同一个月中最后一个星期几</td></tr><tr><td>next / previous</td><td>返回后一个/前一个给定的星期几</td></tr><tr><td>nextOrSame / previousOrSame</td><td>返回后一个/前一个给定的星期几，如果这个值满足条件，直接返回</td></tr></tbody></table><h4 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h4><h5 id="ZoneId"><a href="#ZoneId" class="headerlink" title="ZoneId"></a>ZoneId</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收一个“区域/城市”的字符串作为参数</span></span><br><span class="line">ZoneId shanghaiZoneId = ZoneId.of(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line"><span class="comment">//获取系统默认时区</span></span><br><span class="line">ZoneId systemZoneId = ZoneId.systemDefault();</span><br><span class="line"><span class="comment">//获取所有合法的“区域/城市”字符串</span></span><br><span class="line">Set&lt;String&gt; zoneIds = ZoneId.getAvailableZoneIds();</span><br></pre></td></tr></table></figure><h5 id="ZonedDateTime"><a href="#ZonedDateTime" class="headerlink" title="ZonedDateTime"></a>ZonedDateTime</h5><p>ZonedDateTime 可以被理解为 LocalDateTime 的外层封装，它的内部存储了一个 LocalDateTime 的实例，专门用于普通的日期时间处理。此外，它还定义了 ZoneId 和 ZoneOffset 来描述时区的概念。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//系统将以默认时区计算并存储日期时间信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZonedDateTime <span class="title">now</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//指定时区</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZonedDateTime <span class="title">now</span><span class="params">(ZoneId zone)</span></span>;</span><br><span class="line"><span class="comment">//指定日期时间和时区</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZonedDateTime <span class="title">of</span><span class="params">(LocalDate date, LocalTime time, ZoneId zone)</span>：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZonedDateTime <span class="title">of</span><span class="params">(LocalDateTime localDateTime, ZoneId zone)</span></span></span><br><span class="line"><span class="function"><span class="comment">//通过时刻和时区构建实例对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZonedDateTime <span class="title">ofInstant</span><span class="params">(Instant instant, ZoneId zone)</span>：</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//有了ZoneId，我们就可以将一个LocalDate、LocalTime或LocalDateTime对象转化为ZonedDateTime对象：</span></span></span><br><span class="line"><span class="function">LocalDateTime localDateTime </span>= LocalDateTime.now();</span><br><span class="line">ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, shanghaiZoneId);</span><br></pre></td></tr></table></figure><h4 id="格式化日期时间"><a href="#格式化日期时间" class="headerlink" title="格式化日期时间"></a>格式化日期时间</h4><p>DateTimeFormatter 作为格式化日期时间的主要类，它与之前的 DateFormat 类最大的不同就在于它是线程安全的，其他的使用上的操作基本类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">formatter.format(localDateTime);</span><br><span class="line"></span><br><span class="line">String str = <span class="string">"2020年04月23日 23:59:59"</span>;</span><br><span class="line">DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">LocalDateTime localDateTime2 = LocalDateTime.parse(str,formatter2);</span><br></pre></td></tr></table></figure><h3 id="世界标准时间（UTC）-格林威治时间（GMT）"><a href="#世界标准时间（UTC）-格林威治时间（GMT）" class="headerlink" title="世界标准时间（UTC）/格林威治时间（GMT）"></a>世界标准时间（UTC）/格林威治时间（GMT）</h3><p>UTC是协调世界时(Universal Time Coordinated)英文缩写，是由国际无线电咨询委员会规定和推荐,并由<a href="https://www.baidu.com/s?wd=国际时间局&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">国际时间局</a>(BIH)负责保持的以秒为基础的时间标度。UTC相当于<a href="https://www.baidu.com/s?wd=本初子午线&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">本初子午线</a>(即经度0度)上的平均太阳时，过去曾用<a href="https://www.baidu.com/s?wd=格林威治&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">格林威治</a>平均时(GMT)来表示.<a href="https://www.baidu.com/s?wd=北京时间&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">北京时间</a>比UTC时间早8小时，以1999年1月1日0000UTC为例，UTC时间是零点，<a href="https://www.baidu.com/s?wd=北京时间&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">北京时间</a>为1999年1月1日早上8点整。</p><p>具体参考：<a href="https://pansci.asia/archives/84978" target="_blank" rel="noopener">https://pansci.asia/archives/84978</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/mcbye/p/java8-date-time-api.html" target="_blank" rel="noopener">https://www.cnblogs.com/mcbye/p/java8-date-time-api.html</a></p><p><a href="https://juejin.im/post/5addc7a66fb9a07aa43bd2a0#heading-5" target="_blank" rel="noopener">https://juejin.im/post/5addc7a66fb9a07aa43bd2a0#heading-5</a></p><p><a href="https://www.jianshu.com/p/68d8291c3bd5" target="_blank" rel="noopener">https://www.jianshu.com/p/68d8291c3bd5</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ideaVim安装配置</title>
      <link href="/2020/04/29/ideaVim%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/04/29/ideaVim%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>和安装其它插件一样，直接在插件市场搜索ideaVim安装即可。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h4><p>ideaViim键与idea快捷键有冲突，可以在Editor Vim Emulation设置，我的快捷键设置如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200429143559.png" alt></p><a id="more"></a><h4 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h4><ul><li>zo:打开折叠</li><li>zc:关闭折叠</li></ul><h3 id="ideavim配置文件讲解"><a href="#ideavim配置文件讲解" class="headerlink" title=".ideavim配置文件讲解"></a>.ideavim配置文件讲解</h3><h5 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h5><p>开发过idea插件的人都知道，在idea中，任何目录选项上的点击操作，工具栏上的按钮都会被映射为一个<code>action</code>。即点击对应的按钮或者选项，执行相应的<code>action</code>。理解很简单，这就是MVC的思想，比如springmvc， 一个访问路径映射为一个控制器中的方法这样子。</p><p>明白<code>action</code>映射这一点很重要。因为ideavim的插件支持使用vim命令执行对应的<code>action</code>。所以，这个设计逻辑就打通了vim和idea的交互，使得我们可以在vim中完成所有和idea相关的操作。</p><h5 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h5><p>vim的定位是文本编辑。所以在idea中一般情况下vim快捷键和命令生效的基本条件就是当前窗口焦点在编辑区。这是最基础的条件，如果你当前的快键键在<code>Project</code>或者<code>Run</code>这些侧边栏中，按vim的命令肯定是不会生效的。</p><p>明白了基本条件，那我们要做的第一件事也是最重要的事情就是在idea中，如何快速的将焦点回到的编辑区。答案是：Esc</p><p>这应该是使用vim的人最能接受的快捷键了。所以，到这里基本的操作思路就很明确，当前的焦点要么在编辑区外，要么在编辑区内。而返回编辑区的操作很简单，就是<code>Esc</code>。当焦点在编辑区的时候，就可以随心所欲的使用vim的指令和快捷键了。</p><h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><p>有了idea基本的了解之后，我们就可以着手配置自己的vim了。ideavim插件的配置通常是<code>~/.ideavimrc</code>，所以将自己的配置脚本写在对应的文件中即可。当然如果你已经有了自己的vim配置文件在<code>~/.vimrc</code>下，那只需要在ideavim的配置文件中添加一行命令即可全部读取映射过来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.vimrc</span><br></pre></td></tr></table></figure><p>在~目录下，创建.ideavimrc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">"设置高亮搜索</span><br><span class="line">set hlsearch</span><br><span class="line"></span><br><span class="line">"重命名文件</span><br><span class="line">nnoremap &lt;Space&gt;rf :action RenameFile&lt;CR&gt;</span><br><span class="line">"跳到指定类</span><br><span class="line">nnoremap &lt;Space&gt;gc :action GotoClass&lt;CR&gt;</span><br><span class="line">"查找使用</span><br><span class="line">nnoremap &lt;Space&gt;fu :action FindUsages&lt;CR&gt;</span><br><span class="line">"跳转到方法的声明</span><br><span class="line">nnoremap &lt;Space&gt;gs :action GotoSuperMethod&lt;CR&gt;</span><br></pre></td></tr></table></figure><h5 id="在vim中执行idea的action"><a href="#在vim中执行idea的action" class="headerlink" title="在vim中执行idea的action"></a>在vim中执行idea的action</h5><p>为了执行idea中的<code>action</code>，ideavim有两个额外的命令来支持这一操作。</p><ul><li><code>:actionlist [pattern]</code></li><li><code>:action {actionName}</code></li></ul><p>第一个命令actionlist是帮助查看idea中有哪些命令。第二个命令是执行对应的<code>action</code>这样子。有了这两个命令的帮助我们就可以在ideavim的配置文件中使用map命令来映射idea的<code>action</code>到vim的快捷键中。</p><h2 id="Vim-中的-remap，noremap"><a href="#Vim-中的-remap，noremap" class="headerlink" title="Vim 中的 remap，noremap"></a>Vim 中的 remap，noremap</h2><p><code>remap</code>是一个使映射以递归方式工作的<strong>选项</strong> 。</p><p><code>:map</code>和<code>:noremap</code>是各种映射命令的<strong>递归</strong>和<strong>非递归</strong>版本。这意味着，如果你这样做：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:map j gg</span><br><span class="line">:map Q j</span><br><span class="line">:noremap W j</span><br></pre></td></tr></table></figure><p><code>j</code>将映射到<code>gg</code> 。 <code>Q</code> <em>也</em>将映射到<code>gg</code> ，因为<code>j</code>将被扩展用于递归映射。 <code>W</code>将被映射到<code>j</code> （而不是<code>gg</code> ），因为<code>j</code>不会针对非递归映射进行扩展。</p><p>现在请记住，Vim 是一个<strong>模态编辑器</strong> 。它具有<strong>普通</strong>模式， <strong>可视</strong>模式和其他模式。</p><p>对于这些映射集中的每一个，都有一个<a href="http://vim.wikia.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_1" target="_blank" rel="noopener">映射</a>#Creating_keymaps)可以在正常，可视，选择和操作员模式下工作（ <code>:map</code>和<code>:noremap</code> ），一个在普通模式下工作（ <code>:nmap</code>和<code>:nnoremap</code> ），一个在可视模式下（ <code>:vmap</code>和<code>:vnoremap</code> ）等等。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://programtip.com/zh/art-127704" target="_blank" rel="noopener">https://programtip.com/zh/art-127704</a></p><p><a href="https://blog.csdn.net/qq_40250122/article/details/102054921" target="_blank" rel="noopener">https://blog.csdn.net/qq_40250122/article/details/102054921</a></p><p><a href="https://my.oschina.net/funcy/blog/1832719" target="_blank" rel="noopener">https://my.oschina.net/funcy/blog/1832719</a></p><p><a href="https://blog.csdn.net/CoderBruis/article/details/94735816" target="_blank" rel="noopener">https://blog.csdn.net/CoderBruis/article/details/94735816</a></p><p><a href="https://routinepanic.com/questions/what-is-the-difference-between-the-remap-noremap-nnoremap-and-vnoremap-mapping" target="_blank" rel="noopener">https://routinepanic.com/questions/what-is-the-difference-between-the-remap-noremap-nnoremap-and-vnoremap-mapping</a></p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK安装配置</title>
      <link href="/2020/04/16/ELK%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/04/16/ELK%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="ELK常见架构"><a href="#ELK常见架构" class="headerlink" title="ELK常见架构"></a>ELK常见架构</h3><h4 id="Elasticsearch-Logstash-Kibana"><a href="#Elasticsearch-Logstash-Kibana" class="headerlink" title="Elasticsearch + Logstash + Kibana"></a>Elasticsearch + Logstash + Kibana</h4><p>这是一种最简单的架构。这种架构，通过logstash收集日志，Elasticsearch分析日志，然后在Kibana(web界面)中展示。这种架构虽然是官网介绍里的方式，但是往往在生产中很少使用。</p><h4 id="Elasticsearch-Logstash-filebeat-Kibana"><a href="#Elasticsearch-Logstash-filebeat-Kibana" class="headerlink" title="Elasticsearch + Logstash + filebeat + Kibana"></a>Elasticsearch + Logstash + filebeat + Kibana</h4><p>与上一种架构相比，这种架构增加了一个filebeat模块。filebeat是一个轻量的日志收集代理，用来部署在客户端，优势是消耗非常少的资源(较logstash)， 所以生产中，往往会采取这种架构方式，但是这种架构有一个缺点，当logstash出现故障， 会造成日志的丢失。</p><h4 id="Elasticsearch-Logstash-filebeat-redis-也可以是其他中间件，比如kafka-Kibana"><a href="#Elasticsearch-Logstash-filebeat-redis-也可以是其他中间件，比如kafka-Kibana" class="headerlink" title="Elasticsearch + Logstash + filebeat + redis(也可以是其他中间件，比如kafka) + Kibana"></a>Elasticsearch + Logstash + filebeat + redis(也可以是其他中间件，比如kafka) + Kibana</h4><p>这种架构是上面那个架构的完善版，通过增加中间件，来避免数据的丢失。当Logstash出现故障，日志还是存在中间件中，当Logstash再次启动，则会读取中间件中积压的日志。</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200416220019.png" alt></p><a id="more"></a><h3 id="filebeat安装部署"><a href="#filebeat安装部署" class="headerlink" title="filebeat安装部署"></a>filebeat安装部署</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200420164241.png" alt></p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Filebeat是一个日志文件托运工具，在你的服务器上安装客户端后，filebeat会监控日志目录或者指定的日志文件，追踪读取这些文件（追踪文件的变化，不停的读），并且转发这些信息到elasticsearch或者logstarsh、redis中存放。</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>filebeat由2个主要组件构成：prospector和harvesters。这两类组件一起协同完成Filebeat的工作，从指定文件中把数据读取出来，然后发送事件数据到配置的output中。</p><p>harvesters：主要负责进行单个文件的内容收集；在运行过程中，每一个Harvester会对一个文件逐行进行内容读取，并且把读写到的内容发送到配置的output中。</p><p>Prospector负责管理Harvsters，并且找到所有需要进行读取的数据源。如果input type配置的是log类，Prospector将会去配置度路径下查找所有能匹配上的文件，然后为每一个文件创建一个Harvster。每个Prospector都运行在自己的Go routine里。</p><p>当你开启filebeat程序的时候，它会启动一个或多个探测器（prospectors）去检测你指定的日志目录或文件，对于探测器找出的每一个日志文件，filebeat启动收割进程（harvester），每一个收割进程读取一个日志文件的新内容，并发送这些新的日志数据到处理程序（spooler），处理程序会集合这些事件，最后filebeat会发送集合的数据到你指定的地点。    </p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-5.2.2-x86_64.rpm</span><br><span class="line">sudo rpm -vi filebeat-5.2.2-x86_64.rpm</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">=========================== Filebeat prospectors =============================</span></span><br><span class="line"><span class="meta">#</span><span class="bash">filebeat.prospectors模块用来指定日志文件的来源。</span></span><br><span class="line">filebeat.prospectors:</span><br><span class="line">- input_type: log #input_type 指定日志类型，在这里是log， 应该也可以是json</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:  #paths指定日志文件路径。</span><br><span class="line">    - /root/myapp/tomcat/tomcat8/logs/*.log</span><br><span class="line"><span class="meta">#</span><span class="bash">================================ redis =====================================</span></span><br><span class="line">output.redis:</span><br><span class="line">    hosts: ["152.136.233.203:6379"]</span><br><span class="line">    password: "redis"</span><br><span class="line">    datatype: list</span><br><span class="line">    key: "tomcat-log"</span><br><span class="line">    db: 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">document_type：这个字段是用来给日志打标记的。 </span></span><br><span class="line"><span class="meta">#</span><span class="bash">fields: 也是打标记，主要为了后面日志分析查找的方便，存储的时候也会根据fields分类存储，相同fields的数据存在同一个redis key中</span></span><br><span class="line"><span class="meta">#</span><span class="bash">fields_under_root: 如果该选项设置为<span class="literal">true</span>， 则该fields会存储在top-level中。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">tail_files: 这个选项如果设置为<span class="literal">true</span>，则读取日志文件的新内容，而忽略原有的内容，一般要设置为<span class="literal">true</span></span></span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start filebeat</span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol><li><p>filebeat怎么设置从头开始读取</p><ol><li><p>找到registry文件的位置，如果没有单独配置那么文件路径为<code>/var/lib/filebeat/registry</code>，不在也没关心，可以直接find命令查找</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name registry</span><br></pre></td></tr></table></figure></li><li><p>关闭filebeat –&gt; 删掉registry文件 –&gt; 启动filebeat</p></li></ol></li><li><p>Filebeat插件启动失败，不能直接查找报错原因</p><p>老是在filebeat启动的这一步骤上出错，但是由于filebeat是由systemd启动的，因此原因也经常查不清楚，因此并不能直观的查出错误在哪里，所以今天教给大家两个寻找错误的根源的方法:</p><p>直接使用filebeat的启动方法，而不使用systemctl start filebeat来启动。比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/filebeat/bin/filebeat -c /etc/filebeat/filebeat.yml -path.home /usr/share/filebeat -path.config /etc/filebeat -path.data /var/lib/filebeat -path.logs /var/log/filebeat</span><br></pre></td></tr></table></figure></li></ol><h3 id="logstash-安装配置"><a href="#logstash-安装配置" class="headerlink" title="logstash 安装配置"></a>logstash 安装配置</h3><h4 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-5.2.2.tar.gz</span><br><span class="line">tar xf logstash-5.2.0.tar.gz -C /opt/app/</span><br></pre></td></tr></table></figure><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/ls-data  #创建/data/ls-data目录，用于logstash数据的存放</span><br><span class="line">chown -R logstash:logstash /data/ls-data #修改该目录的拥有者为logstash</span><br><span class="line">mkdir -p /log/ls-log #创建/data/ls-log目录，用于logstash日志的存放</span><br><span class="line">chown -R logstash:logstash /log/ls-log #修改该目录的拥有者为logstash</span><br></pre></td></tr></table></figure><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /config/logstash/config.d</span><br><span class="line">vim logstash.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  redis &#123;</span><br><span class="line">    host =&gt; "localhost"</span><br><span class="line">    port =&gt; "6379"</span><br><span class="line">    db =&gt; "1"</span><br><span class="line">    data_type =&gt; "list"</span><br><span class="line">    key =&gt; "tomcat-log"</span><br><span class="line">    codec =&gt; plain &#123;</span><br><span class="line">          charset =&gt; "UTF-8"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123; </span><br><span class="line">  hosts =&gt; ["localhost:9200"] </span><br><span class="line">  index =&gt; "tomcat-log"</span><br><span class="line">  &#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>input是redis， 需要指定redis的host 和port以及db，还要指明数据的类型，list表示这是一个redis的list对象。key指明redis中的key名称。</p><p>output 是elasticsearch， hosts指明elasticsearch的ip和端口，index指明这个日志存在elasticsearch中的索引名称。</p><h4 id="修改配置文件-opt-logstash-5-2-2-config-logstash-yml"><a href="#修改配置文件-opt-logstash-5-2-2-config-logstash-yml" class="headerlink" title="修改配置文件(/opt/logstash-5.2.2/config/logstash.yml)"></a>修改配置文件(/opt/logstash-5.2.2/config/logstash.yml)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置数据的存储路径为/data/ls-data</span></span><br><span class="line">path.data: /data/ls-data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置管道配置文件路径为/etc/logstash/conf.d</span></span><br><span class="line">path.config: /etc/logstash/conf.d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置日志文件的存储路径为/<span class="built_in">log</span>/ls-log</span></span><br><span class="line">path.logs: /log/ls-log</span><br></pre></td></tr></table></figure><h5 id="测试logstash"><a href="#测试logstash" class="headerlink" title="测试logstash"></a>测试logstash</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./logstash -f /config/logstash/config.d/logstash.conf --config.test_and_exit</span><br><span class="line"><span class="meta">#</span><span class="bash">--config.test_and_exit表示，检查测试创建的logstash.conf配置文件，是否有问题，如果没有问题，执行之后，显示Configuration OK 证明配置成功！</span></span><br></pre></td></tr></table></figure><h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf &amp;</span><br></pre></td></tr></table></figure><h3 id="elasticsearch安装"><a href="#elasticsearch安装" class="headerlink" title="elasticsearch安装"></a>elasticsearch安装</h3><h4 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.2.2.tar.gz</span><br><span class="line">tar -xvf elasticsearch-5.2.2.tar.gz -C  /opt/app/</span><br></pre></td></tr></table></figure><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/es-data #创建/data/es-data目录，用于elasticsearch数据的存放</span><br><span class="line">chown -R elasticsearch:elasticsearch /data/es-data  #修改该目录的拥有者为elasticsearch</span><br><span class="line">mkdir -p /log/es-log   #创建/data/es-log目录，用于elasticsearch日志的存放</span><br><span class="line">chown -R elasticsearch:elasticsearch /log/es-log #修改该目录的拥有者为elasticsearch</span><br></pre></td></tr></table></figure><h4 id="修改配置文件-opt-elasticsearch-5-2-2-config-elasticsearch-yml"><a href="#修改配置文件-opt-elasticsearch-5-2-2-config-elasticsearch-yml" class="headerlink" title="修改配置文件 (/opt/elasticsearch-5.2.2/config/elasticsearch.yml)"></a>修改配置文件 (/opt/elasticsearch-5.2.2/config/elasticsearch.yml)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置data存放的路径为/data/es-data</span></span><br><span class="line"><span class="string">path.data:</span> <span class="string">/data/es-data</span></span><br><span class="line"><span class="comment">#设置logs日志的路径为/log/es-log</span></span><br><span class="line"><span class="string">path.logs:</span> <span class="string">/log/es-log</span></span><br><span class="line"><span class="comment">#设置内存不使用交换分区</span></span><br><span class="line"><span class="string">bootstrap.memory_lock:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#配置了bootstrap.memory_lock为true时反而会引发9200不会被监听，原因不明</span></span><br><span class="line"><span class="comment">#设置允许所有ip可以连接该elasticsearch</span></span><br><span class="line"><span class="string">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment">#开启监听的端口为9200</span></span><br><span class="line"><span class="string">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="comment">#增加新的参数，为了让elasticsearch-head插件可以访问es (5.x版本，如果没有可以自己手动加)</span></span><br><span class="line"><span class="string">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><h4 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h4><p><strong><em>注意，如果你使用root用户启动elasticsearch，就会报错，启动失败，这是因为elasticsearch不允许用root用户启动。可以创建一个用户，用来启动elasticsearch</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">groupadd elasticsearch  #添加组</span><br><span class="line">useradd -g elasticsearch elasticsearch #添加用户</span><br><span class="line">chown -R elasticsearch:elasticsearch  /opt/app/elasticsearch-5.2.2/ #设置权限</span><br><span class="line">/opt/app/elasticsearch-5.2.2/bin/elasticsearch -d  #启动，后台运行</span><br></pre></td></tr></table></figure><h3 id="kibana安装配置"><a href="#kibana安装配置" class="headerlink" title="kibana安装配置"></a>kibana安装配置</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-5.2.2-linux-x86_64.tar.gz</span><br><span class="line">tar -xzf kibana-5.2.2-linux-x86_64.tar.gz -C /opt/app/</span><br></pre></td></tr></table></figure><h4 id="配置-opt-app-kibana-5-2-2-linux-x86-64-config-kibana-yml"><a href="#配置-opt-app-kibana-5-2-2-linux-x86-64-config-kibana-yml" class="headerlink" title="配置(/opt/app/kibana-5.2.2-linux-x86_64/config/kibana.yml)"></a>配置(/opt/app/kibana-5.2.2-linux-x86_64/config/kibana.yml)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.host: "0.0.0.0" #指明服务运行的地址</span><br><span class="line">elasticsearch.url: "http://localhost:9200" #指明elasticsearch运行的地址和端口</span><br><span class="line">kibana.index: ".kibana"  #指明kibana使用的索引，这个是自定义的。</span><br></pre></td></tr></table></figure><h4 id="启动-3"><a href="#启动-3" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/app/kibana-5.2.2-linux-x86_64/bin/kibana</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/e7362ccfe7e3" target="_blank" rel="noopener">https://www.jianshu.com/p/e7362ccfe7e3</a></p><p><a href="http://www.justdojava.com/2019/08/11/elk-install/" target="_blank" rel="noopener">http://www.justdojava.com/2019/08/11/elk-install/</a></p><p><a href="https://blog.51cto.com/liqingbiao/2177873" target="_blank" rel="noopener">https://blog.51cto.com/liqingbiao/2177873</a></p><p><a href="https://www.cnblogs.com/FengGeBlog/p/10644170.html" target="_blank" rel="noopener">https://www.cnblogs.com/FengGeBlog/p/10644170.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch Logstash Kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类图</title>
      <link href="/2020/04/06/%E7%B1%BB%E5%9B%BE/"/>
      <url>/2020/04/06/%E7%B1%BB%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="集合类图"><a href="#集合类图" class="headerlink" title="集合类图"></a>集合类图</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200406141848.png" alt></p><a id="more"></a><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200406150924.png" alt></p><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><h4 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h4><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200415194212.png" alt="InputStream"></p><h5 id="FilterInputStream剖析"><a href="#FilterInputStream剖析" class="headerlink" title="FilterInputStream剖析"></a>FilterInputStream剖析</h5><p>这个类的特殊之处，就是包含了一个InputStream，使得可以在这个InputStream基础上进行多种封装，从而达到装饰的目的。</p><p>装饰者模式，顾名思义，是对原有类进行了一定的装饰，装饰后的类必须和原有的类拥有相同的方法，当然，可以在原有类的基础上进行扩展。</p><p>这里的装饰者模式通过包含一个原有的Inputstream对象，并且将InputStream原有的方法或直接暴露，或进行装饰后暴露，又或者添加了新的特性，如DataInputStream中的readInt()，BufferedInputStream中的缓存功能。</p><p>为什么InputStream选择装饰者模式，而非直接继承的方法来扩展，这就是装饰者模式VS继承。如果单纯的使用继承，就会造成类的“爆炸”式增长。</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200415204429.png" alt></p><p>直接使用继承，可以实现“目的”和“方法”，但是每一种来源的输入流，都需要改善流读取方法，因此在使用继承时，每一个InputStream的子类都需要DataInputStream，BufferedInputStream这几个类提供的“装饰作用”的功能，因此需要的类的数目就是A*B的数目。</p><p>而直接使用装饰者模式，将InputStream的几个直接子类进一步抽象，在此基础上提供装饰作用，所需要的类的数目是A+B。使用装饰者模式使得java类的更有层次性，类的数目得到充分控制。这就是装饰者模式相比于继承的优势。</p><h4 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h4><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200416173453.png" alt></p><h4 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h4><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200416174538.png" alt></p><h4 id="字符输入流-1"><a href="#字符输入流-1" class="headerlink" title="字符输入流"></a>字符输入流</h4><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200416190044.png" alt></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/zhao123h/java/article/details/52826682" target="_blank" rel="noopener">https://blog.csdn.net/zhao123h/java/article/details/52826682</a></p><p><a href="https://blog.csdn.net/zhoupenglei/article/details/46312405" target="_blank" rel="noopener">https://blog.csdn.net/zhoupenglei/article/details/46312405</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类图 java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm性能监控与调优</title>
      <link href="/2020/03/23/jvm%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%B0%83%E4%BC%98/"/>
      <url>/2020/03/23/jvm%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h3 id="jvm参数类型"><a href="#jvm参数类型" class="headerlink" title="jvm参数类型"></a>jvm参数类型</h3><a id="more"></a><ul><li><p>标准参数(jvm各个版本基本不变)</p><ul><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-help  </span><br><span class="line">-server </span><br><span class="line">-client </span><br><span class="line">-version </span><br><span class="line">-cp </span><br><span class="line">-classpath</span><br></pre></td></tr></table></figure></li></ul></li><li><p>X参数（非标准化参数，变化比较小）</p><ul><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-Xint 解释执行</span><br><span class="line">-Xcomp 第一次使用就编译成本地代码</span><br><span class="line">-Xmixed 混合模式，JVM自己来决定是否编译成本地代码</span><br></pre></td></tr></table></figure></li></ul></li><li><p>XX参数（用的比较多，主要用来JVM调优和debug）</p><ul><li><p>Boolean类型</p><p>格式：-XX:[+-]<name>表示启用或者禁用name属性</name></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:+UseG1GC</span><br></pre></td></tr></table></figure></li><li><p>非Boolean类型</p><p>格式：-XX:<name>=<value> 表示name属性的值是value</value></name></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-XX:MaxGCPauseMillis=500</span><br><span class="line">XX:GCTimeRatio=19</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">-Xms -Xmx 属于XX参数</span></span><br><span class="line">-Xms 等价于 -XX:InitialHeapSize</span><br><span class="line">-Xmx 等价于 -XX:MaxHeapSize</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="查看jvm运行时参数"><a href="#查看jvm运行时参数" class="headerlink" title="查看jvm运行时参数"></a>查看jvm运行时参数</h3><ul><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintFlagsInitial 查看初始值</span><br><span class="line">-XX:+PrintFlagsFinal  查看最终值</span><br><span class="line">-XX:+UnlockExperimentalVMOptions 解锁实验参数</span><br><span class="line">-XX:+UnlockDiagnosticVMOptions 解锁诊断参数</span><br><span class="line">-XX:+PrintCommandLineFlags  打印命令行参数</span><br></pre></td></tr></table></figure></li><li><p><code>-XX:+PrintFlagsFinal</code>  </p><p><code>java  -XX:+PrintFlagsFinal -version</code></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200323234316.png" alt></p><p>=表示默认值</p><p>:=被用户或者jvm修改后的值</p></li><li><p>jinfo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flags 55208  打印被修改过的jvm参数值</span><br><span class="line">jinfo -flag &lt;name&gt; 55208  打印对应name的参数值</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200323234724.png" alt></p></li></ul><h3 id="查看jvm统计信息"><a href="#查看jvm统计信息" class="headerlink" title="查看jvm统计信息"></a>查看jvm统计信息</h3><ul><li><p>jstat</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200323235354.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">options: </span><br><span class="line"> -class 类装载</span><br><span class="line"> -compiler JIT编译信息</span><br><span class="line"> -gc 垃圾回收信息</span><br></pre></td></tr></table></figure><ul><li><p>类装载</p></li><li><p>垃圾收集</p><p>S0C S1C S0U S1U : S0与S1的总量与使用量</p><p>EC EU ：Eden区总量与使用量</p><p>OC OU：Old区的总量与使用量</p><p>MC MU：Metaspace 区总量与使用量</p><p>CCSC CCSU：压缩类空间总量与使用量</p><p>YGC YGCT ：YongGC的次数与时间</p><p>FGC FGCT：FullGC的次数与时间</p><p>GCT：总的GC时间</p></li><li><p>JIT编译</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200324001144.png" alt></p></li></ul></li></ul><h3 id="导出内存映像文件"><a href="#导出内存映像文件" class="headerlink" title="导出内存映像文件"></a>导出内存映像文件</h3><ul><li><p>内存溢出自动导出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:HeapDumpPath=./</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用jmap命令手动导出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:format=b,file=heap.hprof &lt;虚拟机id&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用总结</title>
      <link href="/2020/02/26/hexo%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/26/hexo%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><ol><li><p>添加一条域名解析记录</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200226170106.png" alt></p><a id="more"></a></li><li><p>在hexo的source文件夹中添加CNAME文件，内容为自己的域名</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200226170452.png" alt></p></li></ol><h3 id="修改新建文章模版"><a href="#修改新建文章模版" class="headerlink" title="修改新建文章模版"></a>修改新建文章模版</h3><p>模版路径为hexo/scaffolds/post.md</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ学习</title>
      <link href="/2020/02/22/RabbitMQ%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/02/22/RabbitMQ%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200627100738.png" alt></p><a id="more"></a><h3 id="安装并启动"><a href="#安装并启动" class="headerlink" title="安装并启动"></a>安装并启动</h3><ol><li><p>配置yum源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[rabbitmq-erlang]</span><br><span class="line">name=rabbitmq-erlang</span><br><span class="line">baseurl=https://dl.bintray.com/rabbitmq/rpm/erlang/20/el/7</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><!--more--></li><li><p>安装  <code>yum install -y rabbitmq-server</code></p></li><li><p>启动 <code>rabbitmq-server start &amp;</code></p></li><li><p>安装管控台插件 <code>rabbitmq-plugins enable rabbitmq_management</code></p></li></ol><h3 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h3><ol><li><p>登录</p><p>浏览器输入<code>http://ip:15672/</code>  用户名<code>guest</code>  密码<code>guest</code></p></li></ol><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><ol><li>关闭应用  <code>rabbitmqctl stop_app</code></li><li>启动应用 <code>rabbitmqctl start_app</code></li><li>节点状态 <code>rabbitmqctl status</code></li><li>添加用户 <code>rabbitmqctl add username password</code></li><li>列出所有用户 <code>rabbitmqctl list_users</code></li><li>删除用户 <code>rabbitmqctl delete_user username</code></li><li>修改密码 <code>rabbitmqctl change_password username newpassword</code></li><li>列出用户权限<code>rabbitmqctl list_user_permissions username</code></li><li>清除用户权限 <code>rabbitmqctl clear_permissions -p vhostpath username</code></li><li>设置用户权限 <code>rabbitmqctl set_permissions -p vhostpath username &quot;.*&quot;&quot;.*&quot;&quot;.*&quot;</code></li><li>创建虚拟主机<code>rabbitmqctl add_vhost vhostpath</code></li><li>列出所有虚拟主机  <code>rabbitmqctl list_vhost</code></li><li>列出虚拟主机上所有权限  <code>rabbitmqctl list_permissions -p vhostpath</code></li><li>删除虚拟主机 <code>rabbitmqctl delete_vhost vhostpath</code></li><li>查看所有队列信息 <code>rabbitmqctl list_queues</code></li><li>清除队列中的消息 <code>rabbitmqctl -p vhostpath purge_queue blue</code></li><li>移除所有数据（要在rabbitmqctl stop_app之后使用） <code>rabbitmqctl reset</code></li><li>组成集群命令<code>rabbitmqctl join_cluster &lt;clusternode&gt; [--ram]</code></li><li>查看集群状态<code>rabbitmqctl cluster_status</code></li><li>修改集群节点的存储形式<code>rabbitmqctl change_cluster_node_type disc|ram</code></li><li>摘除节点<code>rabbitmqctl forget_cluster_node [offline]</code></li><li>修改节点名称<code>rabbitmqctl rename_cluster_node oldnode1 newnode1 [oldnode2] [newnode2]</code></li></ol><h3 id="java客户端"><a href="#java客户端" class="headerlink" title="java客户端"></a>java客户端</h3><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rabbitmq.quickstart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: haoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/2/23 4:03 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个ConnectionFactory</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">"152.136.233.203"</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        <span class="comment">//2.通过连接工厂创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//3.通过connection创建一个channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//4.通过channel发送数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            String msg = <span class="string">"hello RabbitMQ!"</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">""</span>,<span class="string">"test001"</span>,<span class="keyword">null</span>,msg.getBytes());</span><br><span class="line">          <span class="comment">//如果未指定exchange，默认使用(AMQP default) exchange,这个exchange会根据routerKey找到同名队列</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.关闭相关的连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.rabbitmq.quickstart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: haoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/2/23 4:04 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个ConnectionFactory</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">"152.136.233.203"</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        <span class="comment">//2.通过连接工厂创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//3.通过connection创建一个channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//4.声明（创建）一个队列</span></span><br><span class="line">        String queueName = <span class="string">"test001"</span>;</span><br><span class="line">        channel.queueDeclare(queueName,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//5.创建消费者</span></span><br><span class="line">        QueueingConsumer queueingConsumer = <span class="keyword">new</span> QueueingConsumer(channel);</span><br><span class="line">        <span class="comment">//6.设置channel</span></span><br><span class="line">        channel.basicConsume(queueName,<span class="keyword">true</span>,queueingConsumer);</span><br><span class="line">        <span class="comment">//7.获取消息</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            QueueingConsumer.Delivery delivery = queueingConsumer.nextDelivery();</span><br><span class="line">            String msg = <span class="keyword">new</span> String(delivery.getBody());</span><br><span class="line">            System.out.println(<span class="string">"msg="</span>+msg);</span><br><span class="line">            <span class="comment">//Envelope envelope = delivery.getEnvelope();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>接收消息，并根据路由键转发消息到绑定的队列。</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>Name 交换机名称</li><li>Type 交换机类型 direct topic fanout headers（以下图片参考<a href="https://www.cnblogs.com/stefan-liu/p/5315809.html）" target="_blank" rel="noopener">https://www.cnblogs.com/stefan-liu/p/5315809.html）</a><ul><li>direct（使用比较多）<ul><li>所有发送到Direct Exchange的消息被转发到RouteKey中指定的Queue。</li><li>Direct模式可以使用RabbitMQ自带的Exchange:default Exchange,所以不需要将Exchange进行任何绑定（binding）操作，消息传递时，RouterKey必须完全匹配才能完全接收，否则该消息会被抛弃。</li><li><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200223204301.png" alt></li></ul></li><li>Topic <ul><li>所有发送到Topic Exchange的消息被转发到所有关心RouterKey中指定Topic的Queue上。</li><li>Exchange将RouteKey和某Topic进行模糊匹配，此时队列需要绑定一个Topic。</li><li><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200223204659.png" style="zoom:50%;"></li></ul></li><li>fanout<ul><li>不处理路由键，只需要简单的将队列绑定到交换机上。</li><li>发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。</li><li>转发消息是最快的。</li><li><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200223210410.png" alt></li></ul></li></ul></li><li>Durability 是否需要持久化，true未持久化。</li><li>Auto Delete 当最后一个绑定到Exchange上的队列删除后，自动删除该Exchange。</li><li>Internal 当前Exchange是否用于RabbitMQ内部使用，默认为false。</li><li>Arguments 扩展参数，用于扩展AMQP自制定化使用。</li></ul><h4 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h4><ul><li><p>符号 “#” 匹配一个或多个词</p><p>“log.#” 能够匹配到“log.info.oa”</p></li><li><p>符号 “*” 匹配不多不少一个词</p><p>“log.*” 只会匹配到 “log.erro”</p></li></ul><h3 id="binding"><a href="#binding" class="headerlink" title="binding"></a>binding</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>Exchange 和 Exchang、Queue之间的连接关系。</p><p>Binding中可以包含RoutingKey或者参数。</p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>存储消息数据</p><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><ul><li>Durability:是否持久化，Durable:是；Transient:否。</li><li>Auto delete:yes:表示当最后一个监听移除之后，该Queue会自动被删除。</li></ul><h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h3><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><p>服务器和应用程序之间传送的数据。</p><p>本质上就是一段数据，由Properties和Payload(Body)组成。</p><h4 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h4><ul><li><p>Delivery mode  送达模式  ：持久化非持久化</p></li><li><p>Headers 自定义属性</p></li><li><p>其他属性：</p><ul><li>content_type </li><li>content_encoding </li><li>priority  优先级</li><li>correlation_id   消息唯一id(消息幂等)</li><li>reply_to</li><li>expiration 消息到期时间</li><li>message_id 消息的id</li><li>timestamp</li><li>type</li><li>user_id</li><li>app_id</li><li>cluster_id</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">headers.put(<span class="string">"my1"</span>, <span class="string">"111"</span>);</span><br><span class="line">headers.put(<span class="string">"my2"</span>, <span class="string">"222"</span>);</span><br><span class="line">AMQP.BasicProperties properties = <span class="keyword">new</span> AMQP.BasicProperties.Builder()</span><br><span class="line">  .deliveryMode(<span class="number">2</span>)</span><br><span class="line">  .contentEncoding(<span class="string">"UTF-8"</span>)</span><br><span class="line">  .expiration(<span class="string">"10000"</span>)</span><br><span class="line">  .headers(headers)</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure></li></ul><h3 id="Virtual-host-虚拟主机"><a href="#Virtual-host-虚拟主机" class="headerlink" title="Virtual host 虚拟主机"></a>Virtual host 虚拟主机</h3><h4 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h4><p>虚拟地址，用于进行逻辑隔离，最上层的消息路由。</p><p>一个vhost里面可以有若干个exchange和queue。</p><p>同一个vhost里面不能有相同名称的exchange和queue。</p><h3 id="RabbitMQ架构图"><a href="#RabbitMQ架构图" class="headerlink" title="RabbitMQ架构图"></a>RabbitMQ架构图</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200224135456.png" alt></p><h3 id="消息丢失"><a href="#消息丢失" class="headerlink" title="消息丢失"></a>消息丢失</h3><h4 id="生产端的可靠性投递"><a href="#生产端的可靠性投递" class="headerlink" title="生产端的可靠性投递"></a>生产端的可靠性投递</h4><ul><li>保障消息的成功发出</li><li>保障MQ节点成功接收</li><li>发送端收到MQ节点确认应答</li><li>完善的消息补偿机制</li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li><p>消息落库，对消息状态进行打标</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200225130507.png" alt></p><ol><li>业务数据入库，消息入库，消息状态为0</li><li>发送消息到MQ</li><li>消息确认回调</li><li>更新消息状态为1</li><li>定时任务拉取一段时间内状态一直为0的消息，进行重发</li><li>超过规定的重发次数仍然没有成功，更新消息状态为2，人工介入</li></ol></li><li><p>消息的延迟投递，做二次确认，回调检查（高并发）</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200225133905.png" alt></p><ol><li>业务数据入库</li><li>发送两条消息，其中一条正常发送（队列0），其中一条延迟发送（队列1）</li><li>消费者消费消息</li><li>消费者发送消费确认消息到MQ（队列2）</li><li>callback服务消费确认消息（队列2），并将确认结果入库</li><li>callback服务消费延迟发送的消息（队列1），确认此消息是否成功，如果未成功，通知生产者重发</li></ol></li></ul><h3 id="重复消费"><a href="#重复消费" class="headerlink" title="重复消费"></a>重复消费</h3><h4 id="消费端-幂等性保障"><a href="#消费端-幂等性保障" class="headerlink" title="消费端-幂等性保障"></a>消费端-幂等性保障</h4><p>消费端实现幂等性，就意味着我们的消息永远不会消费多次，即使我们收到了多条一样的消息</p><h4 id="幂等性解决方案"><a href="#幂等性解决方案" class="headerlink" title="幂等性解决方案"></a>幂等性解决方案</h4><ol><li>唯一ID+指纹码机制 ，利用数据库主键去重<ul><li>select count(1) from TABLE where id = 唯一id+指纹码</li><li>好处：实现简单；坏处：高并发下有数据库写入的性能瓶颈</li><li>解决方案：根据ID进行分库分表</li></ul></li><li>利用Redis的原子性去实现<ul><li>需要考虑的问题<ul><li>是否要进行数据的落库，如果要落库的话，要解决的问题是数据库和缓存如何做到原子性</li><li>如果不进行落库，都存储到缓存中，如何设置定时同步的策略</li></ul></li></ul></li></ol><h3 id="确认机制"><a href="#确认机制" class="headerlink" title="确认机制"></a>确认机制</h3><h4 id="Confirm确认消息"><a href="#Confirm确认消息" class="headerlink" title="Confirm确认消息"></a>Confirm确认消息</h4><h5 id="生产端代码"><a href="#生产端代码" class="headerlink" title="生产端代码"></a>生产端代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定我们的消息投递模式: 消息的确认模式 </span></span><br><span class="line">channel.confirmSelect();</span><br><span class="line"><span class="comment">//添加一个确认监听</span></span><br><span class="line">channel.addConfirmListener(<span class="keyword">new</span> ConfirmListener() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleNack</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.err.println(<span class="string">"-------no ack!-----------"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleAck</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.err.println(<span class="string">"-------ack!-----------"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Return消息"><a href="#Return消息" class="headerlink" title="Return消息"></a>Return消息</h4><p>在某些情况下，如果我们在发送消息的时候，当前的exchange不存在或者指定的路由key找不到，这个时候如果我们需要监听这种不可达的消息，就要使用Return Listener</p><h5 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h5><p>Mandatory:如果为true,则监听器会接收到路由不可达的消息，然后进行后续处理，如果为false,那么broker端自动删除该消息</p><h5 id="生产端代码-1"><a href="#生产端代码-1" class="headerlink" title="生产端代码"></a>生产端代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">channel.addReturnListener(<span class="keyword">new</span> ReturnListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturn</span><span class="params">(<span class="keyword">int</span> replyCode, String replyText, String exchange,</span></span></span><br><span class="line"><span class="function"><span class="params">String routingKey, BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">System.err.println(<span class="string">"---------handle  return----------"</span>);</span><br><span class="line">System.err.println(<span class="string">"replyCode: "</span> + replyCode);</span><br><span class="line">System.err.println(<span class="string">"replyText: "</span> + replyText);</span><br><span class="line">System.err.println(<span class="string">"exchange: "</span> + exchange);</span><br><span class="line">System.err.println(<span class="string">"routingKey: "</span> + routingKey);</span><br><span class="line">System.err.println(<span class="string">"properties: "</span> + properties);</span><br><span class="line">System.err.println(<span class="string">"body: "</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//mandatory设置为true</span></span><br><span class="line">channel.basicPublish(exchange, routingKeyError, <span class="keyword">true</span>, <span class="keyword">null</span>, msg.getBytes());</span><br></pre></td></tr></table></figure><h3 id="消费端自定义监听"><a href="#消费端自定义监听" class="headerlink" title="消费端自定义监听"></a>消费端自定义监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">connectionFactory.setHost(<span class="string">"ip"</span>);</span><br><span class="line">connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">Connection connection = connectionFactory.newConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">String exchangeName = <span class="string">"test_consumer_exchange"</span>;</span><br><span class="line">String routingKey = <span class="string">"consumer.#"</span>;</span><br><span class="line">String queueName = <span class="string">"test_consumer_queue"</span>;</span><br><span class="line"></span><br><span class="line">channel.exchangeDeclare(exchangeName, <span class="string">"topic"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line">channel.basicConsume(queueName, <span class="keyword">true</span>, <span class="keyword">new</span> MyConsumer(channel));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConsumer</span> <span class="keyword">extends</span> <span class="title">DefaultConsumer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyConsumer</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(channel);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.err.println(<span class="string">"-----------consume message----------"</span>);</span><br><span class="line">System.err.println(<span class="string">"consumerTag: "</span> + consumerTag);</span><br><span class="line">System.err.println(<span class="string">"envelope: "</span> + envelope);</span><br><span class="line">System.err.println(<span class="string">"properties: "</span> + properties);</span><br><span class="line">System.err.println(<span class="string">"body: "</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费端限流"><a href="#消费端限流" class="headerlink" title="消费端限流"></a>消费端限流</h3><p>RabbitMQ提供了一种qos（服务质量保证）功能，即在非自动确认消息的前提下，如果一定数目的消息（通过基于consume或者channel设置qos的值）未被确认前，不进行消费新的消息</p><p><strong>autoACK</strong>  一定要设置成false.不自动签收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//void basicQos(int prefetchSize, int prefetchCount, boolean global) throws IOException;</span></span><br><span class="line"><span class="comment">//prefetchSize：0</span></span><br><span class="line"><span class="comment">//prefetchCount：告诉RabbitMQ不要同时给一个消费者推送多于N个消息，即一旦有N个消息还没有ack,则该cousumer将block掉，直到有消息ack</span></span><br><span class="line"><span class="comment">//global:是否将上面设置应用于channel,就是上面的限制是channel级别还是consumer级别</span></span><br><span class="line"><span class="comment">//prefetchSize、global  RabbitMQ还没有实现</span></span><br><span class="line"><span class="comment">//1 限流方式  第一件事就是 autoAck设置为 false</span></span><br><span class="line"><span class="comment">//消费端</span></span><br><span class="line">channel.basicQos(<span class="number">0</span>, <span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">channel.basicConsume(queueName, <span class="keyword">false</span>, <span class="keyword">new</span> MyConsumer(channel));</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConsumer</span> <span class="keyword">extends</span> <span class="title">DefaultConsumer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Channel channel ;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyConsumer</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(channel);</span><br><span class="line"><span class="keyword">this</span>.channel = channel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.err.println(<span class="string">"-----------consume message----------"</span>);</span><br><span class="line">System.err.println(<span class="string">"consumerTag: "</span> + consumerTag);</span><br><span class="line">System.err.println(<span class="string">"envelope: "</span> + envelope);</span><br><span class="line">System.err.println(<span class="string">"properties: "</span> + properties);</span><br><span class="line">System.err.println(<span class="string">"body: "</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">    <span class="comment">//手动ack</span></span><br><span class="line">channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费端ack与重回队列"><a href="#消费端ack与重回队列" class="headerlink" title="消费端ack与重回队列"></a>消费端ack与重回队列</h3><h4 id="重回队列"><a href="#重回队列" class="headerlink" title="重回队列"></a>重回队列</h4><p>对没有处理成功的消息，把消息重新传递给Broker</p><p>一般在实际的应用中，都会关闭重回队列，设置为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConsumer</span> <span class="keyword">extends</span> <span class="title">DefaultConsumer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Channel channel ;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyConsumer</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(channel);</span><br><span class="line"><span class="keyword">this</span>.channel = channel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.err.println(<span class="string">"-----------consume message----------"</span>);</span><br><span class="line">System.err.println(<span class="string">"body: "</span> + <span class="keyword">new</span> String(body));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((Integer)properties.getHeaders().get(<span class="string">"num"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//nack,处理失败，重回队列</span></span><br><span class="line">channel.basicNack(envelope.getDeliveryTag(), <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="死信队列（DLX-Dead-Letter-Exchange）"><a href="#死信队列（DLX-Dead-Letter-Exchange）" class="headerlink" title="死信队列（DLX  Dead-Letter-Exchange）"></a>死信队列（DLX  Dead-Letter-Exchange）</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>当消息在一个队列中变成死信（dead message）之后，它能被重新publish到另外一个Exchange,这个Exchange就是DLX</li><li>DLX也是一个正常的Exchange</li></ul><h4 id="消息变成死信的几种情况"><a href="#消息变成死信的几种情况" class="headerlink" title="消息变成死信的几种情况"></a>消息变成死信的几种情况</h4><ul><li>消息被拒绝（basic.reject/basic.nack）并且requeue=false</li><li>消息TTL过期</li><li>队列达到最大长度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">connectionFactory.setHost(<span class="string">"ip"</span>);</span><br><span class="line">connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">Connection connection = connectionFactory.newConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这就是一个普通的交换机 和 队列 以及路由</span></span><br><span class="line">String exchangeName = <span class="string">"test_dlx_exchange"</span>;</span><br><span class="line">String routingKey = <span class="string">"dlx.#"</span>;</span><br><span class="line">String queueName = <span class="string">"test_dlx_queue"</span>;</span><br><span class="line"></span><br><span class="line">channel.exchangeDeclare(exchangeName, <span class="string">"topic"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; agruments = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">agruments.put(<span class="string">"x-dead-letter-exchange"</span>, <span class="string">"dlx.exchange"</span>);</span><br><span class="line"><span class="comment">//这个agruments属性，要设置到声明队列上</span></span><br><span class="line">channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, agruments);</span><br><span class="line">channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">//要进行死信队列的声明:</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">"dlx.exchange"</span>, <span class="string">"topic"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">"dlx.queue"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">channel.queueBind(<span class="string">"dlx.queue"</span>, <span class="string">"dlx.exchange"</span>, <span class="string">"#"</span>);</span><br><span class="line">channel.basicConsume(queueName, <span class="keyword">true</span>, <span class="keyword">new</span> MyConsumer(channel));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程笔记</title>
      <link href="/2020/01/08/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/08/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ol><li><p>CAS底层汇编命令  lock cmpxchg</p></li><li><p>volatile</p><ul><li><p>线程内存可见</p></li><li><p>防止指令重排序</p><a id="more"></a></li></ul></li><li><p>cache line 缓存行：当cpu去内存读数据时，会把附近的数据读出来，一般是64字节,是cpu同步的基本单位</p><p>缓存行隔离会比缓存行伪共享效率高</p></li><li><p>MESI</p><ul><li><p>伪共享</p></li><li><p>合并写</p><p>cpu内部的4个字节buffer</p></li><li><p>指令重排序</p></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rsync使用笔记</title>
      <link href="/2019/12/29/rsync%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/12/29/rsync%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="rsync特征"><a href="#rsync特征" class="headerlink" title="rsync特征"></a>rsync特征</h3><ol><li><p>速度：第一次的rsync同步源的整个目录到目标位置。之后，rsync只传递改变的块或字节到目标位置，传输非常快。</p></li><li><p>安全：rsync在传输中允许使用ssh协议加密数据。</p></li><li><p>更少的带宽：rsync分别在发送和接收端对数据进行压缩和解压缩。</p></li><li><p>特权：不需要特殊权限来安装和执行rsync。</p><a id="more"></a></li></ol><h3 id="rsync语法"><a href="#rsync语法" class="headerlink" title="rsync语法"></a>rsync语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rsync options <span class="built_in">source</span> destination</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">source</span>和destination可以是本地或远程。在远程的情况下，需要指定登录名、远程服务器的名称和位置。</span></span><br></pre></td></tr></table></figure><h3 id="rsync使用示例"><a href="#rsync使用示例" class="headerlink" title="rsync使用示例"></a>rsync使用示例</h3><ol><li><p><strong>在本地服务器上同步两个目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rsync -zvr 源目录 目标目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -z 允许压缩</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v  详细输出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -r  递归</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rsync 不会同步源文件或目录的时间戳</span></span><br></pre></td></tr></table></figure></li><li><p><strong>用rsync –a同步时间戳</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rsync -azv 源目录 目标目录</span></span><br></pre></td></tr></table></figure></li><li><p><strong>只同步一个文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rsync -v /var/test.txt /root/temp/</span></span><br></pre></td></tr></table></figure></li><li><p><strong>将本地文件同步到远程服务器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rsync -avz 源目录  username@remote_server_ip:path</span></span><br></pre></td></tr></table></figure></li><li><p><strong>将远程文件同步到本地服务器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rsync -avz username@remote_server_ip:path 目标目录</span></span><br></pre></td></tr></table></figure></li><li><p><strong>指定使用某一协议同步</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rsync -avz -e ssh username@remote_server_ip:path 目标目录</span></span><br></pre></td></tr></table></figure></li><li><p><strong>不覆盖目标位置已改变的文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果目标位置的文件已被修改，而我们不希望旧文件覆盖它时,可以使用-u选项。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rsync -avzu username@remote_server_ip:path /root/temp</span></span><br></pre></td></tr></table></figure></li><li><p><strong>查看rsync进度</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rsync -avz --progress username@remote_server_ip:path /root/temp</span></span><br></pre></td></tr></table></figure></li><li><p><strong>删除目标位置创建的文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">若我们希望rsync时删除在源位置不存在而在目标位置存在的文件，可以使用-delete选项。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rsync -avz --delete username@remote_server_ip:path /root/temp</span></span><br></pre></td></tr></table></figure></li><li><p><strong>在目标位置不创建新文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用-existing选项使得在同步时只同步目标位置存在的文件，而不创建新文件。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rsync -avz --existing username@remote_server_ip:path /root/temp</span></span><br></pre></td></tr></table></figure></li><li><p><strong>查看源和目标的不同文件或目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rsync -avzi username@remote_server_ip:path /root/temp/</span></span><br><span class="line">receiving file list ... done</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">f.st.... Basenames</span></span><br><span class="line">.f....og. Dirnames</span><br><span class="line">=====================================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 代表文件已被传输到本地主机。</span></span><br><span class="line">f：代表这是个文件</span><br><span class="line">s：代表文件大小发生变化</span><br><span class="line">t：代表时间戳发生变化</span><br><span class="line">o：属主发生变化</span><br><span class="line">g：属组发生变化</span><br></pre></td></tr></table></figure></li><li><p><strong>在传输时指定包括或排除某些文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --include 'P*' --exclude '*' username@remote_server_ip:path /root/temp</span><br></pre></td></tr></table></figure></li><li><p><strong>不传输大文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用rsync –max-size选项后，rsync将不传输大于指定大小的文件</span></span><br><span class="line">rsync -avz --max-size='100K' username@remote_server_ip:path /root/temp/</span><br></pre></td></tr></table></figure></li><li><p><strong>传输整个文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rsync的主要特征之一是它只传输改变的块到目标位置，而不是传输整个文件。如果网络带宽对你不是问题(CPU有)，您可以使用-w选项来传输整个文件。它会加速rsync过程，因为它不用在源和目标位置执行校验和。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rsync -avzW  username@remote_server_ip:path /root/temp</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper学习笔记</title>
      <link href="/2019/12/03/zookeeper%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/12/03/zookeeper%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ol><li><p>启动  ./zkServer.sh start</p></li><li><p>客户端连接 ./zkCli.sh</p><a id="more"></a></li></ol><h3 id="客户端命令学习"><a href="#客户端命令学习" class="headerlink" title="客户端命令学习"></a>客户端命令学习</h3><ul><li><p>ls /</p></li><li><p>ls2 /</p></li><li><p>stat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cZxid = 0x0   #id</span><br><span class="line">ctime = Thu Jan 01 08:00:00 CST 1970 #创建时间</span><br><span class="line">mZxid = 0x0   #修改id</span><br><span class="line">mtime = Thu Jan 01 08:00:00 CST 1970  #修改时间</span><br><span class="line">pZxid = 0x6   #子节点id</span><br><span class="line">cversion = 2  #子节点版本</span><br><span class="line">dataVersion = 0 #当前节点数据版本号</span><br><span class="line">aclVersion = 0   #当前节点权限的版本号</span><br><span class="line">ephemeralOwner = 0x0 #是否是临时节点</span><br><span class="line">dataLength = 0   #数据长度</span><br><span class="line">numChildren = 2  #子节点数量</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>session过期，则临时节点znode会被抛弃</p></li><li><p>create命令</p></li><li><p>set命令</p></li><li><p>delete命令</p></li></ol><h3 id="watcher-机制"><a href="#watcher-机制" class="headerlink" title="watcher 机制"></a>watcher 机制</h3><h4 id="watcher"><a href="#watcher" class="headerlink" title="watcher"></a>watcher</h4><ul><li>针对每个节点的操作，都会有一个监督者-&gt;watcher</li><li>当监控的某个对象(znode)发生变化,则触发watcher事件</li><li>zk中的watcher是一次性的，触发后立即销毁</li></ul><h4 id="watcher事件类型1"><a href="#watcher事件类型1" class="headerlink" title="watcher事件类型1"></a>watcher事件类型1</h4><ul><li>创建父节点触发：NodeCreated</li><li>修改父节点数据触发：NodeDataChanged</li><li>删除父节点触发：NodeDeleted</li></ul><h4 id="watcher事件类型2"><a href="#watcher事件类型2" class="headerlink" title="watcher事件类型2"></a>watcher事件类型2</h4><ul><li>ls为父节点设置watcher,创建子节点触发：NodeChildrenChanged</li><li>ls为父节点设置watcher,删除子节点触发：NodeChildrenChanged</li><li>ls为父节点设置watcher,修改子节点不触发事件</li></ul><h3 id="ACL权限控制"><a href="#ACL权限控制" class="headerlink" title="ACL权限控制"></a>ACL权限控制</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>针对节点设置相关读写权限，目的是为了保证数据安全</p><h4 id="acl命令"><a href="#acl命令" class="headerlink" title="acl命令"></a>acl命令</h4><ol><li>getAcl:获取某个节点的acl权限信息</li><li>setAcl:设置某个节点的acl权限信息</li><li>addauth:输入认证授权信息，注册时输入明文密码(登录)，但在zk系统中，密码是以加密的形式存在的</li></ol><h4 id="acl构成"><a href="#acl构成" class="headerlink" title="acl构成"></a>acl构成</h4><ol><li><p>zk的acl通过<code>[scheme:id:permisions]</code>来构成权限列表</p><ul><li><code>scheme</code>:代表采用的某种权限机制<ul><li><code>world</code>:<code>world</code>下只有一个<code>id</code>,即只有一个用户，也就是<code>anyone</code>,组合写法<code>world:anyone[permissions]</code></li><li><code>auth</code>:代表认证登录，需要注册用户有权限就可以，形式为<code>auth:user:password:[permissions]</code></li><li><code>digest</code>:需要对密码加密才能访问，组合形式为：<code>digest:username:BASE64(SHA1(password))[permissions]</code></li><li><code>ip</code>:此时现在ip访问，比如：<code>ip:192.168.1.1:[permissions]</code></li><li><code>super</code>:代表超级管理员，拥有所有权限</li></ul></li></ul></li></ol><ul><li>Id:代表允许访问的用户<ul><li>permisions:权限组合字符串<ul><li>CREATE：创建子节点</li><li>READ：获取节点、子节点</li><li>WRITE：设置节点数据</li><li>DELETE：删除子节点</li><li>ADMIN：设置权限</li></ul></li></ul></li></ul><h3 id="四字命令"><a href="#四字命令" class="headerlink" title="四字命令"></a>四字命令</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul><li>zk可以通过它自身提供的简写命令来和服务器进行交互</li><li>需要使用到nc命令，安装 <code>yum install nc</code></li><li><code>echo [commond]  | nc [ip][port]</code></li></ul><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><ul><li><code>[stat]</code>:查看zk的状态信息，以及是否mode</li><li><code>[ruok]</code>:查看当前zkserver是否启动，返回imok</li><li><code>[dump]</code>:列出未经使用的会话和临时节点</li><li><code>[conf]</code>:查看服务器配置</li><li><code>[cons]</code>:连接到服务端的客户端信息</li><li><code>[envi]</code>:环境变量</li><li><code>[mntr]</code>:监控zk健康信息</li><li><code>[wchs]</code>:展示watch的信息</li><li><code>[wchc]</code>与<code>[wchp]</code> :session 与watch 及path 与watch 的信息</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器缓存</title>
      <link href="/2019/10/28/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
      <url>/2019/10/28/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h3 id="缓存过程"><a href="#缓存过程" class="headerlink" title="缓存过程"></a>缓存过程</h3><p>浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中HTTP头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20191028205224.png" alt></p><a id="more"></a><ul><li>浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识</li><li>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中</li></ul><p>只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。当浏览器向服务器发起请求时，服务器会将缓存规则放入HTTP响应报文的HTTP头中和请求结果一起返回给浏览器。</p><h3 id="缓存规则"><a href="#缓存规则" class="headerlink" title="缓存规则"></a>缓存规则</h3><h4 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h4><ol><li><p>规则：控制强制缓存的字段分别是Expires和Cache-Control，其中Cache-Control优先级比Expires高。</p></li><li><h5 id="Expires："><a href="#Expires：" class="headerlink" title="Expires："></a>Expires：</h5><ul><li>Expires是HTTP/1.0控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于Expires的值时，直接使用缓存结果。</li><li>到了HTTP/1.1，Expire已经被Cache-Control替代，原因在于Expires控制缓存的原理是使用客户端的时间与服务端返回的时间做对比，那么如果客户端与服务端的时间因为某些原因（例如时区不同；客户端和服务端有一方的时间不准确）发生误差，那么强制缓存则会直接失效，这样的话强制缓存的存在则毫无意义。</li></ul></li><li><h5 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h5><ul><li>在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为：<ul><li>public：所有内容都将被缓存（客户端和代理服务器都可缓存）</li><li>private：所有内容只有客户端可以缓存，Cache-Control的默认取值</li><li>no-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定</li><li>no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存</li><li>max-age=xxx (xxx is numeric)：缓存内容将在xxx秒后失效</li></ul></li></ul></li><li><p>例子(google首页)</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20191028212828.png" alt></p><ul><li>HTTP响应报文中expires的时间值，是一个绝对值</li><li>HTTP响应报文中Cache-Control为max-age=600，是相对值</li><li>由于Cache-Control的优先级比expires，那么直接根据Cache-Control的值进行缓存，意思就是说在31536000秒内再次发起该请求，则会直接使用缓存结果，强制缓存生效。</li><li>在无法确定客户端的时间是否与服务端的时间同步的情况下，Cache-Control相比于expires是更好的选择，所以同时存在时，只有Cache-Control生效。</li></ul></li><li><p>缓存存放位置</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20191028213435.png" alt></p><p>状态码为灰色的请求则代表使用了强制缓存，请求对应的Size值则代表该缓存存放的位置，分别为from memory cache 和 from disk cache。from memory cache代表使用内存中的缓存，from disk cache则代表使用的是硬盘中的缓存，浏览器读取缓存的顺序为memory –&gt; disk。</p><ul><li><p>虽然我已经直接把结论说出来了，但是相信有不少人对此不能理解，那么接下来我们一起详细分析一下缓存读取问题，这里仍让以我的博客为例进行分析：</p></li><li><p>过程如下</p><ul><li><p>访问<a href="https://haominglfs.github.io/">https://haominglfs.github.io/</a></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20191028214728.png" alt></p></li><li><p>关闭博客的标签页</p></li><li><p>重新打开<a href="https://haominglfs.github.io/">https://haominglfs.github.io/</a></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20191028214920.png" alt></p></li><li><p>刷新</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20191028215117.png" alt></p></li></ul></li><li><p>内存缓存(from memory cache)和硬盘缓存(from disk cache)的特点：</p><ul><li>内存缓存(from memory cache)：内存缓存具有两个特点，分别是快速读取和时效性：<ul><li>快速读取：内存缓存会将编译解析后的文件，直接存入该进程的内存中，占据该进程一定的内存资源，以方便下次运行使用时的快速读取。</li><li>时效性：一旦该进程关闭，则该进程的内存则会清空。</li></ul></li><li>硬盘缓存(from disk cache)：硬盘缓存则是直接将缓存写入硬盘文件中，读取缓存需要对该缓存存放的硬盘文件进行I/O操作，然后重新解析该缓存内容，读取复杂，速度比内存缓存慢。</li><li>在浏览器中，浏览器会在js和图片等文件解析执行后直接存入内存缓存中，那么当刷新页面时只需直接从内存缓存中读取(from memory cache)；而css文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存(from disk cache)。</li></ul></li></ul></li><li></li></ol><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。</p><ol><li><p>规则：控制协商缓存的字段分别有：Last-Modified / If-Modified-Since和Etag / If-None-Match，<strong>其中Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高</strong>。</p></li><li><h5 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified / If-Modified-Since"></a>Last-Modified / If-Modified-Since</h5><p>Last-Modified是服务器响应请求时，返回该资源文件在服务器最后被修改的时间，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20191028215828.png" alt></p><p>If-Modified-Since则是客户端再次发起该请求时，携带上次请求返回的Last-Modified值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有If-Modified-Since字段，则会根据If-Modified-Since的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于If-Modified-Since的字段值，则重新返回资源，状态码为200；否则则返回304，代表资源无更新，可继续使用缓存文件，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20191028220214.png" alt></p></li><li><h5 id="Etag-If-None-Match"><a href="#Etag-If-None-Match" class="headerlink" title="Etag / If-None-Match"></a>Etag / If-None-Match</h5><p>Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20191028220406.png" alt></p></li></ol><p>If-None-Match是客户端再次发起该请求时，携带上次请求返回的唯一标识Etag值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有If-None-Match，则会根据If-None-Match的字段值与该资源在服务器的Etag值做对比，一致则返回304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为200，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20191028220619.png" alt></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回304，继续使用缓存，主要过程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20191028220900.png" alt></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li><p><strong>为什么要有Etag</strong></p><p>你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag呢？HTTP1.1中Etag的出现（也就是说，ETag是新增的，为了解决之前只有If-Modified的缺点）主要是为了解决几个Last-Modified比较难解决的问题：</p><ul><li>一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET；</li><li>某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；</li><li>某些服务器不能精确的得到文件的最后修改时间。</li></ul></li><li><p><strong>强缓存与协商缓存的区别可以用下表来表示：</strong></p><p>| 缓存类型 | 获取资源形式 |      状态码       |         发送请求到服务器         |<br>| :——: | :———-: | :—————: | :——————————: |<br>|  强缓存  |   从缓存取   |  200(from cache)  |         否，直接从缓存取         |<br>| 协商缓存 |   从缓存取   | 304(not Modified) | 是，通过服务器来告知缓存是否可用 |</p></li><li><p><strong>用户行为对缓存的影响</strong></p><p>|    用户操作     | Expires/Cache-Control | Last-Modifed/Etag |<br>| :————-: | :——————-: | :—————: |<br>|   地址栏回车    |         有效          |       有效        |<br>|  页面链接跳转   |         有效          |       有效        |<br>|    新开窗口     |         有效          |       有效        |<br>|    前进回退     |         有效          |       有效        |<br>|     F5刷新      |         无效          |       有效        |<br>| Ctrl+F5强制刷新 |         无效          |       无效        |</p><p><strong><em>F5 会 跳过强缓存规则，直接走协商缓存；Ctrl+F5 ，跳过所有缓存规则，和第一次请求一样，重新获取资源。</em></strong></p></li><li><p><strong>no-cache</strong></p><p>如果request headers中，Cache-Control为no-cache。表示不管服务端有没有设置Cache-Control，都必须从重新去获取请求。</p></li><li><p><strong>max-age=0</strong></p><p>max-age=0表示不管response怎么设置，在重新获取资源之前，先检验ETag/Last-Modified</p></li><li><p>不管是max-age=0还是no-cache，都会返回304（资源无修改的情况下），<strong>no-store才是真正的不进行缓存</strong>。</p></li><li><p><strong>Cache-Control与Expires</strong></p><p>Cache-Control与Expires的作用一致，都是指明当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。只不过Cache-Control的选择更多，设置更细致，如果同时设置的话，其优先级高于Expires。</p></li><li><p><strong>Last-Modified/ETag与Cache-Control/Expires</strong></p><p>配置Last-Modified/ETag的情况下，浏览器再次访问统一URI的资源，还是会发送请求到服务器询问文件是否已经修改，如果没有，服务器会只发送一个304回给浏览器，告诉浏览器直接从自己本地的缓存取数据；如果修改过那就整个数据重新发给浏览器；</p><p>Cache-Control/Expires则不同，如果检测到本地的缓存还是有效的时间范围内，浏览器直接使用本地副本，不会发送任何请求。两者一起使用时，Cache-Control/Expires的优先级要高于Last-Modified/ETag。即当本地副本根据Cache-Control/Expires发现还在有效期内时，则不会再次发送请求去服务器询问修改时间（Last-Modified）或实体标识（Etag）了。</p><p>一般情况下，使用Cache-Control/Expires会配合Last-Modified/ETag一起使用，因为即使服务器设置缓存时间, 当用户点击“刷新”按钮时，浏览器会忽略缓存继续向服务器发送请求，这时Last-Modified/ETag将能够很好利用304，从而减少响应开销。</p></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/" target="_blank" rel="noopener">https://heyingye.github.io/2018/04/16/彻底理解浏览器的缓存机制/</a></p><p><a href="https://juejin.im/post/5c417993f265da61285a6075" target="_blank" rel="noopener">https://juejin.im/post/5c417993f265da61285a6075</a></p><p><a href="https://www.zhoulujun.cn/html/theory/network/2018_0306_8078.html" target="_blank" rel="noopener">https://www.zhoulujun.cn/html/theory/network/2018_0306_8078.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL优化</title>
      <link href="/2019/10/23/SQL%E4%BC%98%E5%8C%96/"/>
      <url>/2019/10/23/SQL%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ol><li><p>3层Btree可以存放上百万条数据</p></li><li><p>Btree一般指的是B+树，数据全部存放在叶子节点中。</p></li><li><p>B+树中查询任意的数据次数：n次（B+树的高度）</p><a id="more"></a></li></ol><h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><ol><li>单值索引    单列的索引，一个表可以有多个单值索引</li><li>唯一索引    不能重复    可以为null</li><li>符合索引    多个列构成的索引</li><li>主键索引    不能重复，不能为null</li></ol><h4 id="SQL性能问题"><a href="#SQL性能问题" class="headerlink" title="SQL性能问题"></a>SQL性能问题</h4><ol><li>分析sql的执行计划（explain）,可以模拟SQL优化器执行sql语句</li><li>Mysql查询优化会干扰我们的优化。</li></ol><h4 id="explain-参数解析："><a href="#explain-参数解析：" class="headerlink" title="explain 参数解析："></a>explain 参数解析：</h4><ol><li><p>id:编号  </p><ul><li><p>id值相同，从上往下顺序执行;</p></li><li><p>id值越大越优先查询 (本质：在嵌套子查询时，先查内层 再查外层)</p></li></ul></li><li><p>select_type 查询类型</p><ul><li><p>PRIMARY:包含子查询SQL中的 主查询 （最外层）</p></li><li><p>SUBQUERY：包含子查询SQL中的 子查询 （非最外层）</p></li><li><p>simple:简单查询（不包含子查询、union）</p></li><li><p>derived:衍生查询(使用到了临时表)</p><ul><li><p>在from子查询中只有一张表</p><blockquote><p>explain select  cr.cname     from ( select * from course where tid in (1,2) ) cr ;</p></blockquote></li><li><p>在from子查询中， 如果有table1 union table2 ，则table1 就是derived,table2就是union</p><blockquote><p>explain select  cr.cname     from ( select <em> from course where tid = 1  union select </em> from course where tid = 2 ) cr ;</p></blockquote></li></ul></li></ul></li><li><p>table</p></li><li><p>partitions  </p></li><li><p>type  类型（索引类型）</p><ul><li>system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all  其中：system,const只是理想情况；实际能达到 ref&gt;range</li><li>system（忽略）: 只有一条数据的系统表 ；或 衍生表只有一条数据的主查询</li><li>const:仅仅能查到一条数据的SQL ,用于Primary key 或unique索引  （类型 与索引类型有关）</li><li>eq_ref:唯一性索引：对于每个索引键的查询，返回匹配唯一行数据（有且只有1个，不能多 、不能0）;常见于唯一索引 和主键索引</li><li>非唯一性索引，对于每个索引键的查询，返回匹配的所有行（0，多）</li></ul></li><li><p>possible_keys  预测用到的索引</p></li><li><p>key   实际使用的索引</p></li><li><p>key_len   实际使用的索引的长度</p></li><li><p>ref    表之间的引用</p></li><li><p>rows  通过索引查询到的数据量</p></li><li><p>filtered </p></li><li><p>Extra  额外的信息</p></li></ol><h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><ol><li>聚集索引：页节点包含了完整的数据记录。（innoDB的主键索引）</li><li>非聚集索引  （myISAM的主键索引）</li></ol><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><ol><li><p>为什么InnoDB表必须有主键，并且推荐使用整形的自增主键。</p><p>InnoDB的索引和数据存在同一个<code>表名.ibd</code>文件中</p><p>自增：可以减少B+树的分裂。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springboot学习1</title>
      <link href="/2019/10/08/springboot%E5%AD%A6%E4%B9%A01/"/>
      <url>/2019/10/08/springboot%E5%AD%A6%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macosX挂载NFS</title>
      <link href="/2019/09/30/macosX%E6%8C%82%E8%BD%BDNFS/"/>
      <url>/2019/09/30/macosX%E6%8C%82%E8%BD%BDNFS/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Mac OS X使用automounter，也称为 autofs 来挂载NFS输出卷。Autofs包含以下程序和daemons:</p><ul><li><p><strong>autofsd</strong></p><p>autofsd 执行 automount 之后 ，就会等待网络配置修改事件以及类似的事件发生。如果发生这样的事件，重新运行一次 automount 来更新挂载以反映当前automounter映射。也可以使用automount_reread 来运行 automount 。</p></li><li><p><strong>automountd</strong></p><p>automountd 是一个响应从 autofs 发出的请求的服务，用来挂载或卸载网络文件系统，并且提供目录的内容，基于automounter映射的内容。这个 automountd 是通过 launchd 来启动的。</p></li><li><p><strong>automount</strong></p><p>automount 是实际的挂载管理器。使用一些映射文件和配置文件来管理挂载和卸载远程资源。这些配置文件使用 /etc/autofs.conf 和 /etc/auto_master。</p></li><li><p><strong>automount_reread</strong></p><p>automount_reread 可以触发针对 autofs 的网络变更事件。</p><a id="more"></a></li></ul></li><li><p>检查autofs相关服务</p><ul><li><p><code>ps -ef | grep auto | grep -v grep</code></p><blockquote><p>​    0    95     1   0 六12上午 ??         0:00.03 autofsd</p></blockquote><p>可以看到系统运行了一个autofsd</p></li><li><p>检查一个服务是否通过 launchd 启动</p><p><code>sudo launchctl list | grep -E &#39;automo|autof&#39;</code></p><blockquote><p>95    0    com.apple.autofsd<br>13290    0    com.apple.automountd</p></blockquote></li></ul></li><li><p>Autofs映射，autofs 有两种映射方式</p><ul><li><p><strong>Direct Map</strong> </p><p>直接映射是直接列出目录的文件系统位置，关键字是完整的目录名字，例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local      eng4:/export/local</span><br><span class="line">/src            eng4:/export/src</span><br></pre></td></tr></table></figure></li><li><p><strong>Indirect Map</strong></p><p>非直接映射是为了用于将大量的对象和一个单一目录关联的情况。每个映射入口是一个目录入口的简化名字。一个非常好的案例是 auto_home 映射，可以检测所有在 /home 目录下的入口,例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bill    argon:/export/home/bill</span><br><span class="line">brent   depot:/export/home/brent</span><br><span class="line">guy     depot:/export/home/guy</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="4"><li><p>创建AutoFS的Indirect Map</p><ul><li><p>先在Windows主机（win7）上设置共享目录Mac。</p></li><li><p>编辑 /etc/auto_master配置文件添加如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Automounter master map</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">+auto_master# Use directory service</span><br><span class="line">/net-hosts-nobrowse,hidefromfinder,nosuid</span><br><span class="line">/homeauto_home-nobrowse,hidefromfinder</span><br><span class="line">/Network/Servers-fstab</span><br><span class="line">/--static</span><br><span class="line">/Users/haominglfs/win7      autofs_win7</span><br></pre></td></tr></table></figure><p>以上配置告知 OS X 任何位于 <code>/Users/haominglfs/win7</code> 目录下的入口都通过 <code>/etc/autofs_win7</code>配置文件来配置。</p><blockquote><p>在auto_master前面的”+”符号表示让OS X查看目录服务（例如Open Directory，LDAP等等）是否有自动挂载记录，如果从目录服务找到自动挂载记录就使用其进行挂载。</p></blockquote><blockquote><p>/home目录被设置成 auto_home ，但是这个并不是一个完全目录，而是指 /etc/auto_home。这是一个非直接映射(indirect map)的例子。定义本地目录的挂载点，而远程挂载则是 /etc/auto_home 映射文件定义。网络用户登录将使用 /etc/auto_home 中定义的目录挂载到 /home 上。</p></blockquote><blockquote><p>同样在 /etc/auto_home 配置文件中也可以看到 +auto_home 的配置表示查找使用目录服务的auto_home记录。</p></blockquote></li><li><p>编辑 <code>/etc/autofs_win7</code>内容如下</p><p><code>mac -fstype=nfs 192.168.1.242:/e/mac</code></p></li><li><p>执行命令<code>showmount -e 192.168.1.242</code>  查看可挂载的NFS目录。</p></li><li><p>执行 automount 命令挂载</p><p><code>sudo automount -vc</code></p></li></ul></li></ol><p>​     </p><p>​     </p><p>​     </p>]]></content>
      
      
      
        <tags>
            
            <tag> nfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cec邮件调用示例</title>
      <link href="/2019/09/30/cec%E9%82%AE%E4%BB%B6%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
      <url>/2019/09/30/cec%E9%82%AE%E4%BB%B6%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<ol><li><p>调用邮件的服务为一个定时任务，定时扫描指定文件，若存在待发送的邮件，则以javaMail的方式调用邮件服务，调用示例如下(发件人邮箱SMTP服务器地址：mail.cec.com.cn)：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * JavaMail 版本: 1.6.0</span></span><br><span class="line"><span class="comment">    * JDK 版本: JDK 1.7 以上（必须）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sendMailService</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> myEmailAccount      发件人邮箱账号</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> myEmailPassword     发件人邮箱密码</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> myEmailSMTPHost     发件人邮箱SMTP服务器地址</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> mainSendNameAccounts  收件人主送名称及账号</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> copySendNameAccounts   收件人抄送名称及账号</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> secretSendNameAccounts 收件人暗送名称及账号</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> sendMsg      发送邮件主体信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sendMail</span><span class="params">(String myEmailAccount, String myEmailPassword,String senderName,String myEmailSMTPHost,Map&lt;String, String&gt; mainSendNameAccounts,Map&lt;String, String&gt; copySendNameAccounts,Map&lt;String, String&gt; secretSendNameAccounts,Map sendMsg)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();                    <span class="comment">// 参数配置</span></span><br><span class="line">            props.setProperty(<span class="string">"mail.transport.protocol"</span>, <span class="string">"smtp"</span>);   <span class="comment">// 使用的协议（JavaMail规范要求）</span></span><br><span class="line">            props.setProperty(<span class="string">"mail.smtp.host"</span>, myEmailSMTPHost);   <span class="comment">// 发件人的邮箱的 SMTP 服务器地址</span></span><br><span class="line">            props.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"false"</span>);            <span class="comment">// 需要请求认证</span></span><br><span class="line">            <span class="comment">// 2. 根据配置创建会话对象, 用于和邮件服务器交互</span></span><br><span class="line">            Session session = Session.getInstance(props);</span><br><span class="line">            session.setDebug(<span class="keyword">true</span>); <span class="comment">//开启日志</span></span><br><span class="line">    <span class="comment">// 3. 创建一封邮件</span></span><br><span class="line">            MimeMessage message;</span><br><span class="line">    message = createMimeMessage(session, myEmailAccount, senderName,mainSendNameAccounts,copySendNameAccounts,secretSendNameAccounts,sendMsg);</span><br><span class="line">    <span class="comment">// 4. 根据 Session 获取邮件传输对象</span></span><br><span class="line">            Transport transport = session.getTransport();</span><br><span class="line">            <span class="comment">// 5. 使用 邮箱账号 和 密码 连接邮件服务器, 这里认证的邮箱必须与 message 中的发件人邮箱一致, 否则报错</span></span><br><span class="line">            transport.connect(myEmailAccount, myEmailPassword);</span><br><span class="line">            <span class="comment">// 6. 发送邮件, 发到所有的收件地址, message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人</span></span><br><span class="line">            transport.sendMessage(message, message.getAllRecipients());</span><br><span class="line">            transport.close();</span><br><span class="line">            <span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">   &#125;</span><br><span class="line">      </span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 创建邮件(带附件)</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> myEmailAccount     发件人账号</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> mainSendAccount    主送人员账号</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> copySendAccount    抄送人员账号</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> secretSendAccount  暗送人员账号</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> sendMsg            发送信息主体 </span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">        * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MimeMessage <span class="title">createMimeMessage</span><span class="params">(Session session, String myEmailAccount,String senderName, Map&lt;String, String&gt; mainSendNameAccounts ,Map&lt;String, String&gt; copySendNameAccounts,Map&lt;String, String&gt; secretSendNameAccounts,Map sendMsg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       IUser sUser = WebBaseUtil.getCurrentUser();</span><br><span class="line">       String subject = (String)sendMsg.get(<span class="string">"subject"</span>);</span><br><span class="line">       String content = (String)sendMsg.get(<span class="string">"content"</span>);</span><br><span class="line">       String attachPath = (String)sendMsg.get(<span class="string">"attachPath"</span>);</span><br><span class="line">      </span><br><span class="line">           <span class="comment">// 1. 创建一封邮件</span></span><br><span class="line">           MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">           <span class="comment">// 2. From: 发件人（昵称有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改昵称）</span></span><br><span class="line">           message.setFrom(<span class="keyword">new</span> InternetAddress(myEmailAccount,senderName, <span class="string">"UTF-8"</span>));</span><br><span class="line">           <span class="comment">// 3. To: 收件人（可以增加多个收件人、抄送、密送）</span></span><br><span class="line">           <span class="comment">//设置主送人员</span></span><br><span class="line">           Set mainSendNameSet = mainSendNameAccounts.keySet();<span class="comment">//主送人员姓名</span></span><br><span class="line">           List mailSendList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">           <span class="keyword">for</span> (Object mainSendName : mainSendNameSet) &#123;</span><br><span class="line">           mailSendList.add(<span class="keyword">new</span> InternetAddress(mainSendNameAccounts.get(mainSendName)));</span><br><span class="line">   &#125;</span><br><span class="line">           InternetAddress[] mainAddress =(InternetAddress[])mailSendList.toArray(<span class="keyword">new</span> InternetAddress[mailSendList.size()]);</span><br><span class="line">           message.setRecipients(MimeMessage.RecipientType.TO,mainAddress);<span class="comment">//当邮件有多个收件人时，用逗号隔开</span></span><br><span class="line">           <span class="comment">//设置抄送人员</span></span><br><span class="line">           <span class="keyword">if</span>(!copySendNameAccounts.isEmpty())&#123;</span><br><span class="line">           Set copySendNameSet = copySendNameAccounts.keySet();<span class="comment">//主送人员姓名</span></span><br><span class="line">           List copylist = <span class="keyword">new</span> ArrayList();</span><br><span class="line">           <span class="keyword">for</span> (Object copySendName : copySendNameSet) &#123;</span><br><span class="line">           copylist.add(<span class="keyword">new</span> InternetAddress(copySendNameAccounts.get(copySendName)));</span><br><span class="line">   &#125;</span><br><span class="line">           InternetAddress[] copyAddress =(InternetAddress[])copylist.toArray(<span class="keyword">new</span> InternetAddress[copylist.size()]);</span><br><span class="line">           message.setRecipients(MimeMessage.RecipientType.CC,copyAddress);<span class="comment">//当邮件有多个收件人时，用逗号隔开</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//设置暗送人员</span></span><br><span class="line">           <span class="keyword">if</span>(!secretSendNameAccounts.isEmpty())&#123;</span><br><span class="line">            Set secretSendNameSet = secretSendNameAccounts.keySet();<span class="comment">//主送人员姓名</span></span><br><span class="line">                List secretlist = <span class="keyword">new</span> ArrayList();</span><br><span class="line">                <span class="keyword">for</span> (Object secretSendName : secretSendNameSet) &#123;</span><br><span class="line">                secretlist.add(<span class="keyword">new</span> InternetAddress(secretSendNameAccounts.get(secretSendName)));</span><br><span class="line">        &#125;</span><br><span class="line">                InternetAddress[] secretAddress =(InternetAddress[])secretlist.toArray(<span class="keyword">new</span> InternetAddress[secretlist.size()]);</span><br><span class="line">                message.setRecipients(MimeMessage.RecipientType.CC,secretAddress);<span class="comment">//当邮件有多个收件人时，用逗号隔开</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 4. Subject: 邮件主题（标题有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改标题）</span></span><br><span class="line">           message.setSubject(subject, <span class="string">"UTF-8"</span>);</span><br><span class="line">           <span class="comment">//5. 创建正文文本"节点"</span></span><br><span class="line">           MimeBodyPart text = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">           text.setContent(content,<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">           <span class="comment">// 6. 创建附件"节点"</span></span><br><span class="line">           MimeMultipart mm = <span class="keyword">new</span> MimeMultipart();</span><br><span class="line">           mm.addBodyPart(text);</span><br><span class="line">           <span class="keyword">if</span>(StringHelper.isNotEmpty(attachPath))&#123;</span><br><span class="line">           MimeBodyPart attachment = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">           DataHandler dh = <span class="keyword">new</span> DataHandler(<span class="keyword">new</span> FileDataSource(attachPath));</span><br><span class="line">           attachment.setDataHandler(dh);</span><br><span class="line">           attachment.setFileName(MimeUtility.encodeText(dh.getName())); </span><br><span class="line">           mm.addBodyPart(attachment);     <span class="comment">// 如果有多个附件，可以创建多个多次添加</span></span><br><span class="line">           mm.setSubType(<span class="string">"mixed"</span>);         <span class="comment">// 混合关系</span></span><br><span class="line">           &#125;</span><br><span class="line">           message.setContent(mm);</span><br><span class="line">           <span class="comment">// 6. 设置发件时间</span></span><br><span class="line">           message.setSentDate(<span class="keyword">new</span> Date());</span><br><span class="line">           <span class="comment">// 7. 保存设置</span></span><br><span class="line">           message.saveChanges();</span><br><span class="line">           <span class="keyword">return</span> message;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows7配置nfs</title>
      <link href="/2019/09/30/windows7%E9%85%8D%E7%BD%AEnfs/"/>
      <url>/2019/09/30/windows7%E9%85%8D%E7%BD%AEnfs/</url>
      
        <content type="html"><![CDATA[<ol><li><p>安装haneWIN NFS SERVER</p><p><a href="https://www.hanewin.net/index.html" target="_blank" rel="noopener">下载地址</a></p></li><li><p>打开nfs客户端，配置如下</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/nfs.PNG" alt></p><p>编辑要共享的目录后，重启服务器，列表中就会显示共享的服务器。如果不生效，则打开win7的服务管理器重启nfsd服务。</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/services.PNG" alt></p></li><li><p>问题</p><ul><li>保存配置文件时显示没有权限保存文件，需要以管理员身份运行nfs客户端。如何打开win7的管理员账户，可以参考<a href="http://www.2016win10.com/w10/20399.html" target="_blank" rel="noopener">win7系统设置用户帐户为最高权限的操作方法</a></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> nfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cas单点登录</title>
      <link href="/2019/09/26/cas%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
      <url>/2019/09/26/cas%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/02/mI6OSbnkdZJpjKH.png" alt></p><h4 id="cas登出源码解析"><a href="#cas登出源码解析" class="headerlink" title="cas登出源码解析"></a>cas登出源码解析</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js原型</title>
      <link href="/2019/09/24/js%E5%8E%9F%E5%9E%8B/"/>
      <url>/2019/09/24/js%E5%8E%9F%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<ol><li><p>obj这个对象本质上是被Object函数创建的，因此<code>obj.__proto__=== Object.prototype</code>。我们可以用一个图来表示。</p><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190925203303.png" alt></p><p> 即，每个对象都有一个<code>__proto__</code>属性，指向创建该对象的函数的prototype。</p></li><li><p>自定义函数的prototype本质上就是和 var obj = {} 是一样的，都是被Object创建，所以它的<code>__proto__</code>指向的就是Object.prototype。但是Object.prototype确实一个特例——它的<code>__proto__</code>指向的是null。</p><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190925204029.png" alt></p></li><li><p>函数也是一种对象，函数是由<code>Function</code>，所以<code>Object.__proto__ === Function.prototype</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'return x+y'</span>);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iframe问题总结</title>
      <link href="/2019/09/11/iframe%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2019/09/11/iframe%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="iframe内部内容被添加了-lt-pre-gt-标签"><a href="#iframe内部内容被添加了-lt-pre-gt-标签" class="headerlink" title="iframe内部内容被添加了&lt;pre&gt;标签"></a>iframe内部内容被添加了<code>&lt;pre&gt;</code>标签</h4><p>今天在解决iframe上传文件的跨域问题时，遇到一个奇怪的问题，后台返回的json数据，放到iframe中时，莫名加上了<code>&lt;pre&gt;</code>标签，通过查询，最后在stackoverflow上找到这么一段话</p><blockquote><p>Assuming that the user POST the request in a form setting the target to an iframe. The JSON response will be sent back to the user on his/her iframe with content type set as “text/html”. It is set as “text/html” instead of “application/json” because I want to avoid having a “pre” tag injected by the browser around the JSON response. Anyway, how does the user read that JSON response if the iframe and the parent window have different domain? There is going to be a cross domain policy issue.</p></blockquote><p>大概意思就是，在form表单提交的是后，返回的json数据会根据form表单设置的target属性放到对应的iframe中，将返回的头信息改成<code>text/html</code>而不是默认的<code>application/json</code>就能避免返回的数据被包裹在<code>&lt;pre&gt;</code>标签中。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>websocket使用总结</title>
      <link href="/2019/09/05/websocket%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2019/09/05/websocket%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>公司门户系统有一个显示待办消息的需求，要求其他系统产生的待办消息要及时的在门户系统中展示，网上查找了解到有ajax轮询和websocket两种主要方式，为了及时性，最终选择了websocket方式。</p><a id="more"></a><h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><p>一图胜千言</p><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190905181723.png" alt></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li><p>前端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- websocket--&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="keyword">var</span> msgTypes = &#123;</span><br><span class="line">            <span class="number">1</span>:<span class="string">'db'</span>,</span><br><span class="line">            <span class="number">2</span>:<span class="string">'dy'</span>,</span><br><span class="line">            <span class="number">3</span>:<span class="string">'yj'</span>,</span><br><span class="line">            <span class="number">4</span>:<span class="string">'gwdb'</span></span><br><span class="line">        &#125;</span><br><span class="line">        userId = <span class="string">'&lt;ww:property value="#session.sUser.userId" /&gt;'</span>;</span><br><span class="line">        <span class="comment">//定义websocket</span></span><br><span class="line">        <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:8888/msg/ws"</span>);</span><br><span class="line">        <span class="comment">//维持心跳</span></span><br><span class="line">        <span class="keyword">var</span> heartCheck = &#123;</span><br><span class="line">            timeout: <span class="number">19000</span>,<span class="comment">//19s</span></span><br><span class="line">            timeoutObj: <span class="literal">null</span>,</span><br><span class="line">            reset: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                clearInterval(<span class="keyword">this</span>.timeoutObj);</span><br><span class="line">                <span class="keyword">this</span>.start();</span><br><span class="line">            &#125;,</span><br><span class="line">            start: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.timeoutObj = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ws.readyState==<span class="number">1</span>)&#123;</span><br><span class="line">                        ws.send(<span class="string">"HeartBeat"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">this</span>.timeout)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//连接websocket</span></span><br><span class="line">        ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> msg = <span class="string">'userid='</span>+userId;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"open and send message："</span>+msg);</span><br><span class="line">            <span class="comment">// 发送消息</span></span><br><span class="line">            ws.send(msg);</span><br><span class="line">            heartCheck.start();</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"get message:"</span>+evt.data);</span><br><span class="line">            heartCheck.reset();</span><br><span class="line">            <span class="keyword">if</span>(evt.data.startsWith(<span class="string">'您'</span>))&#123;<span class="comment">//提示消息</span></span><br><span class="line">                $(<span class="string">"#msg_tip"</span>).text(evt.data);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'显示tip'</span>)</span><br><span class="line">                $(<span class="string">"#msg_tip"</span>).fadeIn();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> typeId = <span class="string">'span#'</span>+msgTypes[evt.data.split(<span class="string">':'</span>)[<span class="number">0</span>]];</span><br><span class="line">                $(typeId).html(evt.data.split(<span class="string">':'</span>)[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span>($navTab.getTab(<span class="string">'dirMsg'</span>)!= <span class="string">''</span>)&#123;</span><br><span class="line">                    <span class="keyword">debugger</span>;</span><br><span class="line">                    <span class="comment">//$navTab.refreshCurrentTabForm('dirMsg');</span></span><br><span class="line">                    $forms = $(<span class="string">"#dirMsg"</span>).find(<span class="string">'.table-form'</span>);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;$forms.length;i++)&#123;</span><br><span class="line">                        $navTab.submitForm($forms[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"WebSocketClosed!"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//发生异常</span></span><br><span class="line">        ws.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"WebSocketError!"</span>);</span><br><span class="line">            ws = <span class="literal">null</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(ws)&#123;</span><br><span class="line">                ws=<span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure></li><li><p>后端（tomcat8)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.css.apps.msg.websocket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: haoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/5/8 11:22 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.css.apps.msg.constant.MsgType;</span><br><span class="line"><span class="keyword">import</span> com.css.db.query.QueryCache;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: haoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/5/6 7:07 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(value = <span class="string">"/ws"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WsServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Log log = LogFactory.getLog(WsServlet.class);</span><br><span class="line">    <span class="comment">//设置Map,存放每个用户的连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,WsServlet&gt; webSocketSet = <span class="keyword">new</span> HashMap&lt;String,WsServlet&gt;();</span><br><span class="line">    <span class="comment">//浏览器与服务端的回话，浏览器每new一个WebSocket就创建一个session，关闭或刷新浏览器，session关闭</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    <span class="comment">//代表浏览器</span></span><br><span class="line">    <span class="keyword">private</span> String userid;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 推送消息接口</span></span><br><span class="line"><span class="comment">     * 外部可以进行调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sendMsg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String sendMsg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.info(<span class="keyword">this</span>.userid+<span class="string">"发送消息:"</span>+sendMsg);</span><br><span class="line">        <span class="keyword">this</span>.session.getBasicRemote().sendText(sendMsg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        log.info(<span class="keyword">this</span>+<span class="string">"有新连接,session="</span>+session+<span class="string">";userid="</span>+userid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        webSocketSet.remove(<span class="keyword">this</span>.userid);</span><br><span class="line">        log.info(<span class="keyword">this</span>.userid+<span class="string">"；连接关闭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String info)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.info(<span class="keyword">this</span>.userid+<span class="string">"；来自客户端的消息:"</span> + info);</span><br><span class="line">        String msg = <span class="string">"服务端接收到了来自客户端的消息："</span>+info;</span><br><span class="line">        <span class="keyword">if</span>(info.contains(<span class="string">"userid"</span>))&#123;</span><br><span class="line">            <span class="keyword">this</span>.userid = info.split(<span class="string">"userid="</span>)[<span class="number">1</span>];</span><br><span class="line">            log.info(<span class="string">"this.userid="</span>+<span class="keyword">this</span>.userid);</span><br><span class="line">            webSocketSet.put(userid, <span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">//发送初始待办数量</span></span><br><span class="line">            sendMsg(<span class="string">"1:"</span>+getMsgNum(userid, MsgType.DAIBAN));</span><br><span class="line">            sendMsg(<span class="string">"2:"</span>+getMsgNum(userid, MsgType.DAIYUE));</span><br><span class="line">            sendMsg(<span class="string">"3:"</span>+getMsgNum(userid, MsgType.YOUJIAN));</span><br><span class="line">            sendMsg(<span class="string">"4:"</span>+getMsgNum(userid, MsgType.GWDAIBAN));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable error)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="keyword">this</span>.userid+<span class="string">"；发生错误"</span>,error);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getMsgNum</span><span class="params">(String userId,Integer msgType)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">""</span>;</span><br><span class="line">        sql = <span class="string">"select count(a.uuid) from Msg a where a.receiver =:userId "</span> +</span><br><span class="line">                <span class="string">"and a.msgType =:msgType and a.msgStatus = 1"</span>;</span><br><span class="line">        QueryCache qc = <span class="keyword">new</span> QueryCache(sql);</span><br><span class="line">        qc.setParameter(<span class="string">"userId"</span>,userId);</span><br><span class="line">            qc.setParameter(<span class="string">"msgType"</span>,msgType);</span><br><span class="line">        <span class="keyword">return</span> qc.uniqueResult().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>总结(问题)</p><ol><li><p>前端添加心跳机制防止连接超时断开，但发送心跳的时间网络上未找到具体的应该根据什么来设置？。</p></li><li><p>利用如下代码测试最大连接数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line">        sleep(<span class="number">5</span>)</span><br><span class="line">        websocket();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">websocket</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> wsUri = <span class="string">"ws://localhost:8888/msg/ws"</span>;</span><br><span class="line">        <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(wsUri);</span><br><span class="line">        ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            ws.send(<span class="string">"User connected"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e.data)</span><br><span class="line">        &#125;;</span><br><span class="line">        ws.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"User disconnected"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - start &gt; n) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发现浏览器最大连接数达到200时，其他连接无法连上，修改tomcat的连接数等配置，会有小幅度增加，达到了256，但不理想?，tomcat配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Executor</span> <span class="attr">maxThreads</span>=<span class="string">"500"</span> <span class="attr">minSpareThreads</span>=<span class="string">"20"</span> <span class="attr">name</span>=<span class="string">"tomcatThreadPool"</span> <span class="attr">namePrefix</span>=<span class="string">"catalina-exec-"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span> <span class="attr">acceptCount</span>=<span class="string">"300"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">enableLookups</span>=<span class="string">"false"</span> <span class="attr">executor</span>=<span class="string">"tomcatThreadPool"</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>kindeditor跨域问题解决</title>
      <link href="/2019/09/05/kindeditor%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/09/05/kindeditor%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>因为在A系统中需要嵌入B系统的页面，两个系统有相同的父域名，所以使用了iframe+domain的方式解决跨域问题，在A系统的页面中加入了<code>document.domain = &#39;exame.com.cn&#39;;</code>;但是在嵌入kindeditor富文本编辑器后，上传图片出现跨域问题。</p><a id="more"></a><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>通过分析kindeditor的图片上传代码，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab2"</span> <span class="attr">style</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">"kindeditor_upload_iframe_1567676701755"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"ke-upload-area ke-form"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">target</span>=<span class="string">"kindeditor_upload_iframe_1567676701755"</span> <span class="attr">action</span>=<span class="string">"/portal/kindeditor/uploadImg?dir=image"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ke-dialog-row"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">style</span>=<span class="string">"width:60px;"</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"localUrl"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">"ke-input-text"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">style</span>=<span class="string">"width:200px;"</span> <span class="attr">readonly</span>=<span class="string">"true"</span>&gt;</span> &amp;nbsp;<span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">"ke-inline-block ke-upload-button"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ke-upload-area"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ke-button-common"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">class</span>=<span class="string">"ke-button-common ke-button"</span> <span class="attr">value</span>=<span class="string">"浏览..."</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">class</span>=<span class="string">"ke-upload-file"</span> <span class="attr">name</span>=<span class="string">"uploadFile"</span> <span class="attr">style</span>=<span class="string">"width: 60px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"ke-upload-button"</span> <span class="attr">value</span>=<span class="string">"浏览..."</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上传后的返回值会放入<code>iframe</code>中，所以只要在iframe中加入<code>document.domain = &#39;exame.com.cn&#39;;</code>就能解决跨域问题。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>参照kindeditor包中的uplod_json.jsp，重新写了一个UploadImgServlet，最终代码如下</p><ul><li><p>前端代码(正常写，不需要特殊处理)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">editor = KindEditor.create(<span class="string">'textarea[rel="ehContentOnlyOne"]'</span>,&#123;</span><br><span class="line">resizeType : <span class="number">1</span>,</span><br><span class="line">allowPreviewEmoticons : <span class="literal">false</span>,</span><br><span class="line">allowImageUpload : <span class="literal">true</span>,<span class="comment">//上传图片框本地上传的功能，false为隐藏，默认为true</span></span><br><span class="line">      allowImageRemote : <span class="literal">false</span>,<span class="comment">//上传图片框网络图片的功能，false为隐藏，默认为true</span></span><br><span class="line">cssPath:[<span class="string">'cssui/main/editor.css'</span>],</span><br><span class="line">            filePostName: <span class="string">"uploadFile"</span>,</span><br><span class="line">            uploadJson : <span class="string">'/portal/kindeditor/uploadImg'</span>,<span class="comment">// 上传图片接口</span></span><br><span class="line">items : [</span><br><span class="line"><span class="string">'source'</span>,<span class="string">'preview'</span>,<span class="string">'code'</span>,<span class="string">'|'</span>,<span class="string">'fontname'</span>, <span class="string">'fontsize'</span>, <span class="string">'|'</span>, <span class="string">'forecolor'</span>, <span class="string">'hilitecolor'</span>, <span class="string">'bold'</span>, <span class="string">'italic'</span>, <span class="string">'underline'</span>,</span><br><span class="line"><span class="string">'removeformat'</span>, <span class="string">'|'</span>, <span class="string">'justifyleft'</span>, <span class="string">'justifycenter'</span>, <span class="string">'justifyright'</span>, <span class="string">'insertorderedlist'</span>,</span><br><span class="line"><span class="string">'insertunorderedlist'</span>, <span class="string">'|'</span>, <span class="string">'emoticons'</span>,<span class="string">'image'</span>, <span class="string">'link'</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>后端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.css.bbs.bbs.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: haoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/9/3 10:36 AM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadImgServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置Response响应的编码</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        <span class="comment">//文件保存目录路径</span></span><br><span class="line">        String savePath = request.getServletContext().getRealPath(<span class="string">"/"</span>) + <span class="string">"attached/"</span>;</span><br><span class="line">        <span class="comment">//文件保存目录URL</span></span><br><span class="line">        String saveUrl  = request.getContextPath() + <span class="string">"/attached/"</span>;</span><br><span class="line">        <span class="comment">//定义允许上传的文件扩展名</span></span><br><span class="line">        HashMap&lt;String, String&gt; extMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        extMap.put(<span class="string">"image"</span>, <span class="string">"gif,jpg,jpeg,png,bmp"</span>);</span><br><span class="line">        extMap.put(<span class="string">"flash"</span>, <span class="string">"swf,flv"</span>);</span><br><span class="line">        extMap.put(<span class="string">"media"</span>, <span class="string">"swf,flv,mp3,wav,wma,wmv,mid,avi,mpg,asf,rm,rmvb"</span>);</span><br><span class="line">        extMap.put(<span class="string">"file"</span>, <span class="string">"doc,docx,xls,xlsx,ppt,htm,html,txt,zip,rar,gz,bz2"</span>);</span><br><span class="line">        <span class="comment">//最大文件大小</span></span><br><span class="line">        <span class="keyword">long</span> maxSize = <span class="number">1000000</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ServletFileUpload.isMultipartContent(request))&#123;</span><br><span class="line">            out.println(getError(<span class="string">"请选择文件。"</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查目录</span></span><br><span class="line">        File uploadDir = <span class="keyword">new</span> File(savePath);</span><br><span class="line">        <span class="keyword">if</span>(!uploadDir.isDirectory())&#123;</span><br><span class="line">            uploadDir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查目录写权限</span></span><br><span class="line">        <span class="keyword">if</span>(!uploadDir.canWrite())&#123;</span><br><span class="line">            out.println(getError(<span class="string">"上传目录没有写权限。"</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String dirName = request.getParameter(<span class="string">"dir"</span>);</span><br><span class="line">        <span class="keyword">if</span> (dirName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            dirName = <span class="string">"image"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!extMap.containsKey(dirName))&#123;</span><br><span class="line">            out.println(getError(<span class="string">"目录名不正确。"</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建文件夹</span></span><br><span class="line">        savePath += dirName + <span class="string">"/"</span>;</span><br><span class="line">        saveUrl += dirName + <span class="string">"/"</span>;</span><br><span class="line">        File saveDirFile = <span class="keyword">new</span> File(savePath);</span><br><span class="line">        <span class="keyword">if</span> (!saveDirFile.exists()) &#123;</span><br><span class="line">            saveDirFile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">        String ymd = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">        savePath += ymd + <span class="string">"/"</span>;</span><br><span class="line">        saveUrl += ymd + <span class="string">"/"</span>;</span><br><span class="line">        File dirFile = <span class="keyword">new</span> File(savePath);</span><br><span class="line">        <span class="keyword">if</span> (!dirFile.exists()) &#123;</span><br><span class="line">            dirFile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">        ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">        upload.setHeaderEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        List items = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            items = upload.parseRequest(request);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line">            out.println(getError(<span class="string">"上传文件失败。"</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator itr = items.iterator();</span><br><span class="line">        <span class="keyword">while</span> (itr.hasNext()) &#123;</span><br><span class="line">            FileItem item = (FileItem) itr.next();</span><br><span class="line">            String fileName = item.getName();</span><br><span class="line">            <span class="keyword">long</span> fileSize = item.getSize();</span><br><span class="line">            <span class="keyword">if</span> (!item.isFormField()) &#123;</span><br><span class="line">                <span class="comment">//检查文件大小</span></span><br><span class="line">                <span class="keyword">if</span> (item.getSize() &gt; maxSize) &#123;</span><br><span class="line">                    out.println(getError(<span class="string">"上传文件大小超过限制。"</span>));</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//检查扩展名</span></span><br><span class="line">                String fileExt = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>).toLowerCase();</span><br><span class="line">                <span class="keyword">if</span> (!Arrays.&lt;String&gt;asList(extMap.get(dirName).split(<span class="string">","</span>)).contains(fileExt)) &#123;</span><br><span class="line">                    out.println(getError(<span class="string">"上传文件扩展名是不允许的扩展名。\n只允许"</span> + extMap.get(dirName) + <span class="string">"格式。"</span>));</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line">                String newFileName = df.format(<span class="keyword">new</span> Date()) + <span class="string">"_"</span> + <span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>) + <span class="string">"."</span> + fileExt;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    File uploadedFile = <span class="keyword">new</span> File(savePath, newFileName);</span><br><span class="line">                    item.write(uploadedFile);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    out.println(getError(<span class="string">"上传文件失败。"</span>));</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                JSONObject obj = <span class="keyword">new</span> JSONObject();</span><br><span class="line">                obj.put(<span class="string">"error"</span>, <span class="number">0</span>);</span><br><span class="line">                obj.put(<span class="string">"url"</span>, saveUrl + newFileName);</span><br><span class="line">              <span class="comment">//解决跨域问题</span></span><br><span class="line">                out.println(obj.toString()+<span class="string">"&lt;script&gt;document.domain='cec.com.cn';&lt;/script&gt;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将writer对象中的内容输出</span></span><br><span class="line">        out.flush();</span><br><span class="line">        <span class="comment">//关闭writer对象</span></span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getError</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        JSONObject obj = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        obj.put(<span class="string">"error"</span>, <span class="number">1</span>);</span><br><span class="line">        obj.put(<span class="string">"message"</span>, message);</span><br><span class="line">        <span class="keyword">return</span> obj.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>web.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>uploadImg<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.css.bbs.bbs.action.UploadImgServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>uploadImg<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/kindeditor/uploadImg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tomcat源码4-Pipeline-Value管道</title>
      <link href="/2019/09/02/tomcat%E6%BA%90%E7%A0%814-Pipeline-Value%E7%AE%A1%E9%81%93/"/>
      <url>/2019/09/02/tomcat%E6%BA%90%E7%A0%814-Pipeline-Value%E7%AE%A1%E9%81%93/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190902163506.png" alt></p><a id="more"></a><p>每个容器（Engine/Host/Context/Wrap）包含一个pipeline，每个pipeline包含一个valve集合，位于前面的valve做完业务处理后将调用后面的valve做业务处理，而容器的缺省valve位于集合的最后一个位置，负责调用下层容器的pipeline的第一个valve做请求处理。调用会从Engine的第一个valve调用开始，一直执行到调用Wrapper的缺省valve：StandardWrapperValve，而filter与servlet的处理就是在这个valve中进行的 。Engine的第一个valve是由Adapter调用的，在connector章节中也看到CoyoteAdapter在处理完request以后会执行<code>connector.getContainer().getPipeline().getFirst().invoke(request, response)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;ContainerBase&gt;&gt;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The Pipeline object with which this Container is associated.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Pipeline pipeline = <span class="keyword">new</span> StandardPipeline(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">       .......</span><br><span class="line">        <span class="comment">// Start the Valves in our pipeline (including the basic), if any</span></span><br><span class="line">        <span class="keyword">if</span> (pipeline <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">            ((Lifecycle) pipeline).start();</span><br><span class="line">        &#125;</span><br><span class="line">.......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tomcat源码3-container</title>
      <link href="/2019/08/29/tomcat%E6%BA%90%E7%A0%813-container/"/>
      <url>/2019/08/29/tomcat%E6%BA%90%E7%A0%813-container/</url>
      
        <content type="html"><![CDATA[<h3 id="Container-的4-个子容器"><a href="#Container-的4-个子容器" class="headerlink" title="Container 的4 个子容器"></a>Container 的4 个子容器</h3><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190828151929.png" alt></p><a id="more"></a><p>Container 的子容器Engine 、Host 、Context 、Wrapper 是逐层包含的关系，其中Engine是最顶层，每个service 最多只能有一个Engine, Engine 里面可以有多个Host ，每个Host 下可以有多个Context ，每个Context 下可以有多个Wrapper，它们的装配关系如下图所示。</p><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190828152057.png" alt></p><ul><li>Engine ：引擎，用来管理多个站点， 一个Service 最多只能有一个Engine。</li><li>Host ：代表一个站点，也可以叫虚拟主机，通过配置Host 就可以添加站点。</li><li>Context ：代表一个应用程序，对应着平时开发的一套程序，或者一个WEB-INF 目录以及下面的web.xml 文件。</li><li>Wrapper ：每个Wrapper 封装着一个servlet。</li></ul><p>​           Context 和Host 的区别是Context 表示一个应用，比如，默认配置下webapps 下的每个目录都是一个应用，其中ROOT目录中存放着主应用，其他目录存放着别的子应用，而整个webapps 是一个站点。假如<a href="http://www.haominglfs.com" target="_blank" rel="noopener">www.haominglfs.com</a> 域名对应着webapps 目录所代表的站点，其中的ROOT 目录里的应用就是主应用，访问时直接使用域名就可以，而webapps/test 目录存放的是test 子应用，访问时需要<a href="http://www.excelib.com/test" target="_blank" rel="noopener">www.excelib.com/test</a> ，每一个应用对应一个Context ，所有webapps 下的应用都属于<a href="http://www.haominglfs.com" target="_blank" rel="noopener">www.haominglfs.com</a> 站点，而blog.haominglfs.com 则是另外一个站点，属于另外一个Host。</p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义了－个Server ，在8005 端口监听关闭命令“ SHUTDOWN ”；--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.startup.VersionLoggerListener"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Security listener. Documentation at /docs/config/listeners.html</span></span><br><span class="line"><span class="comment">  &lt;Listener className="org.apache.catalina.security.SecurityListener" /&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--APR library loader. Documentation at /docs/apr.html --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.AprLifecycleListener"</span> <span class="attr">SSLEngine</span>=<span class="string">"on"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Prevent memory leaks due to use of particular java/javax APIs--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.JreMemoryLeakPreventionListener"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.ThreadLocalLeakPreventionListener"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Global JNDI resources</span></span><br><span class="line"><span class="comment">       Documentation at /docs/jndi-resources-howto.html</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Editable user database that can also be used by</span></span><br><span class="line"><span class="comment">         UserDatabaseRealm to authenticate users</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"UserDatabase"</span> <span class="attr">auth</span>=<span class="string">"Container"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">"org.apache.catalina.UserDatabase"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">description</span>=<span class="string">"User database that can be updated and saved"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">factory</span>=<span class="string">"org.apache.catalina.users.MemoryUserDatabaseFactory"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">pathname</span>=<span class="string">"conf/tomcat-users.xml"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- A "Service" is a collection of one or more "Connectors" that share</span></span><br><span class="line"><span class="comment">       a single "Container" <span class="doctag">Note:</span>  A "Service" is not itself a "Container",</span></span><br><span class="line"><span class="comment">       so you may not define subcomponents such as "Valves" at this level.</span></span><br><span class="line"><span class="comment">       Documentation at /docs/config/service.html</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义了一个名为Catalina的Service  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- AJP 主要用于集成（如与Apache 集成） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- You should set jvmRoute to support load-balancing via AJP ie :</span></span><br><span class="line"><span class="comment">    &lt;Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1"&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义了一个名为Catalina 的Engine </span></span><br><span class="line"><span class="comment">defaultHost 属性，它表示接收到请求的域名如果在所有的Host 的name 和Alias 中都找不到时使用的默认Host</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- Use the LockOutRealm to prevent attempts to guess user passwords</span></span><br><span class="line"><span class="comment">           via a brute-force attack --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- This Realm uses the UserDatabase configured in the global JNDI</span></span><br><span class="line"><span class="comment">             resources under the key "UserDatabase".  Any edits</span></span><br><span class="line"><span class="comment">             that are performed against this UserDatabase are immediately</span></span><br><span class="line"><span class="comment">             available for use by the Realm.  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.UserDatabaseRealm"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">"UserDatabase"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义了一个名为localhost 的Host  name属性代表域名，所以上面定义的站点可以通过localhost 访问</span></span><br><span class="line"><span class="comment"> appBase 属性指定站点的位置，比如，上面定义的站点就是默认的webapps 目录， unpackWARs 属性表示是否自动解压war 文件， autoDeploy 属性表示是否自动部署，如果autoDeploy 为true 那么Tomcat 在运行过程中在webapps 目录中加入新的应用将会自动部署并启动。另外Host 还有一个Alias 子标签，可以通过这个标签来定义别名，如果有多个域名访问同一个站点就可以这么定义</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Access log processes all example.</span></span><br><span class="line"><span class="comment">             Documentation at: /docs/config/valve.html</span></span><br><span class="line"><span class="comment">             <span class="doctag">Note:</span> The pattern used is equivalent to using pattern="common" --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Context-通过文件配置的方式一共有5-个位置可以配置："><a href="#Context-通过文件配置的方式一共有5-个位置可以配置：" class="headerlink" title="Context 通过文件配置的方式一共有5 个位置可以配置："></a>Context 通过文件配置的方式一共有5 个位置可以配置：</h5><ul><li>conf/server.xml 文件中的Context 标签。</li><li>conf/[ enginename ]/[hostname ］／目录下以应用命名的xml 文件。</li><li>应用自己的／META-INF/context.xml 文件。</li><li>conf/context.xml 文件。</li><li>conf/[ enginename ]/[hostname ]/context.xml.default 文件。</li></ul><p>其中前三个位置用于配置单独的应用，后两个配置的Context 是共享的， conf/context.xml文件中配置的内容在整个Tomcat 中共享;第5 种配置的内容在对应的站点（ Host ）中共享。另外，因为conf/server.xrnl 文件只有在Tomcat 重启的时候才会重新加载，所以第一种配置方法不推荐使用。 </p><p>Wrapper 的配置就是我们在web.xml 中配置的Servlet ， 一个Servlet 对应一个Wrapper。另外也可以在conf/web.xml 文件中配置全局的Wrapper，处理Jsp 的JspServlet 就配置在这里，所以不需要自己配置Jsp 就可以处理Jsp 请求了。 </p><h3 id="Container-的启动"><a href="#Container-的启动" class="headerlink" title="Container 的启动"></a>Container 的启动</h3><p>Container 的启动是通过init 和start 方法来完成的，在前面分析过这两个方法会在Tomcat启动时被Service 调用。Container 也是按照Tomcat 的生命周期来管理的， init 和start 方法也会调用initlntemal 和startintemal 方法来具体处理，不过Container 和前面讲的Tomcat 整体结构启动的过程稍微有点不一样，主要有三点区别：</p><ul><li>Container 的4 个子容器有一个共同的父类ContainerBase ，这里定义了Container 容器的initlntemal和startlnternal 方法通用处理内容，具体容器还可以添加向己的内容；</li><li>除了最顶层容器的init 是被Service 调用的,子容器的init 方法并不是在容器中逐层循环调用的，而是在执行start 方法的时候通过状态判断还没有初始化才会调用；</li><li>start 方法除了在父容器的startlnternal 方法中调用，还会在父容器的添加子容器的addChild 方法中调用，这主要是因为Context 和Wrapper 是动态添加的，我们在站点目录下放一个应用的文件夹或者war 包就可以添加一个Context ，在web.xml 文件中配置一个Servlet 就可以添加一个Wrapper ，所以Context 和Wrapper 是在容器启动的过程中才动态查找出来添加到相应的父容器中的。</li></ul><h4 id="ContainerBase"><a href="#ContainerBase" class="headerlink" title="ContainerBase"></a>ContainerBase</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;ContainerBase&gt;&gt;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">    <span class="comment">//初始化ThreadPoolExecutor 类型的startStopExecutor属性，用于管理启动和关闭的线程</span></span><br><span class="line">        BlockingQueue&lt;Runnable&gt; startStopQueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line">        startStopExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                getStartStopThreadsInternal(),</span><br><span class="line">                getStartStopThreadsInternal(), <span class="number">10</span>, TimeUnit.SECONDS,</span><br><span class="line">                startStopQueue,</span><br><span class="line">                <span class="keyword">new</span> StartStopThreadFactory(getName() + <span class="string">"-startStop-"</span>));</span><br><span class="line">        startStopExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">super</span>.initInternal();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ContainerBase 的startlntemal 方法主要做了5件事：</span></span><br><span class="line">      <span class="comment">//如果有Cluster 和Realm 则调用其start方法；</span></span><br><span class="line">      <span class="comment">//调用所有子容器的start方法启动子容器；</span></span><br><span class="line">      <span class="comment">//调用管道中Value的start方法来启动管道；</span></span><br><span class="line">      <span class="comment">//启动完成后将生命周期状态设置为LifecycleState.STARTING状态；</span></span><br><span class="line">      <span class="comment">//启用后台线程定时处理一些事情。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        <span class="comment">// Start our subordinate components, if any</span></span><br><span class="line">        logger = <span class="keyword">null</span>;</span><br><span class="line">        getLogger();</span><br><span class="line">      <span class="comment">//Cluster用于配置集群,它的作用就是同步Session</span></span><br><span class="line">        Cluster cluster = getClusterInternal();</span><br><span class="line">        <span class="keyword">if</span> (cluster <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">            ((Lifecycle) cluster).start();</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//Realm是Tomcat的安全域，可以用来管理资源的访问权限</span></span><br><span class="line">        Realm realm = getRealmInternal();</span><br><span class="line">        <span class="keyword">if</span> (realm <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">            ((Lifecycle) realm).start();</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">     <span class="comment">//子容器是使用startStopExecutor调用新线程来启动的，这样可以用多个线程来同时启动，效率更高</span></span><br><span class="line">      <span class="comment">//遍历Future 主要有两个作用：①其get方法是阻塞的，只有线程处理完之后才会向下走，这就保证了管道Pipeline 启动之前容器已经启动完成了；②可以处理启动过程中遇到的异常。 </span></span><br><span class="line">        <span class="comment">// Start our child containers, if any</span></span><br><span class="line">        Container children[] = findChildren();</span><br><span class="line">        List&lt;Future&lt;Void&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">            results.add(startStopExecutor.submit(<span class="keyword">new</span> StartChild(children[i])));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MultiThrowable multiThrowable = <span class="keyword">new</span> MultiThrowable();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Future&lt;Void&gt; result : results) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result.get();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                log.error(sm.getString(<span class="string">"containerBase.threadedStartFailed"</span>), e);</span><br><span class="line">                multiThrowable.add(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (multiThrowable.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(sm.getString(<span class="string">"containerBase.threadedStartFailed"</span>),</span><br><span class="line">                    multiThrowable.getThrowable());</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//启动容器的管道</span></span><br><span class="line">        <span class="comment">// Start the Valves in our pipeline (including the basic), if any</span></span><br><span class="line">        <span class="keyword">if</span> (pipeline <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">            ((Lifecycle) pipeline).start();</span><br><span class="line">        &#125;</span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line">        <span class="comment">// Start our thread</span></span><br><span class="line">        threadStart();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Start the background thread that will periodically check for</span></span><br><span class="line"><span class="comment">     * session timeouts.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//其实这个私有方法是start()方法中最重要的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">threadStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (thread != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">      <span class="comment">//如果backgroundProcessorDelay 不大于0，那么方法就停止,默认值为 -1。</span></span><br><span class="line">      <span class="comment">//子容器中，只有StandardEngine设置这个值为10，其他三个容器默认为-1，说明只有StandardEngine在start()方法调用的时候才会走这个方法，其他容器这个方法是走不到下面代码的</span></span><br><span class="line">        <span class="keyword">if</span> (backgroundProcessorDelay &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        threadDone = <span class="keyword">false</span>;</span><br><span class="line">        String threadName = <span class="string">"ContainerBackgroundProcessor["</span> + toString() + <span class="string">"]"</span>;</span><br><span class="line">        thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ContainerBackgroundProcessor(), threadName);</span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------------------- ContainerExecuteDelay Inner Class</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Private thread class to invoke the backgroundProcess method</span></span><br><span class="line"><span class="comment">     * of this container and its children after a fixed delay.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerBackgroundProcessor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="comment">//ContainerBackgroundProcessor是个Runnable接口的实现类，查看其run方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Throwable t = <span class="keyword">null</span>;</span><br><span class="line">            String unexpectedDeathMessage = sm.getString(</span><br><span class="line">                    <span class="string">"containerBase.backgroundProcess.unexpectedThreadDeath"</span>,</span><br><span class="line">                    Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!threadDone) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(backgroundProcessorDelay * <span class="number">1000L</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// Ignore</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!threadDone) &#123;</span><br><span class="line">                        processChildren(ContainerBase.<span class="keyword">this</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException|Error e) &#123;</span><br><span class="line">                t = e;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!threadDone) &#123;</span><br><span class="line">                    log.error(unexpectedDeathMessage, t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processChildren</span><span class="params">(Container container)</span> </span>&#123;</span><br><span class="line">            ClassLoader originalClassLoader = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Context) &#123;</span><br><span class="line">                    Loader loader = ((Context) container).getLoader();</span><br><span class="line">                    <span class="comment">// Loader will be null for FailedContext instances</span></span><br><span class="line">                    <span class="keyword">if</span> (loader == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Ensure background processing for Contexts and Wrappers</span></span><br><span class="line">                    <span class="comment">// is performed under the web app's class loader</span></span><br><span class="line">                    originalClassLoader = ((Context) container).bind(<span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                container.backgroundProcess();</span><br><span class="line">              <span class="comment">//获取所有的子容器，然后遍历每个子容器来调用他们的processChildren()方法</span></span><br><span class="line">                Container[] children = container.findChildren();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (children[i].getBackgroundProcessorDelay() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        processChildren(children[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                log.error(<span class="string">"Exception invoking periodic operation: "</span>, t);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Context) &#123;</span><br><span class="line">                    ((Context) container).unbind(<span class="keyword">false</span>, originalClassLoader);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute a periodic task, such as reloading, etc. This method will be</span></span><br><span class="line"><span class="comment">     * invoked inside the classloading context of this container. Unexpected</span></span><br><span class="line"><span class="comment">     * throwables will be caught and logged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backgroundProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!getState().isAvailable())</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//Catalina的集群组件，通过cluster组件可以实现：集群应用部署，即多个Tomcat实例，不需要每个都分别部署应用，只需要在某个实例上部署，整个集群中的各个实例都会自动同步应用进行部署。那么他的backgroundProcess()方法主要的功能是监听指定文件夹下有没有新增的war包或者文件是新增的还是修改的已决定来重新部署和通知其他tomcat集群成员。</span></span><br><span class="line">        Cluster cluster = getClusterInternal();</span><br><span class="line">        <span class="keyword">if</span> (cluster != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cluster.backgroundProcess();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.warn(sm.getString(<span class="string">"containerBase.backgroundProcess.cluster"</span>,</span><br><span class="line">                        cluster), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//Catalina中的安全组件，backgroundProcess()方法主要的功能是，貌似是跟servlet的安全校验有关。</span></span><br><span class="line">        Realm realm = getRealmInternal();</span><br><span class="line">        <span class="keyword">if</span> (realm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                realm.backgroundProcess();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.warn(sm.getString(<span class="string">"containerBase.backgroundProcess.realm"</span>, realm), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//容器的pipeline组件，这里是遍历整个pipeline链表，分别调用backgroundProcess()方法</span></span><br><span class="line">        Valve current = pipeline.getFirst();</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                current.backgroundProcess();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.warn(sm.getString(<span class="string">"containerBase.backgroundProcess.valve"</span>, current), e);</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        fireLifecycleEvent(Lifecycle.PERIODIC_EVENT, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;StandardContext&gt;&gt;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backgroundProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!getState().isAvailable())</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//Catalina在启动过程中创建的classloader的实例,backgroundProcess()方法主要的功能是查看Context容器是否需要重新加载,热部署就是利用这个机制来完成的</span></span><br><span class="line">        Loader loader = getLoader();</span><br><span class="line">        <span class="keyword">if</span> (loader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                loader.backgroundProcess();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.warn(sm.getString(</span><br><span class="line">                        <span class="string">"standardContext.backgroundProcess.loader"</span>, loader), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Catalina中的Session管理器，backgroundProcess()方法主要的功能是将过期会话(session)置为无效</span></span><br><span class="line">        Manager manager = getManager();</span><br><span class="line">        <span class="keyword">if</span> (manager != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                manager.backgroundProcess();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.warn(sm.getString(</span><br><span class="line">                        <span class="string">"standardContext.backgroundProcess.manager"</span>, manager),</span><br><span class="line">                        e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        WebResourceRoot resources = getResources();</span><br><span class="line">        <span class="keyword">if</span> (resources != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resources.backgroundProcess();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.warn(sm.getString(</span><br><span class="line">                        <span class="string">"standardContext.backgroundProcess.resources"</span>,</span><br><span class="line">                        resources), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        InstanceManager instanceManager = getInstanceManager();</span><br><span class="line">        <span class="keyword">if</span> (instanceManager <span class="keyword">instanceof</span> DefaultInstanceManager) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ((DefaultInstanceManager)instanceManager).backgroundProcess();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.warn(sm.getString(</span><br><span class="line">                        <span class="string">"standardContext.backgroundProcess.instanceManager"</span>,</span><br><span class="line">                        resources), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.backgroundProcess();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;StandardWrapper&gt;&gt;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backgroundProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.backgroundProcess();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!getState().isAvailable())</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getServlet() <span class="keyword">instanceof</span> PeriodicEventListener) &#123;</span><br><span class="line">            ((PeriodicEventListener) getServlet()).periodicEvent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>threadStart 方法启动的后台线程是一个while 循环，内部会定期调用backgroundProcess 方法做一些事情，间隔时间的长短是通过ContainerBase 的backgroundProcessor Delay 属性来设置的，单位是秒，如果小于0 就不启动后台线程了，不过其backgroundProcess 方法会在父容器的后台线程中调用。backgroundProcess 方法是Container 接口中的一个方法， 一共有3 个实现，分别在ContainerBase 、StandardContext 和StandardWrapper 中， ContainerBase 中提供了所有容器共同的处理过程， StandardContext 和StandardWrapper 的backgroundProcess 方法除了处理自己相关的业务，也调用ContainerBase 中的处理。ContainerBase 的backgroundProcess 方法中调用了Cluster 、Realm 和管道的backgroundProcess 方法； StandardContext 的backgroundProcess方法中对Session 过期和资源变化进行了处理； StandardWrapper 的backgroundProcess方法会对Jsp 生成的Servlet 定期进行检查。</p><h3 id="Engine"><a href="#Engine" class="headerlink" title="Engine"></a>Engine</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;StandardEngine&gt;&gt;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        <span class="comment">// Ensure that a Realm is present before any attempt is made to start</span></span><br><span class="line">        <span class="comment">// one. This will create the default NullRealm if necessary.</span></span><br><span class="line">        <span class="comment">//如果没有配置Realm ，则使用一个默认的NullRealm </span></span><br><span class="line">        getRealm();</span><br><span class="line">        <span class="keyword">super</span>.initInternal();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Log our server identification information</span></span><br><span class="line">        <span class="keyword">if</span>(log.isInfoEnabled())</span><br><span class="line">            log.info( <span class="string">"Starting Servlet Engine: "</span> + ServerInfo.getServerInfo());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Standard container startup</span></span><br><span class="line">        <span class="keyword">super</span>.startInternal();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;StandardHost&gt;&gt;</span><br><span class="line"><span class="comment">//没有重写initInternal方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里的代码看起来虽然比较多，但功能却非常简单，就是检查Host的管道中有没有指定的Value ，如果没有则添加进去。检查的方法是遍历所有的Value然后通过名字判断的，检查的Value的类型通过getErrorReportValveClass方法获取，它返回errorReportValveClass属性，可以配置，默认值是org.apache.catalina.valves.ErrorReportValve </span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        <span class="comment">// Set error report valve</span></span><br><span class="line">        String errorValve = getErrorReportValveClass();</span><br><span class="line">        <span class="keyword">if</span> ((errorValve != <span class="keyword">null</span>) &amp;&amp; (!errorValve.equals(<span class="string">""</span>))) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">boolean</span> found = <span class="keyword">false</span>;</span><br><span class="line">                Valve[] valves = getPipeline().getValves();</span><br><span class="line">                <span class="keyword">for</span> (Valve valve : valves) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (errorValve.equals(valve.getClass().getName())) &#123;</span><br><span class="line">                        found = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!found) &#123;</span><br><span class="line">                    Valve valve =</span><br><span class="line">                        (Valve) Class.forName(errorValve).getConstructor().newInstance();</span><br><span class="line">                    getPipeline().addValve(valve);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                log.error(sm.getString(</span><br><span class="line">                        <span class="string">"standardHost.invalidErrorReportValveClass"</span>,</span><br><span class="line">                        errorValve), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.startInternal();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> String errorReportValveClass =</span><br><span class="line">        <span class="string">"org.apache.catalina.valves.ErrorReportValve"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getErrorReportValveClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.errorReportValveClass);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注册监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;Catalina&gt;&gt;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create and configure the Digester we will be using for startup.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the main digester to parse server.xml</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Digester <span class="title">createStartDigester</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> t1=System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// Initialize the digester</span></span><br><span class="line">        Digester digester = <span class="keyword">new</span> Digester();</span><br><span class="line">        digester.setValidating(<span class="keyword">false</span>);</span><br><span class="line">        digester.setRulesValidation(<span class="keyword">true</span>);</span><br><span class="line">        HashMap&lt;Class&lt;?&gt;, List&lt;String&gt;&gt; fakeAttributes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        ..........</span><br><span class="line">        <span class="comment">// Add RuleSets for nested elements</span></span><br><span class="line">        digester.addRuleSet(<span class="keyword">new</span> NamingRuleSet(<span class="string">"Server/GlobalNamingResources/"</span>));</span><br><span class="line">        digester.addRuleSet(<span class="keyword">new</span> EngineRuleSet(<span class="string">"Server/Service/"</span>));</span><br><span class="line">        digester.addRuleSet(<span class="keyword">new</span> HostRuleSet(<span class="string">"Server/Service/Engine/"</span>));</span><br><span class="line">        digester.addRuleSet(<span class="keyword">new</span> ContextRuleSet(<span class="string">"Server/Service/Engine/Host/"</span>));</span><br><span class="line">        addClusterRuleSet(digester, <span class="string">"Server/Service/Engine/Host/Cluster/"</span>);</span><br><span class="line">        digester.addRuleSet(<span class="keyword">new</span> NamingRuleSet(<span class="string">"Server/Service/Engine/Host/Context/"</span>));</span><br><span class="line">        ..........</span><br><span class="line">        </span><br><span class="line"> &lt;&lt;HostRuleSet&gt;&gt; </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRuleInstances</span><span class="params">(Digester digester)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Host"</span>,</span><br><span class="line">                                 <span class="string">"org.apache.catalina.core.StandardHost"</span>,</span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Host"</span>);</span><br><span class="line">        digester.addRule(prefix + <span class="string">"Host"</span>,</span><br><span class="line">                         <span class="keyword">new</span> CopyParentClassLoaderRule());</span><br><span class="line">        <span class="comment">//添加hostConfig监听器</span></span><br><span class="line">        digester.addRule(prefix + <span class="string">"Host"</span>,</span><br><span class="line">                         <span class="keyword">new</span> LifecycleListenerRule</span><br><span class="line">                         (<span class="string">"org.apache.catalina.startup.HostConfig"</span>,</span><br><span class="line">                          <span class="string">"hostConfigClass"</span>));</span><br><span class="line">       .........</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Host 的启动除了startlntemal 方法，还有HostConfig 中相应的方法， HostConfig 继承自LifecycleListener 的监听器（ Engine 也有对应的EngineConfig 监昕器，不过里面只是简单地做了日志记录），在接收到Lifecycle.START_EVENT 事件时会调用start 方法来启动， HostConfig 的start 方法会检查配置的Host 站点配置的位置是否存在以及是不是目录，最后调用deployApps 方法部署应用， deployApps 方法代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;HostConfig&gt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deployApps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File appBase = host.getAppBaseFile();</span><br><span class="line">        File configBase = host.getConfigBaseFile();</span><br><span class="line">        String[] filteredAppPaths = filterAppPaths(appBase.list());</span><br><span class="line">        <span class="comment">// Deploy XML descriptors from configBase</span></span><br><span class="line">        deployDescriptors(configBase, configBase.list());</span><br><span class="line">        <span class="comment">// Deploy WARs</span></span><br><span class="line">        deployWARs(appBase, filteredAppPaths);</span><br><span class="line">        <span class="comment">// Deploy expanded folders</span></span><br><span class="line">        deployDirectories(appBase, filteredAppPaths);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>一共有三种部署方式：通过XML 描述文件、通过WAR 文件和通过文件夹部署。XML文件指的是conf/[enginename ]/[hostname ]/* .xml 文件， WAR 文件和文件夹是Host 站点目录下的WAR 文件和文件夹，这里会自动找出来并部署上，所以我们如果要添加应用只需要直接放在Host 站点的目录下就可以了。部署完成后，会将部署的Context 通过StandardHost 的add Child 方法添加到Host 里面。StandardHost 的addChild 方法会调用父类ContainerBase 的addChild 方法， 其中会调用子类（这里指Context ）的start 方法来启动子容器。 </p><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;StandardContext&gt;&gt;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(log.isDebugEnabled())</span><br><span class="line">            log.debug(<span class="string">"Starting "</span> + getBaseName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Send j2ee.state.starting notification</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.getObjectName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Notification notification = <span class="keyword">new</span> Notification(<span class="string">"j2ee.state.starting"</span>,</span><br><span class="line">                    <span class="keyword">this</span>.getObjectName(), sequenceNumber.getAndIncrement());</span><br><span class="line">            broadcaster.sendNotification(notification);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setConfigured(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">boolean</span> ok = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Currently this is effectively a NO-OP but needs to be called to</span></span><br><span class="line">        <span class="comment">// ensure the NamingResources follows the correct lifecycle</span></span><br><span class="line">        <span class="keyword">if</span> (namingResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">            namingResources.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Post work directory</span></span><br><span class="line">        postWorkDirectory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add missing components as necessary</span></span><br><span class="line">        <span class="keyword">if</span> (getResources() == <span class="keyword">null</span>) &#123;   <span class="comment">// (1) Required by Loader</span></span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">                log.debug(<span class="string">"Configuring default Resources"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                setResources(<span class="keyword">new</span> StandardRoot(<span class="keyword">this</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">                log.error(sm.getString(<span class="string">"standardContext.resourcesInit"</span>), e);</span><br><span class="line">                ok = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">            resourcesStart();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getLoader() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            WebappLoader webappLoader = <span class="keyword">new</span> WebappLoader(getParentClassLoader());</span><br><span class="line">            webappLoader.setDelegate(getDelegate());</span><br><span class="line">            setLoader(webappLoader);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// An explicit cookie processor hasn't been specified; use the default</span></span><br><span class="line">        <span class="keyword">if</span> (cookieProcessor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            cookieProcessor = <span class="keyword">new</span> Rfc6265CookieProcessor();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize character set mapper</span></span><br><span class="line">        getCharsetMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Validate required extensions</span></span><br><span class="line">        <span class="keyword">boolean</span> dependencyCheck = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dependencyCheck = ExtensionValidator.validateApplication</span><br><span class="line">                (getResources(), <span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">            log.error(sm.getString(<span class="string">"standardContext.extensionValidationError"</span>), ioe);</span><br><span class="line">            dependencyCheck = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!dependencyCheck) &#123;</span><br><span class="line">            <span class="comment">// do not make application available if dependency check fails</span></span><br><span class="line">            ok = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reading the "catalina.useNaming" environment variable</span></span><br><span class="line">        String useNamingProperty = System.getProperty(<span class="string">"catalina.useNaming"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((useNamingProperty != <span class="keyword">null</span>)</span><br><span class="line">            &amp;&amp; (useNamingProperty.equals(<span class="string">"false"</span>))) &#123;</span><br><span class="line">            useNaming = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ok &amp;&amp; isUseNaming()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (getNamingContextListener() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                NamingContextListener ncl = <span class="keyword">new</span> NamingContextListener();</span><br><span class="line">                ncl.setName(getNamingContextName());</span><br><span class="line">                ncl.setExceptionOnFailedWrite(getJndiExceptionOnFailedWrite());</span><br><span class="line">                addLifecycleListener(ncl);</span><br><span class="line">                setNamingContextListener(ncl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Standard container startup</span></span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">            log.debug(<span class="string">"Processing standard container startup"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Binding thread</span></span><br><span class="line">        ClassLoader oldCCL = bindThread();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="comment">// Start our subordinate components, if any</span></span><br><span class="line">                Loader loader = getLoader();</span><br><span class="line">                <span class="keyword">if</span> (loader <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">                    ((Lifecycle) loader).start();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// since the loader just started, the webapp classloader is now</span></span><br><span class="line">                <span class="comment">// created.</span></span><br><span class="line">                setClassLoaderProperty(<span class="string">"clearReferencesRmiTargets"</span>,</span><br><span class="line">                        getClearReferencesRmiTargets());</span><br><span class="line">                setClassLoaderProperty(<span class="string">"clearReferencesStopThreads"</span>,</span><br><span class="line">                        getClearReferencesStopThreads());</span><br><span class="line">                setClassLoaderProperty(<span class="string">"clearReferencesStopTimerThreads"</span>,</span><br><span class="line">                        getClearReferencesStopTimerThreads());</span><br><span class="line">                setClassLoaderProperty(<span class="string">"clearReferencesHttpClientKeepAliveThread"</span>,</span><br><span class="line">                        getClearReferencesHttpClientKeepAliveThread());</span><br><span class="line">                setClassLoaderProperty(<span class="string">"clearReferencesObjectStreamClassCaches"</span>,</span><br><span class="line">                        getClearReferencesObjectStreamClassCaches());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// By calling unbindThread and bindThread in a row, we setup the</span></span><br><span class="line">                <span class="comment">// current Thread CCL to be the webapp classloader</span></span><br><span class="line">                unbindThread(oldCCL);</span><br><span class="line">                oldCCL = bindThread();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Initialize logger again. Other components might have used it</span></span><br><span class="line">                <span class="comment">// too early, so it should be reset.</span></span><br><span class="line">                logger = <span class="keyword">null</span>;</span><br><span class="line">                getLogger();</span><br><span class="line"></span><br><span class="line">                Realm realm = getRealmInternal();</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> != realm) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (realm <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">                        ((Lifecycle) realm).start();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Place the CredentialHandler into the ServletContext so</span></span><br><span class="line">                    <span class="comment">// applications can have access to it. Wrap it in a "safe"</span></span><br><span class="line">                    <span class="comment">// handler so application's can't modify it.</span></span><br><span class="line">                    CredentialHandler safeHandler = <span class="keyword">new</span> CredentialHandler() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String inputCredentials, String storedCredentials)</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> getRealmInternal().getCredentialHandler().matches(inputCredentials, storedCredentials);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> String <span class="title">mutate</span><span class="params">(String inputCredentials)</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> getRealmInternal().getCredentialHandler().mutate(inputCredentials);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    context.setAttribute(Globals.CREDENTIAL_HANDLER, safeHandler);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Notify our interested LifecycleListeners</span></span><br><span class="line">                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Start our child containers, if not already started</span></span><br><span class="line">                <span class="keyword">for</span> (Container child : findChildren()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!child.getState().isAvailable()) &#123;</span><br><span class="line">                        child.start();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Start the Valves in our pipeline (including the basic),</span></span><br><span class="line">                <span class="comment">// if any</span></span><br><span class="line">                <span class="keyword">if</span> (pipeline <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">                    ((Lifecycle) pipeline).start();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Acquire clustered manager</span></span><br><span class="line">                Manager contextManager = <span class="keyword">null</span>;</span><br><span class="line">                Manager manager = getManager();</span><br><span class="line">                <span class="keyword">if</span> (manager == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                        log.debug(sm.getString(<span class="string">"standardContext.cluster.noManager"</span>,</span><br><span class="line">                                Boolean.valueOf((getCluster() != <span class="keyword">null</span>)),</span><br><span class="line">                                Boolean.valueOf(distributable)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ( (getCluster() != <span class="keyword">null</span>) &amp;&amp; distributable) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            contextManager = getCluster().createManager(getName());</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                            log.error(<span class="string">"standardContext.clusterFail"</span>, ex);</span><br><span class="line">                            ok = <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        contextManager = <span class="keyword">new</span> StandardManager();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Configure default manager if none was specified</span></span><br><span class="line">                <span class="keyword">if</span> (contextManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                        log.debug(sm.getString(<span class="string">"standardContext.manager"</span>,</span><br><span class="line">                                contextManager.getClass().getName()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    setManager(contextManager);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (manager!=<span class="keyword">null</span> &amp;&amp; (getCluster() != <span class="keyword">null</span>) &amp;&amp; distributable) &#123;</span><br><span class="line">                    <span class="comment">//let the cluster know that there is a context that is distributable</span></span><br><span class="line">                    <span class="comment">//and that it has its own manager</span></span><br><span class="line">                    getCluster().registerManager(manager);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!getConfigured()) &#123;</span><br><span class="line">                log.error(sm.getString(<span class="string">"standardContext.configurationFail"</span>));</span><br><span class="line">                ok = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We put the resources into the servlet context</span></span><br><span class="line">            <span class="keyword">if</span> (ok)</span><br><span class="line">                getServletContext().setAttribute</span><br><span class="line">                    (Globals.RESOURCES_ATTR, getResources());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ok ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (getInstanceManager() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    javax.naming.Context context = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (isUseNaming() &amp;&amp; getNamingContextListener() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        context = getNamingContextListener().getEnvContext();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Map&lt;String, Map&lt;String, String&gt;&gt; injectionMap = buildInjectionMap(</span><br><span class="line">                            getIgnoreAnnotations() ? <span class="keyword">new</span> NamingResourcesImpl(): getNamingResources());</span><br><span class="line">                    setInstanceManager(<span class="keyword">new</span> DefaultInstanceManager(context,</span><br><span class="line">                            injectionMap, <span class="keyword">this</span>, <span class="keyword">this</span>.getClass().getClassLoader()));</span><br><span class="line">                &#125;</span><br><span class="line">                getServletContext().setAttribute(</span><br><span class="line">                        InstanceManager.class.getName(), getInstanceManager());</span><br><span class="line">                InstanceManagerBindings.bind(getLoader().getClassLoader(), getInstanceManager());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Create context attributes that will be required</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                getServletContext().setAttribute(</span><br><span class="line">                        JarScanner.class.getName(), getJarScanner());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set up the context init params</span></span><br><span class="line">            mergeParameters();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Call ServletContainerInitializers</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;ServletContainerInitializer, Set&lt;Class&lt;?&gt;&gt;&gt; entry :</span><br><span class="line">                initializers.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    entry.getKey().onStartup(entry.getValue(),</span><br><span class="line">                            getServletContext());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">"standardContext.sciFail"</span>), e);</span><br><span class="line">                    ok = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Configure and call application event listeners</span></span><br><span class="line">            <span class="comment">//配置listeners</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!listenerStart()) &#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">"standardContext.listenerFail"</span>));</span><br><span class="line">                    ok = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check constraints for uncovered HTTP methods</span></span><br><span class="line">            <span class="comment">// Needs to be after SCIs and listeners as they may programmatically</span></span><br><span class="line">            <span class="comment">// change constraints</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                checkConstraintsForUncoveredMethods(findConstraints());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Start manager</span></span><br><span class="line">                Manager manager = getManager();</span><br><span class="line">                <span class="keyword">if</span> (manager <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">                    ((Lifecycle) manager).start();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">                log.error(sm.getString(<span class="string">"standardContext.managerFail"</span>), e);</span><br><span class="line">                ok = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Configure and call application filters</span></span><br><span class="line">            <span class="comment">//配置filters</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!filterStart()) &#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">"standardContext.filterFail"</span>));</span><br><span class="line">                    ok = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Load and initialize all "load on startup" servlets</span></span><br><span class="line">            <span class="comment">//配置load-on-startup</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!loadOnStartup(findChildren()))&#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">"standardContext.servletFail"</span>));</span><br><span class="line">                    ok = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Start ContainerBackgroundProcessor thread</span></span><br><span class="line">            <span class="keyword">super</span>.threadStart();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Unbinding thread</span></span><br><span class="line">            unbindThread(oldCCL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set available status depending upon startup success</span></span><br><span class="line">        <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">                log.debug(<span class="string">"Starting completed"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(sm.getString(<span class="string">"standardContext.startFailed"</span>, getName()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        startTime=System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Send j2ee.state.running notification</span></span><br><span class="line">        <span class="keyword">if</span> (ok &amp;&amp; (<span class="keyword">this</span>.getObjectName() != <span class="keyword">null</span>)) &#123;</span><br><span class="line">            Notification notification =</span><br><span class="line">                <span class="keyword">new</span> Notification(<span class="string">"j2ee.state.running"</span>, <span class="keyword">this</span>.getObjectName(),</span><br><span class="line">                                 sequenceNumber.getAndIncrement());</span><br><span class="line">            broadcaster.sendNotification(notification);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The WebResources implementation caches references to JAR files. On</span></span><br><span class="line">        <span class="comment">// some platforms these references may lock the JAR files. Since web</span></span><br><span class="line">        <span class="comment">// application start is likely to have read from lots of JARs, trigger</span></span><br><span class="line">        <span class="comment">// a clean-up now.</span></span><br><span class="line">        getResources().gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reinitializing if something went wrong</span></span><br><span class="line">        <span class="keyword">if</span> (!ok) &#123;</span><br><span class="line">            setState(LifecycleState.FAILED);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setState(LifecycleState.STARTING);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>listenerStart 、filterStart 和loadOnStartup 方法分别调用配置在Listener 的contextlnitialized 方法以及Filter 和配置了load-on-startup 的Servlet 的init 方法。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;ContextConfig&gt;&gt;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Process a "contextConfig" event for this Context.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">configureStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Called from StandardContext.start()</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(sm.getString(<span class="string">"contextConfig.start"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(sm.getString(<span class="string">"contextConfig.xmlSettings"</span>,</span><br><span class="line">                    context.getName(),</span><br><span class="line">                    Boolean.valueOf(context.getXmlValidation()),</span><br><span class="line">                    Boolean.valueOf(context.getXmlNamespaceAware())));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        webConfig();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!context.getIgnoreAnnotations()) &#123;</span><br><span class="line">            applicationAnnotationsConfig();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">            validateSecurityRoles();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Configure an authenticator if we need one</span></span><br><span class="line">        <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">            authenticatorConfig();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dump the contents of this pipeline if requested</span></span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"Pipeline Configuration:"</span>);</span><br><span class="line">            Pipeline pipeline = context.getPipeline();</span><br><span class="line">            Valve valves[] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (pipeline != <span class="keyword">null</span>) &#123;</span><br><span class="line">                valves = pipeline.getValves();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (valves != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valves.length; i++) &#123;</span><br><span class="line">                    log.debug(<span class="string">"  "</span> + valves[i].getClass().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">"======================"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make our application available if no problems were encountered</span></span><br><span class="line">        <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">            context.setConfigured(<span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(sm.getString(<span class="string">"contextConfig.unavailable"</span>));</span><br><span class="line">            context.setConfigured(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Scan the web.xml files that apply to the web application and merge them</span></span><br><span class="line"><span class="comment">     * using the rules defined in the spec. For the global web.xml files,</span></span><br><span class="line"><span class="comment">     * where there is duplicate configuration, the most specific level wins. ie</span></span><br><span class="line"><span class="comment">     * an application's web.xml takes precedence over the host level or global</span></span><br><span class="line"><span class="comment">     * web.xml file.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">webConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Anything and everything can override the global and host defaults.</span></span><br><span class="line"><span class="comment">         * This is implemented in two parts</span></span><br><span class="line"><span class="comment">         * - Handle as a web fragment that gets added after everything else so</span></span><br><span class="line"><span class="comment">         *   everything else takes priority</span></span><br><span class="line"><span class="comment">         * - Mark Servlets as overridable so SCI configuration can replace</span></span><br><span class="line"><span class="comment">         *   configuration from the defaults</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * The rules for annotation scanning are not as clear-cut as one might</span></span><br><span class="line"><span class="comment">         * think. Tomcat implements the following process:</span></span><br><span class="line"><span class="comment">         * - As per SRV.1.6.2, Tomcat will scan for annotations regardless of</span></span><br><span class="line"><span class="comment">         *   which Servlet spec version is declared in web.xml. The EG has</span></span><br><span class="line"><span class="comment">         *   confirmed this is the expected behaviour.</span></span><br><span class="line"><span class="comment">         * - As per http://java.net/jira/browse/SERVLET_SPEC-36, if the main</span></span><br><span class="line"><span class="comment">         *   web.xml is marked as metadata-complete, JARs are still processed</span></span><br><span class="line"><span class="comment">         *   for SCIs.</span></span><br><span class="line"><span class="comment">         * - If metadata-complete=true and an absolute ordering is specified,</span></span><br><span class="line"><span class="comment">         *   JARs excluded from the ordering are also excluded from the SCI</span></span><br><span class="line"><span class="comment">         *   processing.</span></span><br><span class="line"><span class="comment">         * - If an SCI has a @HandlesType annotation then all classes (except</span></span><br><span class="line"><span class="comment">         *   those in JARs excluded from an absolute ordering) need to be</span></span><br><span class="line"><span class="comment">         *   scanned to check if they match.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        WebXmlParser webXmlParser = <span class="keyword">new</span> WebXmlParser(context.getXmlNamespaceAware(),</span><br><span class="line">                context.getXmlValidation(), context.getXmlBlockExternal());</span><br><span class="line"></span><br><span class="line">        Set&lt;WebXml&gt; defaults = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        defaults.add(getDefaultWebXmlFragment(webXmlParser));</span><br><span class="line"></span><br><span class="line">        WebXml webXml = createWebXml();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Parse context level web.xml</span></span><br><span class="line">        InputSource contextWebXml = getContextWebXmlSource();</span><br><span class="line">        <span class="keyword">if</span> (!webXmlParser.parseWebXml(contextWebXml, webXml, <span class="keyword">false</span>)) &#123;</span><br><span class="line">            ok = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ServletContext sContext = context.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Ordering is important here</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 1. Identify all the JARs packaged with the application and those</span></span><br><span class="line">        <span class="comment">// provided by the container. If any of the application JARs have a</span></span><br><span class="line">        <span class="comment">// web-fragment.xml it will be parsed at this point. web-fragment.xml</span></span><br><span class="line">        <span class="comment">// files are ignored for container provided JARs.</span></span><br><span class="line">        Map&lt;String,WebXml&gt; fragments = processJarsForWebFragments(webXml, webXmlParser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 2. Order the fragments.</span></span><br><span class="line">        Set&lt;WebXml&gt; orderedFragments = <span class="keyword">null</span>;</span><br><span class="line">        orderedFragments =</span><br><span class="line">                WebXml.orderWebFragments(webXml, fragments, sContext);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 3. Look for ServletContainerInitializer implementations</span></span><br><span class="line">        <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">            processServletContainerInitializers();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>  (!webXml.isMetadataComplete() || typeInitializerMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Step 4. Process /WEB-INF/classes for annotations and</span></span><br><span class="line">            <span class="comment">// @HandlesTypes matches</span></span><br><span class="line">            Map&lt;String,JavaClassCacheEntry&gt; javaClassCache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                WebResource[] webResources =</span><br><span class="line">                        context.getResources().listResources(<span class="string">"/WEB-INF/classes"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (WebResource webResource : webResources) &#123;</span><br><span class="line">                    <span class="comment">// Skip the META-INF directory from any JARs that have been</span></span><br><span class="line">                    <span class="comment">// expanded in to WEB-INF/classes (sometimes IDEs do this).</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"META-INF"</span>.equals(webResource.getName())) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    processAnnotationsWebResource(webResource, webXml,</span><br><span class="line">                            webXml.isMetadataComplete(), javaClassCache);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Step 5. Process JARs for annotations and</span></span><br><span class="line">            <span class="comment">// @HandlesTypes matches - only need to process those fragments we</span></span><br><span class="line">            <span class="comment">// are going to use (remember orderedFragments includes any</span></span><br><span class="line">            <span class="comment">// container fragments)</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                processAnnotations(</span><br><span class="line">                        orderedFragments, webXml.isMetadataComplete(), javaClassCache);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Cache, if used, is no longer required so clear it</span></span><br><span class="line">            javaClassCache.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!webXml.isMetadataComplete()) &#123;</span><br><span class="line">            <span class="comment">// Step 6. Merge web-fragment.xml files into the main web.xml</span></span><br><span class="line">            <span class="comment">// file.</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                ok = webXml.merge(orderedFragments);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Step 7. Apply global defaults</span></span><br><span class="line">            <span class="comment">// Have to merge defaults before JSP conversion since defaults</span></span><br><span class="line">            <span class="comment">// provide JSP servlet definition.</span></span><br><span class="line">            webXml.merge(defaults);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Step 8. Convert explicitly mentioned jsps to servlets</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                convertJsps(webXml);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Step 9. Apply merged web.xml to Context</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                configureContext(webXml);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            webXml.merge(defaults);</span><br><span class="line">            convertJsps(webXml);</span><br><span class="line">            configureContext(webXml);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (context.getLogEffectiveWebXml()) &#123;</span><br><span class="line">            log.info(<span class="string">"web.xml:\n"</span> + webXml.toXml());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Always need to look for static resources</span></span><br><span class="line">        <span class="comment">// Step 10. Look for static resources packaged in JARs</span></span><br><span class="line">        <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">            <span class="comment">// Spec does not define an order.</span></span><br><span class="line">            <span class="comment">// Use ordered JARs followed by remaining JARs</span></span><br><span class="line">            Set&lt;WebXml&gt; resourceJars = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (WebXml fragment : orderedFragments) &#123;</span><br><span class="line">                resourceJars.add(fragment);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (WebXml fragment : fragments.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!resourceJars.contains(fragment)) &#123;</span><br><span class="line">                    resourceJars.add(fragment);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            processResourceJARs(resourceJars);</span><br><span class="line">            <span class="comment">// See also StandardContext.resourcesStart() for</span></span><br><span class="line">            <span class="comment">// WEB-INF/classes/META-INF/resources configuration</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 11. Apply the ServletContainerInitializer config to the</span></span><br><span class="line">        <span class="comment">// context</span></span><br><span class="line">        <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;ServletContainerInitializer,</span><br><span class="line">                    Set&lt;Class&lt;?&gt;&gt;&gt; entry :</span><br><span class="line">                        initializerClassMap.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (entry.getValue().isEmpty()) &#123;</span><br><span class="line">                    context.addServletContainerInitializer(</span><br><span class="line">                            entry.getKey(), <span class="keyword">null</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    context.addServletContainerInitializer(</span><br><span class="line">                            entry.getKey(), entry.getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>  Context 和 Host 一样也有一个LifecycleListener 类型的监听器ContextConfig ， 其中configureStart 方法用来处理CONFTGURE_START_EVENT 事件，这个方法里面调用webConfig方法， webConfig 方法解析了web.xml文件，相应地创建了Wrapper 并使用addChild 添加到了Context 里面。 </p><h3 id="Wrapper"><a href="#Wrapper" class="headerlink" title="Wrapper"></a>Wrapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;Wrapper&gt;&gt;</span><br><span class="line"><span class="comment">//没有重写initlntemal 方法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Send j2ee.state.starting notification</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.getObjectName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Notification notification = <span class="keyword">new</span> Notification(<span class="string">"j2ee.state.starting"</span>,</span><br><span class="line">                                                        <span class="keyword">this</span>.getObjectName(),</span><br><span class="line">                                                        sequenceNumber++);</span><br><span class="line">            broadcaster.sendNotification(notification);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start up this component</span></span><br><span class="line">        <span class="keyword">super</span>.startInternal();</span><br><span class="line"></span><br><span class="line">        setAvailable(<span class="number">0L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Send j2ee.state.running notification</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.getObjectName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Notification notification =</span><br><span class="line">                <span class="keyword">new</span> Notification(<span class="string">"j2ee.state.running"</span>, <span class="keyword">this</span>.getObjectName(),</span><br><span class="line">                                sequenceNumber++);</span><br><span class="line">            broadcaster.sendNotification(notification);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里主要做了三件事情：</p><ul><li>用broadcaster 发送通知，主要用于JMX;</li><li>调用了父类ContainerBase 中的startlntemal 方法；</li><li>调用setAvailable 方法让Servlet 有效。</li></ul><p>这里的setAvailable 方法是Wrapper 接口中的方法，其作用是设置Wrapper 所包含的Servlet 有效的起始时间，如果所设置的时间为将来的时间，那么调用所对应的Servlet 就会产生错误，直到过了所设置的时间之后才可以正常调用，它的类型是long，如果设置为Long.MAX VALUE 就一直不可以调用了。Wrapper 没有别的容器那种XXXConfig 样式的LifecycleListener 监听器。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tomcat源码2</title>
      <link href="/2019/08/27/Tomcat%E6%BA%90%E7%A0%812/"/>
      <url>/2019/08/27/Tomcat%E6%BA%90%E7%A0%812/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat拾遗–BootStrap类的静态代码块和反射调用Catalina的意义是什么"><a href="#Tomcat拾遗–BootStrap类的静态代码块和反射调用Catalina的意义是什么" class="headerlink" title="Tomcat拾遗–BootStrap类的静态代码块和反射调用Catalina的意义是什么"></a>Tomcat拾遗–BootStrap类的静态代码块和反射调用Catalina的意义是什么</h1><p>首先我们需要知道一个潜规则：即如果我们在A类中调用B类，如果B类没有被classloader加载或者就算加载了 但是该classloader和A类的classloader属于平行的，即我们在A的classloader中找不到B类的class，那么A会使用自己的classloader去加载B。</p><a id="more"></a><h2 id="反射调用Catalina的意义"><a href="#反射调用Catalina的意义" class="headerlink" title="反射调用Catalina的意义"></a>反射调用Catalina的意义</h2><p>因为Bootstrap这个类在Tomcat打包发布时是放在bin\bootstrap.jar中，<br> 而Catalina类是放在lib\catalina.jar中,两个jar是用不同的ClassLoader加载的，<br> 所以不能在Bootstrap类中直接引用Catalina类，只能通过反射。<br> <code>这也意味着 后续我们在tomcat的Catalina类里面启动的类默认都是使用catalinaLoader（除了我们的context使用webappclassloader去加载的）</code>，进而tomcat使用的类只能被tomcat自己使用，而不会被其他应用使用</p><h3 id="组件图"><a href="#组件图" class="headerlink" title="组件图"></a>组件图</h3><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190821095811.png" alt></p><p>多个 Connector 和一个 Container 就形成了一个 Service，Service 的概念大家都很熟悉了，有了 Service 就可以对外提供服务了，但是 Service 还要一个生存的环境，必须要有人能够给她生命、掌握其生死大权，那就非 Server 莫属了。所以整个 Tomcat 的生命周期由 Server 控制。</p><h3 id="connector"><a href="#connector" class="headerlink" title="connector"></a>connector</h3><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190826152751.png" alt></p><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190822092423.png" alt></p><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190822092926.png" alt></p><p>在tomcat中，connector负责接收来自客户端的连接，并交由后续的代码进行处理。connector对象持有ProtocolHandler对象；ProtocolHandler对象持有AbstractEndpoint对象。AbstractEndpoint负责创建服务器套接字，并绑定到监听端口；同时还创建accepter线程来接收客户端的连接以及poller线程来处理连接中的读写请求。其结构如上图所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Connector</span><span class="params">(String protocol)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置协议</span></span><br><span class="line">        setProtocol(protocol);</span><br><span class="line">        <span class="comment">// Instantiate protocol handler</span></span><br><span class="line">        ProtocolHandler p = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//反射生成ProtocolHandler实例</span></span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(protocolHandlerClassName);</span><br><span class="line">            p = (ProtocolHandler) clazz.getConstructor().newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(sm.getString(</span><br><span class="line">                    <span class="string">"coyoteConnector.protocolHandlerInstantiationFailed"</span>), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.protocolHandler = p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Globals.STRICT_SERVLET_COMPLIANCE) &#123;</span><br><span class="line">            uriCharset = StandardCharsets.ISO_8859_1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            uriCharset = StandardCharsets.UTF_8;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProtocol</span><span class="params">(String protocol)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> aprConnector = AprLifecycleListener.isAprAvailable() &amp;&amp;</span><br><span class="line">                AprLifecycleListener.getUseAprConnector();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"HTTP/1.1"</span>.equals(protocol) || protocol == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (aprConnector) &#123;</span><br><span class="line">                setProtocolHandlerClassName(<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setProtocolHandlerClassName(<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"AJP/1.3"</span>.equals(protocol)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (aprConnector) &#123;</span><br><span class="line">                setProtocolHandlerClassName(<span class="string">"org.apache.coyote.ajp.AjpAprProtocol"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setProtocolHandlerClassName(<span class="string">"org.apache.coyote.ajp.AjpNioProtocol"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setProtocolHandlerClassName(protocol);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Connector的构造函数带有协议属性，该协议属性是server.xml中Connector标签的protocol的属性值。Tomcat 8中默认值为HTTP/1.1，因此在Connector的构造函数中生成的是Http11NioProtocol对象。在setProtocol()方法中可以看到，tomcat8还包括其他几个协议处理器。协议处理器中带有Apr命名的都是使用Apr库来处理http请求的。通过使用APR库，Tomcat将使用JNI的方式来读取文件以及进行网络传输，可以大大提升Tomcat对静态文件的处理性能，同时如果你使用了HTTPS方式传输的话，也可以提升SSL的处理性能。AJP/1.3协议是Http服务器和应用服务器之间数据交互的协议，比如Apache服务器或IIS服务器与tomcat服务器之间进行数据交互。<br>Http11NioProtocol是非阻塞模式的Http1.1协议处理器，使用java的nio包来实现非阻塞。可以看到，在tomcat 8中，默认使用的是非阻塞IO。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractHttp11Protocol</span><span class="params">(AbstractEndpoint&lt;S&gt; endpoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(endpoint);</span><br><span class="line">        setConnectionTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);</span><br><span class="line">        ConnectionHandler&lt;S&gt; cHandler = <span class="keyword">new</span> ConnectionHandler&lt;&gt;(<span class="keyword">this</span>);</span><br><span class="line">        setHandler(cHandler);</span><br><span class="line">        getEndpoint().setHandler(cHandler);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在创建Http11NioProtocol实例的时候，会创建NioEndpoint、ConnectionHandler实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;&lt;AbstractEndpoint&gt;&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bindOnInit) &#123;</span><br><span class="line">            bind();<span class="comment">//调用子类bind方法初始化</span></span><br><span class="line">            bindState = BindState.BOUND_ON_INIT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.domain != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Register endpoint (as ThreadPool - historical name)</span></span><br><span class="line">            oname = <span class="keyword">new</span> ObjectName(domain + <span class="string">":type=ThreadPool,name=\""</span> + getName() + <span class="string">"\""</span>);</span><br><span class="line">            Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(<span class="keyword">this</span>, oname, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (SSLHostConfig sslHostConfig : findSslHostConfigs()) &#123;</span><br><span class="line">                registerJmx(sslHostConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//&lt;&lt;NioEndpoint&gt;&gt;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize the endpoint.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!getUseInheritedChannel()) &#123;</span><br><span class="line">            <span class="comment">// 打开serverSocketChannel</span></span><br><span class="line">            serverSock = ServerSocketChannel.open();</span><br><span class="line">            <span class="comment">// 设置socket属性</span></span><br><span class="line">            socketProperties.setProperties(serverSock.socket());</span><br><span class="line">            InetSocketAddress addr = (getAddress()!=<span class="keyword">null</span>?<span class="keyword">new</span> InetSocketAddress(getAddress(),getPort()):<span class="keyword">new</span> InetSocketAddress(getPort()));</span><br><span class="line">            <span class="comment">// 绑定监听端口</span></span><br><span class="line">            serverSock.socket().bind(addr,getAcceptCount());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Retrieve the channel provided by the OS</span></span><br><span class="line">            Channel ic = System.inheritedChannel();</span><br><span class="line">            <span class="keyword">if</span> (ic <span class="keyword">instanceof</span> ServerSocketChannel) &#123;</span><br><span class="line">                serverSock = (ServerSocketChannel) ic;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (serverSock == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(sm.getString(<span class="string">"endpoint.init.bind.inherited"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设为阻塞模式</span></span><br><span class="line">        <span class="comment">//这里为什么要设置成阻塞呢，Tomcat的设计初衷主要是为了操作方便。这样这里就跟BIO模式下一样了。只不过在BIO下这里返回的是Socket，NIO下这里返回的是SocketChannel。</span></span><br><span class="line">        serverSock.configureBlocking(<span class="keyword">true</span>); <span class="comment">//mimic APR behavior</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize thread count defaults for acceptor, poller</span></span><br><span class="line">        <span class="keyword">if</span> (acceptorThreadCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">FIXME:</span> Doesn't seem to work that well with multiple accept threads</span></span><br><span class="line">            acceptorThreadCount = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pollerThreadCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//minimum one poller thread</span></span><br><span class="line">            pollerThreadCount = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        setStopLatch(<span class="keyword">new</span> CountDownLatch(pollerThreadCount));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize SSL if needed</span></span><br><span class="line">        initialiseSsl();</span><br><span class="line"><span class="comment">// 打开阻塞模式的selector</span></span><br><span class="line">        selectorPool.open();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在bind()方法中，首先打开serverSocketChannel，并绑定到监听端口，此处将其该channel设置为阻塞模式。对于SSL部分，此处略过不讲。在最后的 selectorPool.open()执行语句中，会先获得共享的selector，并且创建线程在该selector上检测事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;&lt;AbstractEndPoint&gt;&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bindState == BindState.UNBOUND) &#123;</span><br><span class="line">            bind();</span><br><span class="line">            bindState = BindState.BOUND_ON_START;</span><br><span class="line">        &#125;</span><br><span class="line">        startInternal();<span class="comment">//调用子类startInternal方法初始化启动</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;&lt;NioEndpoint&gt;&gt;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Start the NIO endpoint, creating acceptor, poller threads.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!running) &#123;</span><br><span class="line">            running = <span class="keyword">true</span>;</span><br><span class="line">            paused = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            processorCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                    socketProperties.getProcessorCache());</span><br><span class="line">            eventCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                            socketProperties.getEventCache());</span><br><span class="line">            nioChannels = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                    socketProperties.getBufferPool());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Create worker collection</span></span><br><span class="line">            <span class="keyword">if</span> ( getExecutor() == <span class="keyword">null</span> ) &#123;</span><br><span class="line">                createExecutor();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 初始化计数器Latch</span></span><br><span class="line">            initializeConnectionLatch();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建Poller线程</span></span><br><span class="line">            <span class="comment">// Start poller threads</span></span><br><span class="line">            pollers = <span class="keyword">new</span> Poller[getPollerThreadCount()];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pollers.length; i++) &#123;</span><br><span class="line">                pollers[i] = <span class="keyword">new</span> Poller();</span><br><span class="line">                Thread pollerThread = <span class="keyword">new</span> Thread(pollers[i], getName() + <span class="string">"-ClientPoller-"</span>+i);</span><br><span class="line">                pollerThread.setPriority(threadPriority);</span><br><span class="line">                pollerThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">                pollerThread.start();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 创建Acceptor线程</span></span><br><span class="line">            startAcceptorThreads();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在startInternal()方法中，最重要的是创建Poller和Acceptor线程。Acceptor线程处理serverSocketChannel的请求接收事件；Poller处理serverSocketChannel的读写事件。此时可以预想到，Acceptor线程专门负责接收客户端连接socketChannel，然后将socketChannel交给Poller线程读写。在实际中，Poller线程将socketChannel再次封装之后又开启另一个线程进行实际的数据处理。这样设计的目的是避免当某一个请求出现阻塞的时候，影响到整个服务器的接收、处理能力。 按接收请求，处理请求的逻辑，我们先观察Acceptor线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------- Acceptor Inner Class</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The background thread that listens for incoming TCP/IP connections and</span></span><br><span class="line"><span class="comment">     * hands them off to an appropriate processor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">Acceptor</span> <span class="keyword">extends</span> <span class="title">AbstractEndpoint</span>.<span class="title">Acceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> errorDelay = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 一直循环直到接收停止命令</span></span><br><span class="line">            <span class="comment">// Loop until we receive a shutdown command</span></span><br><span class="line">            <span class="keyword">while</span> (running) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Loop if endpoint is paused</span></span><br><span class="line">                <span class="keyword">while</span> (paused &amp;&amp; running) &#123;</span><br><span class="line">                    state = AcceptorState.PAUSED;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// Ignore</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!running) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                state = AcceptorState.RUNNING;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//通过同步计数器来限制连接数目</span></span><br><span class="line">                    <span class="comment">//当连接数目超过上限时，则等待</span></span><br><span class="line">                    <span class="comment">//其中同步计算器是通过继承AQS实现的</span></span><br><span class="line">                    <span class="comment">//默认的最大连接数是10000</span></span><br><span class="line">                    <span class="comment">//if we have reached max connections, wait</span></span><br><span class="line">                    countUpOrAwaitConnection();</span><br><span class="line"></span><br><span class="line">                    SocketChannel socket = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// Accept the next incoming connection from the server</span></span><br><span class="line">                        <span class="comment">// socket</span></span><br><span class="line">                        <span class="comment">//接收连接，此处并不是使用selector实现,在前面的代码中已知serverSock是阻塞模式的。</span></span><br><span class="line">                        socket = serverSock.accept();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                        <span class="comment">// We didn't get a socket</span></span><br><span class="line">                        countDownConnection();</span><br><span class="line">                        <span class="keyword">if</span> (running) &#123;</span><br><span class="line">                            <span class="comment">// Introduce delay if necessary</span></span><br><span class="line">                            errorDelay = handleExceptionWithDelay(errorDelay);</span><br><span class="line">                            <span class="comment">// re-throw</span></span><br><span class="line">                            <span class="keyword">throw</span> ioe;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// Successful accept, reset the error delay</span></span><br><span class="line">                    errorDelay = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Configure the socket</span></span><br><span class="line">                    <span class="keyword">if</span> (running &amp;&amp; !paused) &#123;</span><br><span class="line">                        <span class="comment">// setSocketOptions() will hand the socket off to</span></span><br><span class="line">                        <span class="comment">// an appropriate processor if successful</span></span><br><span class="line">                        <span class="comment">// 在setSocketOptions中将接收到的socket传给poller线程进行处理</span></span><br><span class="line">                        <span class="keyword">if</span> (!setSocketOptions(socket)) &#123;</span><br><span class="line">                            closeSocket(socket);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        closeSocket(socket);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    ExceptionUtils.handleThrowable(t);</span><br><span class="line">                    log.error(sm.getString(<span class="string">"endpoint.accept.fail"</span>), t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            state = AcceptorState.ENDED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeSocket</span><span class="params">(SocketChannel socket)</span> </span>&#123;</span><br><span class="line">            countDownConnection();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.socket().close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe)  &#123;</span><br><span class="line">                <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                    log.debug(sm.getString(<span class="string">"endpoint.err.close"</span>), ioe);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                    log.debug(sm.getString(<span class="string">"endpoint.err.close"</span>), ioe);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">setSocketOptions</span><span class="params">(SocketChannel socket)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Process the connection</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//disable blocking, APR style, we are gonna be polling it</span></span><br><span class="line">            <span class="comment">// 设置为非阻塞模式</span></span><br><span class="line">            socket.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            Socket sock = socket.socket();</span><br><span class="line">            socketProperties.setProperties(sock);</span><br><span class="line"><span class="comment">// 从NioChannel容器中获得一个NioChannel</span></span><br><span class="line">            <span class="comment">// NioChannel可以理解为socketChannel的代理类，提供更多的功能</span></span><br><span class="line">            NioChannel channel = nioChannels.pop();</span><br><span class="line">            <span class="keyword">if</span> (channel == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// SocketBufferHandler维护了在处理过程中的读写缓存</span></span><br><span class="line">                SocketBufferHandler bufhandler = <span class="keyword">new</span> SocketBufferHandler(</span><br><span class="line">                        socketProperties.getAppReadBufSize(),</span><br><span class="line">                        socketProperties.getAppWriteBufSize(),</span><br><span class="line">                        socketProperties.getDirectBuffer());</span><br><span class="line">                <span class="keyword">if</span> (isSSLEnabled()) &#123;</span><br><span class="line">                    channel = <span class="keyword">new</span> SecureNioChannel(socket, bufhandler, selectorPool, <span class="keyword">this</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 将socket、bufHandler封装到NioChannel中</span></span><br><span class="line">                    channel = <span class="keyword">new</span> NioChannel(socket, bufhandler);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                channel.setIOChannel(socket);</span><br><span class="line">                channel.reset();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将niochannel注册到poller线程中进行处理</span></span><br><span class="line">            getPoller0().register(channel);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.error(<span class="string">""</span>,t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable tt) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(tt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Tell to close the socket</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="poller和pollerEvent"><a href="#poller和pollerEvent" class="headerlink" title="poller和pollerEvent"></a>poller和pollerEvent</h3><p>待补充</p><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190826152622.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Loop until destroy() is called</span></span><br><span class="line">    <span class="comment">// 循环直到destroy()方法被调用</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> hasEvents = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!close) &#123;</span><br><span class="line">                        hasEvents = events();</span><br><span class="line">                        <span class="comment">// wakeupCounter &gt; 0，表示有事件，故直接用selectNow，否则用select(selectorTimeout)以阻塞一段时间等待事件到来</span></span><br><span class="line">                        <span class="keyword">if</span> (wakeupCounter.getAndSet(-<span class="number">1</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">//if we are here, means we have other stuff to do</span></span><br><span class="line">                            <span class="comment">//do a non blocking select</span></span><br><span class="line">                            keyCount = selector.selectNow();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            keyCount = selector.select(selectorTimeout);</span><br><span class="line">                        &#125;</span><br><span class="line">                        wakeupCounter.set(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 关闭</span></span><br><span class="line">                    <span class="keyword">if</span> (close) &#123;</span><br><span class="line">                        events();</span><br><span class="line">                        timeout(<span class="number">0</span>, <span class="keyword">false</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            selector.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                            log.error(sm.getString(<span class="string">"endpoint.nio.selectorCloseFail"</span>), ioe);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                    ExceptionUtils.handleThrowable(x);</span><br><span class="line">                    log.error(<span class="string">""</span>,x);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//either we timed out or we woke up, process events first</span></span><br><span class="line">                 <span class="comment">// 执行队列中的PollerEvent事件，注册读或写，</span></span><br><span class="line">                 <span class="comment">// hasEvents表示是否有读写事件注册</span></span><br><span class="line">                <span class="keyword">if</span> ( keyCount == <span class="number">0</span> ) hasEvents = (hasEvents | events());</span><br><span class="line"></span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator =</span><br><span class="line">                    keyCount &gt; <span class="number">0</span> ? selector.selectedKeys().iterator() : <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// Walk through the collection of ready keys and dispatch</span></span><br><span class="line">                <span class="comment">// any active event.</span></span><br><span class="line">                <span class="keyword">while</span> (iterator != <span class="keyword">null</span> &amp;&amp; iterator.hasNext()) &#123;</span><br><span class="line">                    SelectionKey sk = iterator.next();</span><br><span class="line">                    NioSocketWrapper attachment = (NioSocketWrapper)sk.attachment();</span><br><span class="line">                    <span class="comment">// Attachment may be null if another thread has called</span></span><br><span class="line">                    <span class="comment">// cancelledKey()</span></span><br><span class="line">                    <span class="keyword">if</span> (attachment == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        iterator.remove();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        iterator.remove();</span><br><span class="line">                        <span class="comment">// 将sk和attachtment包装，交由后续线程继续处理</span></span><br><span class="line">                        processKey(sk, attachment);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="comment">//while</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//process timeouts</span></span><br><span class="line">                timeout(keyCount,hasEvents);</span><br><span class="line">            &#125;<span class="comment">//while</span></span><br><span class="line"></span><br><span class="line">            getStopLatch().countDown();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//在events()方法中，通过调用PollerEvent的run()方法将socket注册到selector中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">events</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">            PollerEvent pe = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 从队列中获得PollerEvent事件</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = events.size(); i &lt; size &amp;&amp; (pe = events.poll()) != <span class="keyword">null</span>; i++ ) &#123;</span><br><span class="line">                result = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 调用PollerEvent的run()方法执行事件注册</span></span><br><span class="line">                    pe.run();</span><br><span class="line">                    pe.reset();</span><br><span class="line">                    <span class="keyword">if</span> (running &amp;&amp; !paused) &#123;</span><br><span class="line">                        eventCache.push(pe);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> ( Throwable x ) &#123;</span><br><span class="line">                    log.error(<span class="string">""</span>,x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果是注册，则把socket注册到selector中</span></span><br><span class="line">            <span class="keyword">if</span> (interestOps == OP_REGISTER) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.getIOChannel().register(</span><br><span class="line">                            socket.getPoller().getSelector(), SelectionKey.OP_READ, socketWrapper);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception x) &#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">"endpoint.nio.registerFail"</span>), x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// The key was cancelled (e.g. due to socket closure)</span></span><br><span class="line">                        <span class="comment">// and removed from the selector while it was being</span></span><br><span class="line">                        <span class="comment">// processed. Count down the connections at this point</span></span><br><span class="line">                        <span class="comment">// since it won't have been counted down when the socket</span></span><br><span class="line">                        <span class="comment">// closed.</span></span><br><span class="line">                        socket.socketWrapper.getEndpoint().countDownConnection();</span><br><span class="line">                        ((NioSocketWrapper) socket.socketWrapper).closed = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">final</span> NioSocketWrapper socketWrapper = (NioSocketWrapper) key.attachment();</span><br><span class="line">                        <span class="keyword">if</span> (socketWrapper != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">//we are registering the key to start with, reset the fairness counter.</span></span><br><span class="line">                            <span class="keyword">int</span> ops = key.interestOps() | interestOps;</span><br><span class="line">                            socketWrapper.interestOps(ops);</span><br><span class="line">                            key.interestOps(ops);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            socket.getPoller().cancelledKey(key);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (CancelledKeyException ckx) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        socket.getPoller().cancelledKey(key);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception ignore) &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//processKey()方法处理准备完毕的事件</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processKey</span><span class="params">(SelectionKey sk, NioSocketWrapper attachment)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 如果close，则取消sk</span></span><br><span class="line">                <span class="keyword">if</span> ( close ) &#123;</span><br><span class="line">                    cancelledKey(sk);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( sk.isValid() &amp;&amp; attachment != <span class="keyword">null</span> ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sk.isReadable() || sk.isWritable() ) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ( attachment.getSendfileData() != <span class="keyword">null</span> ) &#123;</span><br><span class="line">                            <span class="comment">// 处理文件</span></span><br><span class="line">                            processSendfile(sk,attachment, <span class="keyword">false</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            unreg(sk, attachment, sk.readyOps());</span><br><span class="line">                            <span class="keyword">boolean</span> closeSocket = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="comment">// Read goes before write</span></span><br><span class="line">                            <span class="keyword">if</span> (sk.isReadable()) &#123;<span class="comment">// 处理可读</span></span><br><span class="line">                                <span class="keyword">if</span> (!processSocket(attachment, SocketEvent.OPEN_READ, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                                    closeSocket = <span class="keyword">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (!closeSocket &amp;&amp; sk.isWritable()) &#123; <span class="comment">//处理可写</span></span><br><span class="line">                                <span class="keyword">if</span> (!processSocket(attachment, SocketEvent.OPEN_WRITE, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                                    closeSocket = <span class="keyword">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (closeSocket) &#123;</span><br><span class="line">                                cancelledKey(sk);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//invalid key</span></span><br><span class="line">                    cancelledKey(sk);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> ( CancelledKeyException ckx ) &#123;</span><br><span class="line">                cancelledKey(sk);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                log.error(<span class="string">""</span>,t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将selectionKey包装为SocketProcessor </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processSocket</span><span class="params">(SocketWrapperBase&lt;S&gt; socketWrapper,</span></span></span><br><span class="line"><span class="function"><span class="params">            SocketEvent event, <span class="keyword">boolean</span> dispatch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (socketWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            SocketProcessorBase&lt;S&gt; sc = processorCache.pop();</span><br><span class="line">            <span class="keyword">if</span> (sc == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sc = createSocketProcessor(socketWrapper, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sc.reset(socketWrapper, event);</span><br><span class="line">            &#125;</span><br><span class="line">            Executor executor = getExecutor();</span><br><span class="line">            <span class="keyword">if</span> (dispatch &amp;&amp; executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 交给线程池处理或直接运行</span></span><br><span class="line">                executor.execute(sc);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sc.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RejectedExecutionException ree) &#123;</span><br><span class="line">            getLog().warn(sm.getString(<span class="string">"endpoint.executor.fail"</span>, socketWrapper) , ree);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            <span class="comment">// This means we got an OOM or similar creating a thread, or that</span></span><br><span class="line">            <span class="comment">// the pool and its queue are full</span></span><br><span class="line">            getLog().error(sm.getString(<span class="string">"endpoint.process.fail"</span>), t);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190827095247.png" alt></p><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190827095432.png" alt></p><h4 id="LifeCycle接口"><a href="#LifeCycle接口" class="headerlink" title="LifeCycle接口"></a>LifeCycle接口</h4><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190821095719.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solr配置总结</title>
      <link href="/2019/03/24/solr%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/24/solr%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>solr版本：4.10.4</p><p>tomcat7</p><p>jdk8</p><a id="more"></a><h4 id="solr文件内容介绍"><a href="#solr文件内容介绍" class="headerlink" title="solr文件内容介绍"></a>solr文件内容介绍</h4><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190324213537.png" alt></p><p>bin：solr的运行脚本</p><p>contrib：solr的一些扩展jar包，用于增强solr的功能。</p><p>dist：该目录包含build过程中产生的war和jar文件，以及相关的依赖文件。</p><p>docs：solr的API文档</p><p>example：solr工程的例子目录：</p><p>l  example/solr：</p><p>​           该目录是一个标准的SolrHome，它包含一个默认的SolrCore</p><p>l  example/multicore：</p><p>​           该目录包含了在Solr的multicore中设置的多个Core目录。</p><p>l  example/webapps：</p><p>​    该目录中包括一个solr.war，该war可作为solr的运行实例工程。</p><p>licenses：solr相关的一些许可信息</p><h4 id="SolrCore配置"><a href="#SolrCore配置" class="headerlink" title="SolrCore配置"></a>SolrCore配置</h4><ul><li><p>SolrHome是Solr服务运行的主目录，该目录中包括了多个SolrCore目录。SolrCore目录中包含了运行Solr实例所有的配置文件和数据文件，Solr实例就是SolrCore。</p><p>每个SolrCore提供单独的搜索和索引服务。</p></li></ul><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190324214216.png" alt></p><p><img src="/Users/haominglfs/Library/Application Support/typora-user-images/image-20190324214249343.png" alt="image-20190324214249343"></p><ul><li>创建SolrCore</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue学习</title>
      <link href="/2019/03/18/vue%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/03/18/vue%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="mvvm"><a href="#mvvm" class="headerlink" title="mvvm"></a>mvvm</h4><ul><li><p>Model   模型，数据对象(data)</p></li><li><p>view  视图模板页面</p></li><li><p>viewModel   视图模型(vue的实例)</p><a id="more"></a></li></ul><h4 id="表达式和指令"><a href="#表达式和指令" class="headerlink" title="表达式和指令"></a>表达式和指令</h4><ol><li><p>“Mustache”语法 (双大括号) 的文本插值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Mustache 语法不能作用在 HTML 特性上，遇到这种情况应该使用 v-bind 指令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"dynamicId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">"dynamicId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="comment">&lt;!--简写形式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在布尔特性的情况下，它们的存在即暗示为true--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">"isButtonDisabled"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用js表达式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</span><br><span class="line">&#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"'list-' + id"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>事件绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修饰符  .prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--传参 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething('abc')"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="计算属性和监视"><a href="#计算属性和监视" class="headerlink" title="计算属性和监视"></a>计算属性和监视</h4><ol><li><p>计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Hello'</span>,</span><br><span class="line">    lastName:<span class="string">'123'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 计算属性的 getter 方法的返回值作为属性值</span></span><br><span class="line">    <span class="comment">//什么时候执行：初始化显示、相关data属性发生改变</span></span><br><span class="line">    fullName() &#123;</span><br><span class="line">      <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName +<span class="string">' '</span>+ lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//计算属性的 setter</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="comment">// getter  读取当前属性值时根据相关的数据回调</span></span><br><span class="line">    <span class="comment">//计算属性存在缓存</span></span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter  当属性值发送改变时回调</span></span><br><span class="line">    <span class="keyword">set</span>: function (newValue) &#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>)</span><br><span class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>监视</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Foo'</span>,</span><br><span class="line">    lastName: <span class="string">'Bar'</span>,</span><br><span class="line">    fullName: <span class="string">'Foo Bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = val + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">' '</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>class与style绑定</p><ul><li><p>class绑定  class=’xxx’</p><p>xxx 字符串 </p><p>xxx 对象  （用的比较多）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>xxx 数组</p></li><li><p>style绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeColor: <span class="string">'red'</span>,</span><br><span class="line">  fontSize: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>条件渲染</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx笔记</title>
      <link href="/2019/03/06/nginx%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/06/nginx%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200503165259.png" style="zoom:100%;"></p><a id="more"></a><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">linux安装</span></span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200627102442.png" alt></p><h4 id="基本参数使用"><a href="#基本参数使用" class="headerlink" title="基本参数使用"></a>基本参数使用</h4><h5 id="安装路径"><a href="#安装路径" class="headerlink" title="安装路径"></a>安装路径</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql nginx   #查看安装路径</span><br><span class="line">nginx -t -c nginx.conf #检查配置文件</span><br><span class="line">nginx -s reload  -c nginx.conf #使配置文件生效</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20191121230659.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/etc/logrotate.d/nginx  nginx日志轮转，用于logrotate服务的日志切割</span><br><span class="line"></span><br><span class="line">/etc/nginx</span><br><span class="line">/etc/nginx/nginx.conf</span><br><span class="line">/etc/nginx/conf.d</span><br><span class="line">/etc/nginx/conf.d/default.conf  nginx 配置文件</span><br><span class="line"></span><br><span class="line">/etc/nginx/fastcgi_params</span><br><span class="line">/etc/nginx/scgi_params</span><br><span class="line">/etc/nginx/uwsgi_params  cgi配置</span><br><span class="line"></span><br><span class="line">/etc/nginx/koi-utf</span><br><span class="line">/etc/nginx/koi-win</span><br><span class="line">/etc/nginx/win-utf  编码转换映射转化文件</span><br><span class="line"></span><br><span class="line">/etc/nginx/mime.types 设置http协议的Content-Type 与扩展名对应关系</span><br><span class="line"></span><br><span class="line">/etc/sysconfig/nginx</span><br><span class="line">/etc/sysconfig/nginx-debug</span><br><span class="line">/usr/lib/systemd/system/nginx-debug.service</span><br><span class="line">/usr/lib/systemd/system/nginx.service       配置系统守护进程管理器管理方式</span><br><span class="line"></span><br><span class="line">/etc/nginx/modules</span><br><span class="line">/usr/lib64/nginx/modules   模块目录</span><br><span class="line"></span><br><span class="line">/usr/sbin/nginx</span><br><span class="line">/usr/sbin/nginx-debug    启动管理终端命令</span><br><span class="line"></span><br><span class="line">/usr/share/doc/nginx-1.16.1</span><br><span class="line">/usr/share/doc/nginx-1.16.1/COPYRIGHT</span><br><span class="line">/usr/share/man/man8/nginx.8.gz    手册和帮助文件</span><br><span class="line"></span><br><span class="line">/var/cache/nginx   开启缓存后的缓存目录</span><br><span class="line"></span><br><span class="line">/var/log/nginx   日志目录</span><br></pre></td></tr></table></figure><h5 id="编译参数"><a href="#编译参数" class="headerlink" title="编译参数"></a>编译参数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br><span class="line"></span><br><span class="line">--prefix=/etc/nginx </span><br><span class="line">--sbin-path=/usr/sbin/nginx </span><br><span class="line">--modules-path=/usr/lib64/nginx/modules </span><br><span class="line">--conf-path=/etc/nginx/nginx.conf </span><br><span class="line">--error-log-path=/var/log/nginx/error.log </span><br><span class="line">--http-log-path=/var/log/nginx/access.log </span><br><span class="line">--pid-path=/var/run/nginx.pid </span><br><span class="line">--lock-path=/var/run/nginx.lock    安装路径</span><br><span class="line"></span><br><span class="line">--http-client-body-temp-path=/var/cache/nginx/client_temp </span><br><span class="line">--http-proxy-temp-path=/var/cache/nginx/proxy_temp </span><br><span class="line">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp </span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp </span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp     执行对应模块时，nginx所保留的临时性文件</span><br><span class="line"></span><br><span class="line">--user=nginx </span><br><span class="line">--group=nginx   设定nginx进程启动的用户和用户组</span><br><span class="line"></span><br><span class="line">--with-cc-opt   gcc编译的额外参数</span><br><span class="line">--with-ld-opt   设置附加参数，链接系统库</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><h6 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置nginx服务的系统使用用户</span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果希望所有用户都可以启动Nginx进程，有两种办法：一是将此指令行注释掉;一种是设置为nobody</span></span><br><span class="line"><span class="meta">#</span><span class="bash">user nobody nobody</span></span><br><span class="line">user  nginx;  </span><br><span class="line"><span class="meta">#</span><span class="bash">工作进程数,从理论上来说，worker process的值越大，可以支持的并发处理量也越多</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> worker_processes number | auto(自动检测)</span></span><br><span class="line">worker_processes  1;  </span><br><span class="line"><span class="meta">#</span><span class="bash">错误日志</span></span><br><span class="line"><span class="meta">#</span><span class="bash">error_log file | stderr [debug | info | notice ｜warn｜ error|crit｜ alert | emerg];</span></span><br><span class="line">error_log  /var/log/nginx/error.log warn;  </span><br><span class="line"><span class="meta">#</span><span class="bash">服务启动时pid</span></span><br><span class="line">pid        /var/run/nginx.pid;   </span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line"><span class="meta">#</span><span class="bash">在《UNIX网络编程》第1卷里提到过一个叫“惊群”的问题（Thundering herd problem），大致意思是，当某一时刻只有一个网络连接到来时，多个睡眠进程会被同时叫醒，但只有一个进程可获得连接。如果每次唤醒的进程数目太多，会影响一部分系统性能。在Nginx服务器的多进程下，就有可能出现这样的问题。为了解决这样的问题，Nginx配置中包含了这样一条指令accept_mutex，当其设置为开启的时候，将会对多个Nginx进程接收连接进行序列化，防止多个进程对连接的争抢</span></span><br><span class="line">accept mutex on | off;</span><br><span class="line"><span class="meta">#</span><span class="bash">每个Nginx服务器的worker process都有能力同时接收多个新到达的网络连接，但是这需要在配置文件中进行设置</span></span><br><span class="line">multi_accept on | off;</span><br><span class="line"><span class="meta">#</span><span class="bash">Nginx服务器提供了多种事件驱动模型来处理网络消息其中，method可选择的内容有：select、poll、kqueue、epoll、rtsig、/dev/poll以及eventport</span></span><br><span class="line">use method;</span><br><span class="line"><span class="meta">#</span><span class="bash">每个进程允许的最大连接数</span></span><br><span class="line">    worker_connections  1024; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">http模块</span></span><br><span class="line">location /img/ &#123;</span><br><span class="line">    alias /var/www/image/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">若按照上述配置的话，则访问/img/目录里面的文件时，ningx会自动去/var/www/image/目录找文件</span></span><br><span class="line">location /img/ &#123;</span><br><span class="line">    root /var/www/image;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">若按照这种配置的话，则访问/img/目录下的文件时，nginx会去/var/www/image/img/目录下找文件。</span></span><br><span class="line">alias是一个目录别名的定义，root则是最上层目录的定义。</span><br><span class="line">一直以为root是指的/var/www/image目录下，应该 是 /var/www/image/img/ </span><br><span class="line">还有一个重要的区别是alias后面必须要用“/”结束，否则会找不到文件的。。。而root则可有可无</span><br><span class="line">可以是绝对目录，也可以是相对目录(相对于nginx的安装目录)</span><br><span class="line"></span><br><span class="line">uri解析</span><br><span class="line">=  精确匹配,如果已经匹配成功，就停止继续向下搜索并立即处理此请求</span><br><span class="line">^～ 匹配以某个uri开头的请求，不支持正则表达式</span><br><span class="line"><span class="meta">#</span><span class="bash">如果uri包含正则表达式，就必须要使用“～”或者“～*”标识。</span></span><br><span class="line">～ 用于表示uri包含正则表达式，并且区分大小写。</span><br><span class="line">～* 用于表示uri包含正则表达式，并且不区分大小写。</span><br></pre></td></tr></table></figure><h5 id="nginx变量"><a href="#nginx变量" class="headerlink" title="nginx变量"></a>nginx变量</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.http请求变量</span><br><span class="line">arg_PARAMETER  #请求参数</span><br><span class="line">http_HEADER    #请求头</span><br><span class="line">sent_http_HEADER #响应头</span><br><span class="line">2.内置变量</span><br><span class="line">3.自定义变量</span><br></pre></td></tr></table></figure><h4 id="nginx模块"><a href="#nginx模块" class="headerlink" title="nginx模块"></a>nginx模块</h4><h5 id="nginx官方模块"><a href="#nginx官方模块" class="headerlink" title="nginx官方模块"></a>nginx官方模块</h5><ol><li><p>http_stub_status_module nginx的客户端状态</p></li><li><p>http_random_index_module  目录中随机选择一个主页</p></li><li><p>http_sub_module  http内容替换</p></li><li><p>limit_conn_module   连接频率限制</p></li><li><p>limit_req_module  请求频率限制</p></li><li><p>http_access_module  基于ip的访问控制</p><p>局限性：如果中间有代理的话，使用$remote_addr 就会不准确</p><p>方法：</p><ul><li>采用别的http头信息控制，如HTTP_X_FORWARD_FOR</li><li>结合geo模块</li><li>通过http自定义变量传递</li></ul></li><li><p>http_auth_basic_module 基于用户的信任登录</p><p>局限：</p><ul><li>用户信息依赖文件方式</li><li>操作管理机械，效率低下</li></ul><p>解决方案：</p><ul><li>结合lua</li><li>Nginx和ldap打通，利用nginx-auth-ldap模块</li></ul></li></ol><h5 id="nginx第三方模块"><a href="#nginx第三方模块" class="headerlink" title="nginx第三方模块"></a>nginx第三方模块</h5><h4 id="nginx静态服务器"><a href="#nginx静态服务器" class="headerlink" title="nginx静态服务器"></a>nginx静态服务器</h4><p>文件读取：sendfile</p><p>tcp_nopush  sendfile 开启的情况下，提高网络包的传输效率</p><p>tcp_nodelay  keepalive下，提高网络包的传输实时性</p><p>gzip  压缩</p><p>gzip_comp_level  压缩比</p><p>http_gzip_static_module    扩展压缩模块，预读gzip功能</p><p>跨域访问：Access-Control-Allow-</p><p>防盗链：http_referer   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">valid_referers none blocked 116.62.103.228</span><br><span class="line"><span class="meta">if($</span><span class="bash">valid_referers)&#123;</span></span><br><span class="line">return 403</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代理服务"><a href="#代理服务" class="headerlink" title="代理服务"></a>代理服务</h4><p>代理区别：代理的对象不一样</p><ol><li><p>正向代理代理的对象是客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resolver 8.8.8.8</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://$http_host$request_uri</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>反向代理代理的对象是服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">proxy_pass  http(https)://hostname:port/app</span><br><span class="line"><span class="meta">#</span><span class="bash">在使用该指令的过程中还要注意，URL中是否包含有URI，Nginx服务器的处理方式是不同的。如果URL中不包含URI，Nginx服务器不会改变原地址的URI；但是如果包含了URI，Nginx服务器将会使用新的URI替代原来的URI。我们举例来说明。例子如下</span></span><br><span class="line">server&#123;</span><br><span class="line">listen 80;</span><br><span class="line">server name www.myweb. name;</span><br><span class="line">location /server/</span><br><span class="line">    &#123;</span><br><span class="line">    proxy_pass http://192.168.1.1;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果客户端使用“http://www.myweb.name/server”发起请求，该请求被配置中显示的location块进行处理，由于proxy_pass指令的URL变量不含有URI，所以转向的地址为“http://192.168.1.1/server”</span></span><br><span class="line">server&#123;</span><br><span class="line">listen 80;</span><br><span class="line">server name www.myweb. name;</span><br><span class="line">location /server/</span><br><span class="line">    &#123;</span><br><span class="line">    proxy_pass http://192.168.1.1/loc/;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">在该配置实例中，proxy_pass指令的URL包含了URI“/loc/”。如果客户端仍然使用“http://www. myweb.name/server/”发起请求，Nginx服务器将会把地址转向“http://192.168.1.1/loc/”</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">通过上面的实例，我们可以总结出，在使用proxy_pass指令时，如果不想改变原地址中的URI，就不要在URL变量中配置URI</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">明白了上面这两个例子的用法，我们来解释大家经常讨论的一个问题，就是proxy_pass指令的URL变量末尾是否加斜杠“/”的问题。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置1: proxy_pass http://192.168.1.1;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置2: proxy_pass http://192.168.1.1/;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置1和配置2的区别在于，配置2中proxy_pass指令的URL变量末尾添加了斜杠“/”，这意味着配置2中proxy_pass指令的URL变量包含了URI “/”，而配置1中proxy_pass指令的URL变量不包含URI。理解了这一点，我们就可以解释下面的实例和现象了。大家注意各例子之间的对比。</span></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">listen 80;</span><br><span class="line">server name www.myweb. name;</span><br><span class="line">location /  #注意location的uri变量</span><br><span class="line">  &#123;</span><br><span class="line">    #配置1: proxy_pass http://192.168.1.1;</span><br><span class="line">    #配置2: proxy_pass http://192.168.1.1/;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">在该配置中，location块使用“/”作为uri变量的值来匹配不包含URI的请求URL。由于请求URL中不包含URI，因此配置1和配置2的效果是一样的。比如，客户端的请求URL为“http://www.myweb.name/index.htm”，其将会被实例1中的location块匹配成功并进行处理。不管使用配置1还是配置2，转向的URL都为：“http://192.168.1.1/index.htm”</span></span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">listen 80;</span><br><span class="line">server name www.myweb. name;</span><br><span class="line">location /server/  #注意location的uri变量</span><br><span class="line">  &#123;</span><br><span class="line">    #配置1: proxy_pass http://192.168.1.1;</span><br><span class="line">    #配置2: proxy_pass http://192.168.1.1/;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta"> #</span><span class="bash">在该配置中，location块使用“/server/”作为uri变量的值来匹配包含URI “/server/”的请求URL。这时，使用配置1和配置2的转向结果就不相同了。使用配置1的时候，proxy_pass指令中的URL变量不包含URI，Nginx服务器将不改变原地址的URI；使用配置2的时候，proxy_pass指令中的URL变量包含URI “/”，Nginx服务器会将原地址的URI替换为“/”。</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">比如，客户端的请求URL为“http://www.myweb.name/server/index.htm”，将会被实例2中的location块匹配成功并进行处理。使用配置1的时候，转向的URL为“http://192.168.1.1/server/index.htm”，原地址的URI “/server/”未被改变；但使用配置2时，转向的URL为“http://192.168.1.1/index.htm”，可以看到，原地址的URI “/server/”被替换为“/”。</span></span><br></pre></td></tr></table></figure></li><li><p>补充：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">proxy_buffering  #缓冲区</span><br><span class="line">proxy_redirect   #跳转重定向</span><br><span class="line">proxy_set_header field value  #设置请求头</span><br><span class="line">proxy_connect_timeout time    #连接超时时间</span><br><span class="line">proxy_read_timeout #读超时</span><br><span class="line">proxy_send_timeout#发送给客户端超时</span><br></pre></td></tr></table></figure></li><li><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20191129102658.png" alt></p></li></ol><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">upstream name&#123;</span><br><span class="line">server  http://ip:port/app  server状态</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">server 状态</span></span><br><span class="line">down #当前的server暂时不参与负载均衡</span><br><span class="line">backup #预留的备份服务器</span><br><span class="line">max_fails #允许请求失败的次数</span><br><span class="line">fail_timeout #经过max_fails 失败后，服务暂停的时间</span><br><span class="line">max_conns #限制最大接收的连接数</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">调度算法</span></span><br><span class="line">轮询：按时间顺序逐一分配到不同的后端服务器</span><br><span class="line">加权轮询：weight值越大，分配到的访问几率越高</span><br><span class="line">ip_hash： 每个请求按访问ip的hash结果分配，这样来自同一个ip的固定访问一个后端服务器</span><br><span class="line">url_hash: 按照访问的url的hash结果来分配请求，每个url定向到同一个后端服务器  hash $request_uri</span><br><span class="line">least_conn：最少连接数，那个机器连接数少就分发</span><br><span class="line">hash关键数值: hash自定义的key</span><br></pre></td></tr></table></figure><h4 id="缓存服务"><a href="#缓存服务" class="headerlink" title="缓存服务"></a>缓存服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path  #缓存路径</span><br><span class="line">levels=1:2</span><br><span class="line">keys_zone=缓存名称:缓存大小</span><br><span class="line">max_size=10g  #缓存最大空间</span><br><span class="line">inactive=60m  #如果60分钟未使用，则会淘汰</span><br><span class="line">use_temp_path=off #临时目录(建议关闭)</span><br></pre></td></tr></table></figure><h4 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h4><ol><li><p>rewrite</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rewrite regex replacement [flag]</span><br><span class="line">flag:</span><br><span class="line">last #停止rewirte监测    (进入location后会重新请求一次)</span><br><span class="line">break #停止rewirte监测  （进入location后不会出来）</span><br><span class="line">redirect #返回302临时重定向，地址栏会显示跳转后的地址</span><br><span class="line">permanent #返回301永久重定向，地址栏会显示跳转后的地址  (只发送一次请求，浏览器会记住重定向的地址，以后的请求不会再请求后端服务)</span><br><span class="line"></span><br><span class="line">优先级：</span><br><span class="line"><span class="meta">server&gt;</span><span class="bash">location</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络知识笔记</title>
      <link href="/2019/03/02/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/02/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ol><li>网络层的四个协议<ol><li>ARP</li><li>IP<ul><li>0-126  A类地址</li><li>128-191 B类地址</li><li>192-223 C类地址</li><li>127.0.0.1 本地回环地址</li><li>保留的私网地址<ul><li>10.0.0.0</li><li>172.16.0.0–172.31.0.0</li><li>192.168.0.0–192.168.255.0</li></ul></li></ul></li><li>ICMP</li><li>IGMP</li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载器-classLoader</title>
      <link href="/2019/02/26/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8-classLoader/"/>
      <url>/2019/02/26/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8-classLoader/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker配置</title>
      <link href="/2019/02/25/docker%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/02/25/docker%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="docker开机启动"><a href="#docker开机启动" class="headerlink" title="docker开机启动"></a>docker开机启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker.service</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="docker-compose开机启动容器"><a href="#docker-compose开机启动容器" class="headerlink" title="docker-compose开机启动容器"></a>docker-compose开机启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rc.d/rc.local</span><br><span class="line">/usr/local/bin/docker-compose -f /www/docker/trace_fecshop/docker-compose.yml up -d</span><br><span class="line"><span class="meta">#</span><span class="bash">/www/docker/trace_fecshop 是你的docker-compose的目录</span></span><br></pre></td></tr></table></figure><h4 id="docker-compose-volumes说明"><a href="#docker-compose-volumes说明" class="headerlink" title="docker-compose-volumes说明"></a>docker-compose-volumes说明</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker-compose里两种设置方式都是可以持久化的</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第一种情况路径直接挂载到本地，比较直观，但需要管理本地的路径，而第二种使用卷标的方式，比较简洁，但你不知道<span class="comment">#数据存在本地什么位置，下面说明如何查看docker的卷标</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">1.</span></span><br><span class="line">ghost:  </span><br><span class="line">  image: ghost</span><br><span class="line">  volumes:</span><br><span class="line">    - ./ghost/config.js:/var/lib/ghost/config.js  #yml文件所在路径</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash">2.卷标</span></span><br><span class="line">services:</span><br><span class="line"> mysql:  </span><br><span class="line">  image: mysql</span><br><span class="line">  container_name: mysql</span><br><span class="line">  volumes:</span><br><span class="line">    - mysql:/var/lib/mysql</span><br><span class="line">...</span><br><span class="line">volumes:</span><br><span class="line"> mysql:</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">查看所有卷标</span></span><br><span class="line">docker volume ls </span><br><span class="line"><span class="meta">#</span><span class="bash">查看具体的volume对应的真实地址</span></span><br><span class="line">docker volume inspect vagrant_mysql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos7无法连接wifi</title>
      <link href="/2019/02/25/centos7%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5wifi/"/>
      <url>/2019/02/25/centos7%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5wifi/</url>
      
        <content type="html"><![CDATA[<p>今天在联想笔记本安装centos7,安装完成后无法连接wifi，最后发现是联想电脑的问题，以下为解决方法：</p><h3 id="解决方法：把影响无线wifi开关的ideapad-laptop加入黑名单"><a href="#解决方法：把影响无线wifi开关的ideapad-laptop加入黑名单" class="headerlink" title="解决方法：把影响无线wifi开关的ideapad_laptop加入黑名单"></a>解决方法：把影响无线wifi开关的ideapad_laptop加入黑名单</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/modprobe.d/ideapad.conf</span><br><span class="line">文件内容：blacklist ideapad_laptop</span><br><span class="line"><span class="meta">#</span><span class="bash">保存并关闭后再执行</span></span><br><span class="line">sudo modprobe -r ideapad_laptop</span><br><span class="line"><span class="meta">#</span><span class="bash">重启之后，wifi就可以使用了。</span></span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询内核日志，查看是否需要安装无线网卡的固件</span></span><br><span class="line">dmesg | grep firmware</span><br><span class="line"><span class="meta">#</span><span class="bash"> 正常：iwlwifi loaded firmware version ....</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 错误：IOCSIFFLAGS: No such file or directory，此时需要安装固件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 错误：firmware: requesting iwlwifi-5000-1.ucode</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装firmware，需要查看网卡型号，先安装工具</span></span><br><span class="line">yum -y install pciutils*</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看无线网卡型号</span></span><br><span class="line">lspci</span><br><span class="line"><span class="meta">#</span><span class="bash"> Ethernet controller: Realtek Semiconductor Co., Ltd. .....有线网卡</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  Intel Corporation Dual Band Wireless-AC 3165.......无线网卡</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找并安装</span></span><br><span class="line">yum list | grep "3165"</span><br><span class="line">yum -y install iwl3945-firmware</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装配置工具，安装net-tools后，可以使用ifconfig</span></span><br><span class="line">yum install iw</span><br><span class="line">yum install wpa_supplicant</span><br><span class="line">yum install net-tools</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看无线网接口</span></span><br><span class="line">iw dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> interface wlp3s0  ... addr ... <span class="built_in">type</span>...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 有channel 1 (2412 MHz)....表示已连接</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看接口连接信息</span></span><br><span class="line">iw wlp3s0 link</span><br><span class="line"><span class="meta">#</span><span class="bash"> Not connectted.   未连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Connected to ...  SSID:<span class="built_in">test</span>... 已连接</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看网络接口/网卡状态</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注：未连接wifi前，/etc/sysconfig/network-scripts没有发现wlp3s0的配置，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接成功之后，出现同wifi的SSID相同名称的配置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看网络接口/网卡状态</span></span><br><span class="line">ip addr     # 会显示已获取的IP</span><br><span class="line">ip link     # 显示网卡</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用/禁用wlp3s0接口，两种方法等同。up时需要数秒</span></span><br><span class="line">ifconfig wlp3s0 up/down     # ping提示：connect: Network is unreachable</span><br><span class="line">ip link set dev wlp3s0 up/down  # ping提示：Name or service not known</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rfkill list  #查看是否无线卡被锁住</span><br><span class="line">sudo modprobe -r ideapad-laptop</span><br><span class="line">sudo rfkill unblock all</span><br></pre></td></tr></table></figure><h3 id="nmcli使用"><a href="#nmcli使用" class="headerlink" title="nmcli使用"></a>nmcli使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nmcli device wifi //扫描</span><br><span class="line">//连接 WIFI 网络</span><br><span class="line">nmcli dev wifi con "wifi name" password "wifi password"</span><br><span class="line">// 查看所有连接</span><br><span class="line">// nmcli con show // 查看所有连接</span><br><span class="line">// nmcli con show -a // 活动的连接 --active</span><br><span class="line">// nmcli con show tun0 // 详细信息</span><br></pre></td></tr></table></figure><p><img src="/Users/haominglfs/Library/Application Support/typora-user-images/image-20190225154410713.png" alt="image-20190225154410713"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node.js</title>
      <link href="/2019/02/13/node-js/"/>
      <url>/2019/02/13/node-js/</url>
      
        <content type="html"><![CDATA[<h3 id="node知识点"><a href="#node知识点" class="headerlink" title="node知识点"></a>node知识点</h3><ol><li><p>console</p></li><li><p>__dirname  当前文件所在的目录。</p></li><li><p>__filename  文件的全路径。</p></li><li><p>eventLoop</p></li><li><p>宏任务、微任务</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//宏任务  主体script  setTimeout  setInterval (new Promise)</span></span><br><span class="line"><span class="comment">//微任务  Promise.then  process.nextTick()</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//宏任务</span></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"promise"</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//微任务</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"then"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//宏任务</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">//宏任务</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">222</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>模块化（commonjs规范）</p><ul><li><p>一个文件就是一个独立的模块。每个模块都有自己的独立作用域—模块作用域</p></li><li><p>模块加载采用同步模式。</p></li><li><p>通过require导入,exports导出。module.exports == exports  返回true,但是使用上有一定的注意事项：</p></li><li><p>每一个模块中都有一个内置的对象：module,该对象包括当前模块文件的一些信息</p><ul><li>id   当前模块的唯一标识，默认id为当前文件的绝对路径</li><li>filename 当前模块的文件</li><li>parent</li><li>children</li><li>loaded</li><li>paths</li></ul></li><li><p>模块类型</p><ul><li><p>文件</p></li><li><p>文件夹</p><p>当我们导入的模块是一个文件夹的时候，就会引入文件夹模块导入机制：1.读取该文件夹下的package.json文件。2.导入文件中main选项指定的文件。3.如果不存在，则导入文件夹下的index.js。</p><ul><li><p>node_modules文件夹：如果我们的模块在node_modules目录下(一般用于第三方库)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let m2 = require('./node_modules/m2')</span></span><br><span class="line"><span class="keyword">let</span> m2 = <span class="built_in">require</span>(<span class="string">'m2'</span>)<span class="comment">//和上面的效果一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果模块的加载是以./ ../ /开头的，就是路径模块加载模式</span></span><br><span class="line"><span class="comment">//不以./ ../ /开头的，按照另外一种加载机制，非路径加载模式，按照以下规则查找：</span></span><br><span class="line"><span class="comment">//在module对象有一个属性paths,里面保存的是非路径模式下的查找列表。</span></span><br><span class="line">paths:</span><br><span class="line">   [ <span class="string">'/Users/haominglfs/Documents/es6/node_modules'</span>,</span><br><span class="line">     <span class="string">'/Users/haominglfs/Documents/node_modules'</span>,</span><br><span class="line">     <span class="string">'/Users/haominglfs/node_modules'</span>,</span><br><span class="line">     <span class="string">'/Users/node_modules'</span>,</span><br><span class="line">     <span class="string">'/node_modules'</span> ]</span><br></pre></td></tr></table></figure></li><li><p>global 文件夹:所有项目都可以使用的模块,在node安装目录下node_modules文件夹。</p></li></ul></li><li><p>核心模块：node内置模块:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">//如果自己定义的模块和核心模块冲突，则默认加载核心模块。</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>模块文件后缀处理机制：</p><p>.js&gt;.json&gt;.node</p></li><li><p>es6模块化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//每个模块只能存在一个default</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="number">100</span></span><br><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./m1'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">'./m1'</span></span><br><span class="line"><span class="comment">//导入默认,直接赋值</span></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'./m1'</span></span><br></pre></td></tr></table></figure></li><li><p>内置对象</p><ul><li><p>events</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> eventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">eventEmitter</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.growup();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    growup()&#123;</span><br><span class="line">        setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.age++;</span><br><span class="line">            <span class="keyword">this</span>.emit(<span class="string">'growup'</span>) <span class="comment">//触发事件</span></span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person(<span class="string">'郝明'</span>);</span><br><span class="line"></span><br><span class="line">p1.addListener(<span class="string">'growup'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//注册监听器</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'growup 1'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.eventNames())</span><br></pre></td></tr></table></figure></li><li><p>process(全局对象，不需要引入)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//process.argv 属性返回一个数组，其中包含当启动 Node.js 进程时传入的命令行参数。</span></span><br><span class="line"><span class="built_in">console</span>.log(process.argv)</span><br><span class="line"></span><br><span class="line"><span class="comment">//环境变量</span></span><br><span class="line"><span class="built_in">console</span>.log(process.env)</span><br><span class="line"></span><br><span class="line"><span class="comment">//标准输入输出</span></span><br><span class="line">process.stdout.write(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">process.stdin.on(<span class="string">'data'</span>,(e)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用户输入'</span>+e.toString())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>stream</p><ul><li>四种基本类型<ul><li>Writable  可写入数据的流。 fs.createWriteStream()</li><li>Readable 可读取数据的流。 fs.createReadStream()</li><li>Duplex  可读又可写的流。 Net.Socket()</li><li>Transform 在读写过程中可以修改后转换</li></ul></li></ul></li><li><p>buffer</p></li></ul></li><li><p>filesystem</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">//First Error :node 中的一种约定，如果一个回调可能有错误发生，那么约定回调函数的第一个参数用来做//错误对象</span></span><br><span class="line"><span class="comment">// fs.writeFile('./1.txt','你好我好',(err)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     if(err) throw err</span></span><br><span class="line"><span class="comment">//     console.log('文件已保存')</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let res = fs.writeFileSync('./2.txt','你好','utf8')</span></span><br><span class="line"><span class="comment">// console.log(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回buffer</span></span><br><span class="line">fs.readFile(<span class="string">'./1.txt'</span>,(err,data)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> content = fs.readFileSync(<span class="string">'./2.txt'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> st = fs.statSync(<span class="string">'./1.txt'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(st)</span><br><span class="line">    <span class="built_in">console</span>.log(st.isFile())</span><br><span class="line">    <span class="built_in">console</span>.log(st.isDirectory())</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="comment">//fs.unlinkSync('./1.txt')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文件夹</span></span><br><span class="line"><span class="comment">//fs.mkdirSync('./a')</span></span><br><span class="line"><span class="comment">//不能递归创建文件夹</span></span><br><span class="line"><span class="comment">//fs.mkdirSync('./a/b/c')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不能删除非空文件夹</span></span><br><span class="line">fs.rmdirSync(<span class="string">'./a'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dir = <span class="string">'./a'</span>;</span><br><span class="line"><span class="comment">// let files = fs.readdirSync(dir);</span></span><br><span class="line"><span class="comment">// files.forEach(child=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     fs.unlinkSync(dir+'/'+child);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">rmdir(dir)</span><br><span class="line"><span class="comment">//递归删除文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rmdir</span>(<span class="params">dirpath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> files = fs.readdirSync(dirpath);</span><br><span class="line">    files.forEach(<span class="function"><span class="params">child</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> childPath = dirpath+<span class="string">'/'</span>+child;</span><br><span class="line">        <span class="keyword">let</span> st = fs.statSync(childPath)</span><br><span class="line">        <span class="keyword">if</span>(st.isDirectory())&#123;</span><br><span class="line">            rmdir(childPath)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            fs.unlinkSync(childPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    fs.rmdirSync(dirpath)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听文件或目录</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">fs.watchFile(<span class="string">'./2.txt'</span>,(e)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>npm</p><ul><li>能不安装全局就不安装全局。</li><li>命令行工具(第三方模块)：<ul><li>commander</li><li>chalk</li><li>Inquirer</li></ul></li></ul></li></ol><p>​       </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>es6</title>
      <link href="/2019/02/07/es6/"/>
      <url>/2019/02/07/es6/</url>
      
        <content type="html"><![CDATA[<ul><li><p>数据类型</p><p>Number、Boolean、String、<strong>Symbol</strong>、Null、Undefined、Object</p><p>Symbol:es6新增数据类型-基本类型，值是由Symbol函数调用产生的</p><a id="more"></a></li><li><p>作用域</p><p>let、const</p></li><li><p>解构赋值</p><ul><li><p>数组解构</p><p>let [a,b,c] = [1,2,3]</p></li><li><p>对象解构</p><p>let {foo,bar}  = {foo:”aaa”,bar:”bbb”};//左侧变量的名称解构顺序无关</p><p>let {foo:f,bar:b} = {foo:”aaa”,bar:”bbb”};//取别名</p><p>let {foo:[a,b]} = {foo:[10,20],bar:”bbb”}//多重解构</p></li></ul></li><li><p>扩展运算符  …</p><p>把数组、对象转成参数序列。</p><p>var arr = [1,7,3,6,5];</p><p>var arr2 = [‘a’,’b’,’c’];</p><p>Math.max(…arr);</p><p>var arr3 = […arr,…arr2];</p></li><li><p>模板字符串（保持格式、表达式解析）</p><p>反引号   ${}</p></li><li><p>对象简洁表示法</p><p>当对象的key与对应的属性所引用的变量或函数同名的时候，可以简写成一个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:a,</span><br><span class="line">    fn:fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简写方式</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:,</span><br><span class="line">    fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>属性名表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">'hh'</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    [x]:<span class="number">1</span>  <span class="comment">//key可以为动态的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>迭代</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> attrs = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> attrs)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(attr)  <span class="comment">// 0 1 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">of</span> attrs)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(attr)  <span class="comment">// a b c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">            left :<span class="number">100</span>,</span><br><span class="line">            top :<span class="number">200</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">obj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(obj) <span class="comment">//['left','top']</span></span><br><span class="line">    <span class="keyword">let</span> len = keys.length;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&lt;len)&#123;</span><br><span class="line">                <span class="keyword">return</span>&#123;</span><br><span class="line">                    value:&#123;<span class="attr">k</span>:keys[n],<span class="attr">v</span>:obj[keys[n++]]&#125;,</span><br><span class="line">                    done:<span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span>&#123;</span><br><span class="line">                    done:<span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> &#123;k,v&#125; <span class="keyword">of</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k,v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数扩展</p><ol><li><p>参数默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">x=<span class="number">0</span>,y=<span class="number">2</span></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>rest参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayPush</span>(<span class="params">arr,...newData</span>)</span>&#123;&#125;<span class="comment">//从第二个参数开始，后面的数据全部赋值给newData参数 newData是一个数组，剩余参数只能写在形参的最后面</span></span><br></pre></td></tr></table></figure></li><li><p>箭头函数</p><p>注意事项：</p><ul><li>内部this对象指向创建期上下文对象，在函数创建时就绑定好了。普通函数的this指向是在函数的执行期绑定的</li><li>不能作为构造函数，不能new</li><li>没有arguements</li><li>不能作为生成器函数</li></ul></li></ol></li><li><p>Array</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>].includes(<span class="string">'c'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//every  如果都为真，返回真，否则为假  做全选操作</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">19</span>]</span><br><span class="line"><span class="keyword">var</span> res = arr4.every(<span class="function"><span class="params">v</span>=&gt;</span>&#123;<span class="keyword">return</span> v&gt;<span class="number">5</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res)   <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//some  只要有一个为真，就为真</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">19</span>]</span><br><span class="line"><span class="keyword">var</span> res = arr4.some(<span class="function"><span class="params">v</span>=&gt;</span>&#123;<span class="keyword">return</span> v&gt;<span class="number">5</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//filter</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">19</span>]</span><br><span class="line"><span class="keyword">var</span> res = arr4.filter(<span class="function"><span class="params">v</span>=&gt;</span>&#123;<span class="keyword">return</span> v&gt;<span class="number">5</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res)  <span class="comment">//[8,19]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//map  映射</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">19</span>]</span><br><span class="line"><span class="keyword">var</span> res = arr4.map(<span class="function"><span class="params">v</span>=&gt;</span>&#123;<span class="keyword">return</span> v*<span class="number">5</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">//[5, 25, 40, 95]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//reduce 拆分  购物车计算总和</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">19</span>]</span><br><span class="line"><span class="keyword">var</span> res = arr4.reduce(<span class="function">(<span class="params">prev,current</span>)=&gt;</span>&#123;<span class="keyword">return</span> prev+current&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">//33</span></span><br></pre></td></tr></table></figure></li><li><p>Object</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只改变第一个参数，如果有相同的会覆盖第一个参数的值；浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="built_in">Object</span>.assign(&#123;&#125;,&#123;<span class="attr">x</span>:<span class="number">1</span>,<span class="attr">y</span>:<span class="number">12</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义属性  configurable/enumerable/writable 默认都为false</span></span><br><span class="line">obj4 = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;</span><br><span class="line">obj4.y = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj4,<span class="string">'z'</span>,&#123;<span class="attr">value</span>:<span class="number">88</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj4)</span><br></pre></td></tr></table></figure></li><li><p>集合</p><ol><li><p>weakMap</p><p>类似map,但是key必须是对象，特点是key是弱引用的，GC机制不考虑回收问题。</p></li></ol></li><li><p>异步</p><ol><li><p>promise</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise 构造函数，接受一个参数 callback,把要执行的异步任务放置在callback中</span></span><br><span class="line"><span class="comment">//promise内部会维护一个状态  默认是pending  成功：resolved   失败：rejected</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//当promise被实例化的时候，callback就会执行</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//可以通过传入的resolve,reject两个函数，去改变当前Promise任务的状态</span></span><br><span class="line">        <span class="comment">//调用resolve函数，把状态改成resolved.调用reject函数，把状态改成rejected</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//promise对象下有一个方法：then,该方法在promise状态发生改变时，触发then的回调</span></span><br><span class="line"></span><br><span class="line">        reject()</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//then会接受两个参数：这两个参数都是回调，当对应的promise对象的状态变成resolved,那么then的</span></span><br><span class="line"><span class="comment">//第一个callback就会被执行，如果状态变成了rejected,那么then的第二个callback就会被执行。</span></span><br><span class="line"><span class="comment">// let p2 =  p.then(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log("成功")</span></span><br><span class="line"><span class="comment">// &#125;,()=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log("失败")</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">//then执行后，无论执行的那个回调函数，都会返回一个新的成功状态的promise对象</span></span><br><span class="line">p.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"2"</span>)</span><br><span class="line">&#125;,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a"</span>)</span><br><span class="line">    <span class="comment">// return new Promise((resolve,reject)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//     reject()</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">//上面的简写</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"3"</span>)</span><br><span class="line">&#125;,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b"</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"4"</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//catch方法和then一样，也会返回一个resolved状态的promise对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'错了'</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"5"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ps1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//传递参数给then</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"1"</span>)</span><br><span class="line">        <span class="comment">//reject('出错了')</span></span><br><span class="line">        resolve(<span class="number">100</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ps2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//传递参数给then</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"1"</span>)</span><br><span class="line">        <span class="comment">//reject('出错了')</span></span><br><span class="line">        resolve(<span class="number">100</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="number">300</span>)</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//[]中放promise对象，都完成后执行then</span></span><br><span class="line"><span class="built_in">Promise</span>.all([ps1,ps2])</span><br><span class="line">    .then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)<span class="comment">//返回的data为所有执行结果的数组</span></span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//谁先跑完触发then,另一个不管了</span></span><br><span class="line"><span class="built_in">Promise</span>.race([])</span><br></pre></td></tr></table></figure></li><li><p>generator</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"1"</span>)</span><br><span class="line">    <span class="keyword">yield</span> getData();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">        f.next()</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回一个迭代器函数</span></span><br><span class="line"><span class="keyword">let</span> f = fn();</span><br><span class="line">f.next();</span><br></pre></td></tr></table></figure></li><li><p>async、await</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//resolve(100)</span></span><br><span class="line">        reject(<span class="string">'err'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">222</span>)</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> v = <span class="keyword">await</span> getData();</span><br><span class="line">        <span class="built_in">console</span>.log(v);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">333</span>)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>​     </p><p>​     </p><p>​     </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tomcat源码--启动脚本</title>
      <link href="/2019/02/03/tomcat%E6%BA%90%E7%A0%81-%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/02/03/tomcat%E6%BA%90%E7%A0%81-%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h4 id="startup-bat"><a href="#startup-bat" class="headerlink" title="startup.bat"></a>startup.bat</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">rem Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="line">rem contributor license agreements.  See the NOTICE file distributed with</span><br><span class="line">rem this work for additional information regarding copyright ownership.</span><br><span class="line">rem The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="line">rem (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="line">rem the License.  You may obtain a copy of the License at</span><br><span class="line">rem</span><br><span class="line">rem     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">rem</span><br><span class="line">rem Unless required by applicable law or agreed to in writing, software</span><br><span class="line">rem distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">rem See the License for the specific language governing permissions and</span><br><span class="line">rem limitations under the License.</span><br><span class="line"></span><br><span class="line">rem ---------------------------------------------------------------------------</span><br><span class="line">rem Start script for the CATALINA Server</span><br><span class="line">rem ---------------------------------------------------------------------------</span><br><span class="line">#临时修改系统变量</span><br><span class="line">setlocal</span><br><span class="line">#设置CATALINA_HOME环境变量</span><br><span class="line">rem Guess CATALINA_HOME if not defined</span><br><span class="line">set &quot;CURRENT_DIR=%cd%&quot;</span><br><span class="line">if not &quot;%CATALINA_HOME%&quot; == &quot;&quot; goto gotHome</span><br><span class="line">set &quot;CATALINA_HOME=%CURRENT_DIR%&quot;</span><br><span class="line">if exist &quot;%CATALINA_HOME%\bin\catalina.bat&quot; goto okHome</span><br><span class="line">cd ..</span><br><span class="line">set &quot;CATALINA_HOME=%cd%&quot;</span><br><span class="line">cd &quot;%CURRENT_DIR%&quot;</span><br><span class="line">:gotHome</span><br><span class="line">if exist &quot;%CATALINA_HOME%\bin\catalina.bat&quot; goto okHome</span><br><span class="line">echo The CATALINA_HOME environment variable is not defined correctly</span><br><span class="line">echo This environment variable is needed to run this program</span><br><span class="line">goto end</span><br><span class="line">:okHome</span><br><span class="line">#验证CATALINA_HOME变量目录下的catalina.bat文件是否存在，不存在则批处理直接结束</span><br><span class="line">set &quot;EXECUTABLE=%CATALINA_HOME%\bin\catalina.bat&quot;</span><br><span class="line"></span><br><span class="line">rem Check that target executable exists</span><br><span class="line">if exist &quot;%EXECUTABLE%&quot; goto okExec</span><br><span class="line">echo Cannot find &quot;%EXECUTABLE%&quot;</span><br><span class="line">echo This file is needed to run this program</span><br><span class="line">goto end</span><br><span class="line">:okExec</span><br><span class="line"></span><br><span class="line">#如果设置了其他参数，将参数保存到 CMD_LINE_ARGS 变量中</span><br><span class="line">rem Get remaining unshifted command line arguments and save them in the</span><br><span class="line">set CMD_LINE_ARGS=</span><br><span class="line">:setArgs</span><br><span class="line">if &quot;&quot;%1&quot;&quot;==&quot;&quot;&quot;&quot; goto doneSetArgs</span><br><span class="line">set CMD_LINE_ARGS=%CMD_LINE_ARGS% %1</span><br><span class="line">shift</span><br><span class="line">goto setArgs</span><br><span class="line">:doneSetArgs</span><br><span class="line">#执行 catalina.bat 批处理文件，注意，该行后面跟着两个参数，第1个参数是 start</span><br><span class="line">call &quot;%EXECUTABLE%&quot; start %CMD_LINE_ARGS%</span><br><span class="line"></span><br><span class="line">:end</span><br></pre></td></tr></table></figure><h4 id="catalina-bat"><a href="#catalina-bat" class="headerlink" title="catalina.bat"></a>catalina.bat</h4><h4 id="tomcat类加载设计"><a href="#tomcat类加载设计" class="headerlink" title="tomcat类加载设计"></a>tomcat类加载设计</h4><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.jpg" alt></p><p>整个Tomcat的classLoader分为了两条线，左边的一条线为catalinaLoader，这个是Tomcat服务器专用的，用于加载Tomcat服务器本身的class，右边的一条线则为web应用程序用的，每一个web应用程序都有自己专用的WebappClassLoader，用于加载属于自己应用程序的资源，例如/web-inf/lib下面的jar包，classes里面的class文件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaweb获取类路径下资源</title>
      <link href="/2019/01/24/javaweb%E8%8E%B7%E5%8F%96%E7%B1%BB%E8%B7%AF%E5%BE%84%E4%B8%8B%E8%B5%84%E6%BA%90/"/>
      <url>/2019/01/24/javaweb%E8%8E%B7%E5%8F%96%E7%B1%BB%E8%B7%AF%E5%BE%84%E4%B8%8B%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<ol><li><p>项目结构：</p><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190124213320.png" alt></p><a id="more"></a></li><li><p>类路径：指的是编译后的class文件的位置，如果是IDEA的话，一般在<strong>\项目名\out\artifacts\项目扩展名WEB-INF\classes\a.txt</strong> </p></li><li><p>编译后文件路径</p><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20190124213734.png" alt></p></li><li><p>获取类路径下资源的方式</p><ul><li><p>ClassLoader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/path"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPath</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//如果资源文件不是直接在src下，而是在其他包下面,要改成getResourceAsStream("com/haominglfs/test/a.txt")  开头没有斜杠 </span></span><br><span class="line">        InputStream resourceAsStream =</span><br><span class="line">                <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">"a.txt"</span>);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(resourceAsStream,<span class="string">"UTF-8"</span>));</span><br><span class="line">        String s = br.readLine();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Class </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//得到Class</span><br><span class="line">Class c = this.getClass();</span><br><span class="line">//相对于当前.class文件所在目录,开头还是没有斜杆的</span><br><span class="line">InputStream input = c.getResourceAsStream(&quot;a.txt&quot;);</span><br></pre></td></tr></table></figure><p>如果资源文件和.class文件不同目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getResourceAsStream(<span class="string">"/a.txt"</span>);   注意：这里加了一个斜杆</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring注解</title>
      <link href="/2019/01/19/spring%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/01/19/spring%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<ol><li><p>@Configuration</p><p>告诉spring这是一个配置类（配置类==配置文件）</p></li><li><p>@Bean</p><p>给容器中注册一个bean;类型为返回值的类型；id默认用方法名作为id;</p></li><li><p>@ComponentScan(value=”要扫描的包”)</p><p>包扫描注解</p><a id="more"></a></li><li><p>@Scope</p><p>调整组件的作用域（默认是单实例）</p></li><li><p>@Lazy</p><p>懒加载（默认单实例bean在容器创建的时候创建）</p></li><li><p>@Conditional({Condition})</p><p>按照一定的条件进行判断，满足条件给容器中注册bean;</p><p>Condition实现Condition接口，实现matches方法；</p><p>放在类上，统一设置。</p></li><li><p>@Import,给容器中注册组件方式：</p><ul><li>包扫描+组件标注注解（@Controller/@Service/@Repository/@Component）[自己写的类]</li><li>@Bean[导入的第三方包里面的组件]</li><li>@Import[快速给容器中导入一个组件]; <ul><li>@Import(要导入容器中的组件)，容器中就会自动注册这个组件，id默认是全类名。</li><li>实现ImportSelector接口:返回需要导入的组件的全类名数组，方法不要返回null。</li><li>ImportBeanDefinitionRegistrar的实现类。</li></ul></li><li>使用spring提供的FactoryBean;默认获取到的是工厂bean调用getObject创建的对象。要获取工厂bean本身，需要给id前面加一个&amp;</li></ul></li><li><p>生命周期</p><ul><li><p>指定初始化和销毁方法</p><p>@Bean(init-method=””,destory-method=””)</p><p>初始化：对象创建完成并赋值好，调用初始化方法</p><p>销毁：单实例：容器关闭的时候；多实例：容器不会管理这个bean,容器不会调用销毁方法。</p></li><li><p>让bean实现接口InitializingBean、DisposableBean。</p></li><li><p>@PostConstruct:在bean创建完成并且属性赋值完成，来进行初始化方法；@PreDistory:销毁时要调用的方法。</p></li><li><p>BeanPostProcessor:bean的后置处理器，在bean初始化前后进行一些处理工作。</p><p>postProcessBeforeInitialization：bean初始化之前调用方法。</p><p>postProcessAfterInitialization：在初始化之后工作。</p></li></ul></li><li><p>属性赋值</p><ul><li>@Value赋值<ul><li>基本数值</li><li>SpEL表达式：#{}</li><li>${}：取出配置文件中的值</li></ul></li></ul></li><li><p>@PropertySource(value=”classpath:”)</p><p>读取外部配置文件</p></li><li><p>自动装配</p><ul><li>@Autowired;默认优先按照类型去容器中找对应的组件，如果找到多个相同类型的组件，再将属性的名称作为组件的id去容器中查找。</li><li>@Qualifire(“bookDao”);明确指定要装配的id</li><li>@Primary:spring自动装配的时候，默认使用首选的bean;也可以使用@Qualifire明确指定。<ul><li>Spring还支持使用@Resource(JSR250)和@Inject(JSR330)[java规范注解]<ul><li>@Resource没有支持@Primary和@Autowired(required=false)的功能。</li><li>@Inject：需要先导入javax.inject的包。</li></ul></li></ul></li><li>如果组件只有一个有参构造器，@Autowired可以省略。</li><li>@Bean标注的方法创建对象时，方法参数的值从容器中获取。</li></ul></li><li><p>自定义组件使用spring容器底层的一些组件（ApplicationContext、BeanFactory…），自定义组件实现xxxAware。xxxAware的功能是使用xxxProcessor实现的：</p><p>ApplicationContextAware—&gt;ApplicationContextAwareProcessor后置处理器。</p></li><li><p>@Profile</p><p>spring为我们提供的可以根据当前的环境，动态的激活和切换一系列组件的功能。</p><p>指定组件在哪个环境的情况下才能注册到容器中。</p><p>@Profile(“default”)  @Profile(“dev”)  @Profile(“test”)  @Profile(“prod”)   默认是default</p><ul><li><p>使用命令行动态参数切换 （在虚拟机参数位置）  -Dspring.profiles.active=test   激活test环境</p></li><li><p>使用代码的方式 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">applicationContext.getEnvironment().setActiveProfiles(<span class="string">"test"</span>)</span><br></pre></td></tr></table></figure></li><li><p>没有标注@Profile的bean,在所有环境下都会注册到容器。</p></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb使用</title>
      <link href="/2018/12/20/mongodb%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/12/20/mongodb%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">db.students.find(&#123;age:20,name:'sss'&#125;)</span><br><span class="line"></span><br><span class="line">db.students.find(&#123;age:20&#125;)</span><br><span class="line">db.students.findOne(&#123;age:20&#125;).name</span><br><span class="line"></span><br><span class="line">db.students.find()</span><br><span class="line"></span><br><span class="line">db.students.insertOne(&#123;name:"mmm",age:20&#125;)</span><br><span class="line"></span><br><span class="line">db.students.find(&#123;age:20&#125;).count()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.students.find(&#123;age:20&#125;).length()</span><br><span class="line"></span><br><span class="line">db.students.update(&#123;name:"hm"&#125;,&#123;age:28&#125;)</span><br><span class="line"></span><br><span class="line">//默认情况只会修改一个</span><br><span class="line">db.students.update(&#123;"_id" : ObjectId("5c17c5836ff3da5ffa6da9f7")&#125;,&#123;$set:&#123;name:'hm',gender:"男",address:"石家庄"&#125;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.students.update(&#123;"_id" : ObjectId("5c17c5836ff3da5ffa6da9f7")&#125;,&#123;$unset:&#123;address:"石家庄"&#125;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.students.remove(&#123;age:20&#125;)</span><br><span class="line"></span><br><span class="line">db.students.remove(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">db.students.drop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(var i=1;i&lt;10;i++)&#123;</span><br><span class="line">    db.logs.insert(&#123;name:i&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//var list = db.logs.find();</span><br><span class="line">//printjson(list)</span><br><span class="line"></span><br><span class="line">db.logs.find().sort(&#123;$natural:-1&#125;)</span><br><span class="line"></span><br><span class="line">db.logs.insert(&#123;name:undefined&#125;)</span><br><span class="line"></span><br><span class="line">//db.logs.find(&#123;name:undefined&#125;)</span><br><span class="line"></span><br><span class="line">db.logs.find(&#123;name:&#123;$type:6&#125;&#125;)</span><br><span class="line"></span><br><span class="line">db.logs.find(&#123;name:&#123;$type:"undefined"&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="mongoTemplate使用-kotlin"><a href="#mongoTemplate使用-kotlin" class="headerlink" title="mongoTemplate使用(kotlin)"></a>mongoTemplate使用(kotlin)</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询</span></span><br><span class="line">mongoTemplate.findById(oid, Place::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"><span class="comment">//保存文档对象</span></span><br><span class="line">mongoTemplate.save(place)</span><br><span class="line"><span class="comment">//构造查询对象</span></span><br><span class="line"><span class="keyword">val</span> pattern= Pattern.compile(<span class="string">"^http"</span>, Pattern.CASE_INSENSITIVE) <span class="comment">//匹配正则表达式</span></span><br><span class="line"><span class="keyword">val</span> query = Query(Criteria.<span class="keyword">where</span>(<span class="string">"coverPicture"</span>).regex(pattern))</span><br><span class="line">query.with(PageRequest.of(page, <span class="number">30</span>)) <span class="comment">//分页处理</span></span><br><span class="line"><span class="keyword">val</span> items = mongoTemplate.find(query, Place::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hibernate-HQL查询</title>
      <link href="/2018/12/16/hibernate-HQL%E6%9F%A5%E8%AF%A2/"/>
      <url>/2018/12/16/hibernate-HQL%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Hibernate提供了以下几种检索对象的方式：</p><ul><li><p>导航对象图检索方式:  根据已经加载的对象导航到其他对象。</p></li><li><p>OID 检索方式:  按照对象的OID来检索对象。</p></li><li><p>HQL 检索方式: 使用面向对象的 HQL 查询语言。</p></li><li><p>QBC 检索方式: 使用QBC(QueryBy Criteria) API 来检索对象. 这种API封装了基于字符串形式的查询语句,提供了更加面向对象的查询接口。</p></li><li><p>本地SQL检索方式:使用本地数据库的SQL查询语句。</p><a id="more"></a></li></ul></li><li><p>HQL(HibernateQuery Language) 是面向对象的查询语言, 它和SQL查询语言有些相似.在Hibernate提供的各种检索方式中,HQL 是使用最广的一种检索方式.它有如下功能:</p><ul><li>在查询语句中设定各种查询条件。</li><li>支持投影查询,即仅检索出对象的部分属性。</li><li>支持分页查询。</li><li>支持连接查询。</li><li>支持分组查询,允许使用HAVING和GROUPBY 关键字。</li><li>提供内置聚集函数,如sum(),min() 和 max()。</li><li>支持子查询。</li><li>支持动态绑定参数。</li><li>能够调用用户定义的 SQL 函数或标准的SQL函数。</li></ul></li><li><p>HQL检索方式包括以下步骤:</p><ul><li>通过Session的createQuery()方法创建一个Query对象,它包括一个HQL查询语句.HQL 查询语句中可以包含命名参数。</li><li>动态绑定参数。</li><li>调用Query相关方法执行查询语句。</li></ul></li><li><p>测试用例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testBatch()&#123;</span><br><span class="line">session.doWork(new Work() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void execute(Connection connection) throws SQLException &#123;</span><br><span class="line">//通过 JDBC 原生的 API 进行操作, 效率最高, 速度最快!</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testManageSession()&#123;</span><br><span class="line"></span><br><span class="line">//获取 Session</span><br><span class="line">//开启事务</span><br><span class="line">Session session = HibernateUtils.getInstance().getSession();</span><br><span class="line">System.out.println("--&gt;" + session.hashCode());</span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">DepartmentDao departmentDao = new DepartmentDao();</span><br><span class="line"></span><br><span class="line">Department dept = new Department();</span><br><span class="line">dept.setName("ATGUIGU");</span><br><span class="line"></span><br><span class="line">departmentDao.save(dept);</span><br><span class="line">departmentDao.save(dept);</span><br><span class="line">departmentDao.save(dept);</span><br><span class="line"></span><br><span class="line">//若 Session 是由 thread 来管理的, 则在提交或回滚事务时, 已经关闭 Session 了. </span><br><span class="line">transaction.commit();</span><br><span class="line">System.out.println(session.isOpen()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testQueryIterate()&#123;</span><br><span class="line">Department dept = (Department) session.get(Department.class, 70);</span><br><span class="line">System.out.println(dept.getName());</span><br><span class="line">System.out.println(dept.getEmps().size()); </span><br><span class="line"></span><br><span class="line">Query query = session.createQuery("FROM Employee e WHERE e.dept.id = 80");</span><br><span class="line">//List<span class="tag">&lt;<span class="name">Employee</span>&gt;</span> emps = query.list();</span><br><span class="line">//System.out.println(emps.size()); </span><br><span class="line"></span><br><span class="line">Iterator<span class="tag">&lt;<span class="name">Employee</span>&gt;</span> empIt = query.iterate();</span><br><span class="line">while(empIt.hasNext())&#123;</span><br><span class="line">System.out.println(empIt.next().getName()); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testUpdateTimeStampCache()&#123;</span><br><span class="line">Query query = session.createQuery("FROM Employee");</span><br><span class="line">query.setCacheable(true);</span><br><span class="line"></span><br><span class="line">List<span class="tag">&lt;<span class="name">Employee</span>&gt;</span> emps = query.list();</span><br><span class="line">System.out.println(emps.size());</span><br><span class="line"></span><br><span class="line">Employee employee = (Employee) session.get(Employee.class, 100);</span><br><span class="line">employee.setSalary(30000);</span><br><span class="line"></span><br><span class="line">emps = query.list();</span><br><span class="line">System.out.println(emps.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testQueryCache()&#123;</span><br><span class="line">Query query = session.createQuery("FROM Employee");</span><br><span class="line">query.setCacheable(true);</span><br><span class="line"></span><br><span class="line">List<span class="tag">&lt;<span class="name">Employee</span>&gt;</span> emps = query.list();</span><br><span class="line">System.out.println(emps.size());</span><br><span class="line"></span><br><span class="line">emps = query.list();</span><br><span class="line">System.out.println(emps.size());</span><br><span class="line"></span><br><span class="line">Criteria criteria = session.createCriteria(Employee.class);</span><br><span class="line">criteria.setCacheable(true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testCollectionSecondLevelCache()&#123;</span><br><span class="line">Department dept = (Department) session.get(Department.class, 80);</span><br><span class="line">System.out.println(dept.getName());</span><br><span class="line">System.out.println(dept.getEmps().size()); </span><br><span class="line"></span><br><span class="line">transaction.commit();</span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">session = sessionFactory.openSession();</span><br><span class="line">transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">Department dept2 = (Department) session.get(Department.class, 80);</span><br><span class="line">System.out.println(dept2.getName());</span><br><span class="line">System.out.println(dept2.getEmps().size()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testHibernateSecondLevelCache()&#123;</span><br><span class="line">Employee employee = (Employee) session.get(Employee.class, 100);</span><br><span class="line">System.out.println(employee.getName()); </span><br><span class="line"></span><br><span class="line">transaction.commit();</span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">session = sessionFactory.openSession();</span><br><span class="line">transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">Employee employee2 = (Employee) session.get(Employee.class, 100);</span><br><span class="line">System.out.println(employee2.getName()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testHQLUpdate()&#123;</span><br><span class="line">String hql = "DELETE FROM Department d WHERE d.id = :id";</span><br><span class="line"></span><br><span class="line">session.createQuery(hql).setInteger("id", 280)</span><br><span class="line">                        .executeUpdate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testNativeSQL()&#123;</span><br><span class="line">String sql = "INSERT INTO gg_department VALUES(?, ?)";</span><br><span class="line">Query query = session.createSQLQuery(sql);</span><br><span class="line"></span><br><span class="line">query.setInteger(0, 280)</span><br><span class="line">     .setString(1, "ATGUIGU")</span><br><span class="line">     .executeUpdate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testQBC4()&#123;</span><br><span class="line">Criteria criteria = session.createCriteria(Employee.class);</span><br><span class="line"></span><br><span class="line">//1. 添加排序</span><br><span class="line">criteria.addOrder(Order.asc("salary"));</span><br><span class="line">criteria.addOrder(Order.desc("email"));</span><br><span class="line"></span><br><span class="line">//2. 添加翻页方法</span><br><span class="line">int pageSize = 5;</span><br><span class="line">int pageNo = 3;</span><br><span class="line">criteria.setFirstResult((pageNo - 1) * pageSize)</span><br><span class="line">        .setMaxResults(pageSize)</span><br><span class="line">        .list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testQBC3()&#123;</span><br><span class="line">Criteria criteria = session.createCriteria(Employee.class);</span><br><span class="line"></span><br><span class="line">//统计查询: 使用 Projection 来表示: 可以由 Projections 的静态方法得到</span><br><span class="line">criteria.setProjection(Projections.max("salary"));</span><br><span class="line"></span><br><span class="line">System.out.println(criteria.uniqueResult()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testQBC2()&#123;</span><br><span class="line">Criteria criteria = session.createCriteria(Employee.class);</span><br><span class="line"></span><br><span class="line">//1. AND: 使用 Conjunction 表示</span><br><span class="line">//Conjunction 本身就是一个 Criterion 对象</span><br><span class="line">//且其中还可以添加 Criterion 对象</span><br><span class="line">Conjunction conjunction = Restrictions.conjunction();</span><br><span class="line">conjunction.add(Restrictions.like("name", "a", MatchMode.ANYWHERE));</span><br><span class="line">Department dept = new Department();</span><br><span class="line">dept.setId(80);</span><br><span class="line">conjunction.add(Restrictions.eq("dept", dept));</span><br><span class="line">System.out.println(conjunction); </span><br><span class="line"></span><br><span class="line">//2. OR</span><br><span class="line">Disjunction disjunction = Restrictions.disjunction();</span><br><span class="line">disjunction.add(Restrictions.ge("salary", 6000F));</span><br><span class="line">disjunction.add(Restrictions.isNull("email"));</span><br><span class="line"></span><br><span class="line">criteria.add(disjunction);</span><br><span class="line">criteria.add(conjunction);</span><br><span class="line"></span><br><span class="line">criteria.list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testQBC()&#123;</span><br><span class="line">//1. 创建一个 Criteria 对象</span><br><span class="line">Criteria criteria = session.createCriteria(Employee.class);</span><br><span class="line"></span><br><span class="line">//2. 添加查询条件: 在 QBC 中查询条件使用 Criterion 来表示</span><br><span class="line">//Criterion 可以通过 Restrictions 的静态方法得到</span><br><span class="line">criteria.add(Restrictions.eq("email", "SKUMAR"));</span><br><span class="line">criteria.add(Restrictions.gt("salary", 5000F));</span><br><span class="line"></span><br><span class="line">//3. 执行查询</span><br><span class="line">Employee employee = (Employee) criteria.uniqueResult();</span><br><span class="line">System.out.println(employee); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testLeftJoinFetch2()&#123;</span><br><span class="line">String hql = "SELECT e FROM Employee e INNER JOIN e.dept";</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line"></span><br><span class="line">List<span class="tag">&lt;<span class="name">Employee</span>&gt;</span> emps = query.list();</span><br><span class="line">System.out.println(emps.size()); </span><br><span class="line"></span><br><span class="line">for(Employee emp: emps)&#123;</span><br><span class="line">System.out.println(emp.getName() + ", " + emp.getDept().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testLeftJoin()&#123;</span><br><span class="line">String hql = "SELECT DISTINCT d FROM Department d LEFT JOIN d.emps";</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line"></span><br><span class="line">List<span class="tag">&lt;<span class="name">Department</span>&gt;</span> depts = query.list();</span><br><span class="line">System.out.println(depts.size());</span><br><span class="line"></span><br><span class="line">for(Department dept: depts)&#123;</span><br><span class="line">System.out.println(dept.getName() + ", " + dept.getEmps().size()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//List<span class="tag">&lt;<span class="name">Object</span> []&gt;</span> result = query.list(); </span><br><span class="line">//result = new ArrayList<span class="tag">&lt;&gt;</span>(new LinkedHashSet<span class="tag">&lt;&gt;</span>(result));</span><br><span class="line">//System.out.println(result); </span><br><span class="line">//</span><br><span class="line">//for(Object [] objs: result)&#123;</span><br><span class="line">//System.out.println(Arrays.asList(objs));</span><br><span class="line">//&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testLeftJoinFetch()&#123;</span><br><span class="line">//String hql = "SELECT DISTINCT d FROM Department d LEFT JOIN FETCH d.emps";</span><br><span class="line">String hql = "FROM Department d INNER JOIN FETCH d.emps";</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line"></span><br><span class="line">List<span class="tag">&lt;<span class="name">Department</span>&gt;</span> depts = query.list();</span><br><span class="line">depts = new ArrayList<span class="tag">&lt;&gt;</span>(new LinkedHashSet(depts));</span><br><span class="line">System.out.println(depts.size()); </span><br><span class="line"></span><br><span class="line">for(Department dept: depts)&#123;</span><br><span class="line">System.out.println(dept.getName() + "-" + dept.getEmps().size());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testGroupBy()&#123;</span><br><span class="line">String hql = "SELECT min(e.salary), max(e.salary) "</span><br><span class="line">+ "FROM Employee e "</span><br><span class="line">+ "GROUP BY e.dept "</span><br><span class="line">+ "HAVING min(salary) &gt; :minSal";</span><br><span class="line"></span><br><span class="line">Query query = session.createQuery(hql)</span><br><span class="line">             .setFloat("minSal", 8000);</span><br><span class="line"></span><br><span class="line">List<span class="tag">&lt;<span class="name">Object</span> []&gt;</span> result = query.list();</span><br><span class="line">for(Object [] objs: result)&#123;</span><br><span class="line">System.out.println(Arrays.asList(objs));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testFieldQuery2()&#123;</span><br><span class="line">String hql = "SELECT new Employee(e.email, e.salary, e.dept) "</span><br><span class="line">+ "FROM Employee e "</span><br><span class="line">+ "WHERE e.dept = :dept";</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line"></span><br><span class="line">Department dept = new Department();</span><br><span class="line">dept.setId(80);</span><br><span class="line">List<span class="tag">&lt;<span class="name">Employee</span>&gt;</span> result = query.setEntity("dept", dept)</span><br><span class="line">                     .list();</span><br><span class="line"></span><br><span class="line">for(Employee emp: result)&#123;</span><br><span class="line">System.out.println(emp.getId() + ", " + emp.getEmail() </span><br><span class="line">+ ", " + emp.getSalary() + ", " + emp.getDept());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testFieldQuery()&#123;</span><br><span class="line">String hql = "SELECT e.email, e.salary, e.dept FROM Employee e WHERE e.dept = :dept";</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line"></span><br><span class="line">Department dept = new Department();</span><br><span class="line">dept.setId(80);</span><br><span class="line">List<span class="tag">&lt;<span class="name">Object[]</span>&gt;</span> result = query.setEntity("dept", dept)</span><br><span class="line">                     .list();</span><br><span class="line"></span><br><span class="line">for(Object [] objs: result)&#123;</span><br><span class="line">System.out.println(Arrays.asList(objs));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testNamedQuery()&#123;</span><br><span class="line">Query query = session.getNamedQuery("salaryEmps");</span><br><span class="line"></span><br><span class="line">List<span class="tag">&lt;<span class="name">Employee</span>&gt;</span> emps = query.setFloat("minSal", 5000)</span><br><span class="line">                   .setFloat("maxSal", 10000)</span><br><span class="line">                   .list();</span><br><span class="line"></span><br><span class="line">System.out.println(emps.size()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testPageQuery()&#123;</span><br><span class="line">String hql = "FROM Employee";</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line"></span><br><span class="line">int pageNo = 22;</span><br><span class="line">int pageSize = 5;</span><br><span class="line"></span><br><span class="line">List<span class="tag">&lt;<span class="name">Employee</span>&gt;</span> emps = </span><br><span class="line">query.setFirstResult((pageNo - 1) * pageSize)</span><br><span class="line">     .setMaxResults(pageSize)</span><br><span class="line">     .list();</span><br><span class="line">System.out.println(emps);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testHQLNamedParameter()&#123;</span><br><span class="line"></span><br><span class="line">//1. 创建 Query 对象</span><br><span class="line">//基于命名参数. </span><br><span class="line">String hql = "FROM Employee e WHERE e.salary &gt; :sal AND e.email LIKE :email";</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line"></span><br><span class="line">//2. 绑定参数</span><br><span class="line">query.setFloat("sal", 7000)</span><br><span class="line">     .setString("email", "%A%");</span><br><span class="line"></span><br><span class="line">//3. 执行查询</span><br><span class="line">List<span class="tag">&lt;<span class="name">Employee</span>&gt;</span> emps = query.list();</span><br><span class="line">System.out.println(emps.size());  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testHQL()&#123;</span><br><span class="line"></span><br><span class="line">//1. 创建 Query 对象</span><br><span class="line">//基于位置的参数. </span><br><span class="line">String hql = "FROM Employee e WHERE e.salary &gt; ? AND e.email LIKE ? AND e.dept = ? "</span><br><span class="line">+ "ORDER BY e.salary";</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line"></span><br><span class="line">//2. 绑定参数</span><br><span class="line">//Query 对象调用 setXxx 方法支持方法链的编程风格.</span><br><span class="line">Department dept = new Department();</span><br><span class="line">dept.setId(80); </span><br><span class="line">query.setFloat(0, 6000)</span><br><span class="line">     .setString(1, "%A%")</span><br><span class="line">     .setEntity(2, dept);</span><br><span class="line"></span><br><span class="line">//3. 执行查询</span><br><span class="line">List<span class="tag">&lt;<span class="name">Employee</span>&gt;</span> emps = query.list();</span><br><span class="line">System.out.println(emps.size());  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hibernate的session管理方式</title>
      <link href="/2018/12/14/hibernate%E7%9A%84session%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/12/14/hibernate%E7%9A%84session%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Hibernate 自身提供了三种管理 Session对象的方法：</p><ul><li>Session 对象的生命周期与本地线程绑定。</li><li>–Session对象的生命周期与JTA事务绑定。</li><li>–Hibernate委托程序管理Session对象的生命周期。</li></ul></li><li><p>在Hibernate的配置文件中,hibernate.current_session_context_class属性用于指定Session管理方式,可选值包括：</p><ul><li>thread:Session 对象的生命周期与本地线程绑定。</li><li>jta:Session 对象的生命周期与 JTA 事务绑定。</li><li>managed:Hibernate 委托程序来管理 Session对象的生命周期。</li></ul></li><li><p>配置与使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置管理 Session 的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">HibernateUtils</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> HibernateUtils instance = <span class="keyword">new</span> HibernateUtils();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HibernateUtils <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SessionFactory sessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> SessionFactory <span class="title">getSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sessionFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">ServiceRegistry serviceRegistry = <span class="keyword">new</span> ServiceRegistryBuilder()</span><br><span class="line">.applySettings(configuration.getProperties())</span><br><span class="line">.buildServiceRegistry();</span><br><span class="line">sessionFactory = configuration.buildSessionFactory(serviceRegistry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sessionFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Session <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> getSessionFactory().getCurrentSession();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==============================================================</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Department dept)</span></span>&#123;</span><br><span class="line"><span class="comment">//内部获取 Session 对象</span></span><br><span class="line"><span class="comment">//获取和当前线程绑定的 Session 对象</span></span><br><span class="line"><span class="comment">//1. 不需要从外部传入 Session 对象</span></span><br><span class="line"><span class="comment">//2. 多个 DAO 方法也可以使用一个事务!</span></span><br><span class="line">Session session = HibernateUtils.getInstance().getSession();</span><br><span class="line">System.out.println(session.hashCode());</span><br><span class="line"></span><br><span class="line">session.save(dept);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 若需要传入一个 Session 对象, 则意味着上一层(Service)需要获取到 Session 对象.</span></span><br><span class="line"><span class="comment"> * 这说明上一层需要和 Hibernate 的 API 紧密耦合. 所以不推荐使用此种方式. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Session session, Department dept)</span></span>&#123;</span><br><span class="line">session.save(dept);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">================================================================</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testManageSession</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取 Session</span></span><br><span class="line">    <span class="comment">//开启事务</span></span><br><span class="line">    Session session = HibernateUtils.getInstance().getSession();</span><br><span class="line">    System.out.println(<span class="string">"--&gt;"</span> + session.hashCode());</span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    DepartmentDao departmentDao = <span class="keyword">new</span> DepartmentDao();</span><br><span class="line"></span><br><span class="line">    Department dept = <span class="keyword">new</span> Department();</span><br><span class="line">    dept.setName(<span class="string">"ATGUIGU"</span>);</span><br><span class="line"></span><br><span class="line">    departmentDao.save(dept);</span><br><span class="line">    departmentDao.save(dept);</span><br><span class="line">    departmentDao.save(dept);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//若 Session 是由 thread 来管理的, 则在提交或回滚事务时, 已经关闭 Session 了. </span></span><br><span class="line">    transaction.commit();</span><br><span class="line">    System.out.println(session.isOpen()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果把 Hibernate 配置文件的 hibernate.current_session_context_class 属性值设为 thread, Hibernate 就会按照与本地线程绑定的方式来管理 Session，Hibernate 按一下规则把 Session 与本地线程绑定：</p><ul><li>当一个线程(threadA)第一次调用SessionFactory对象的getCurrentSession()方法时,该方法会创建一个新的Session(sessionA)对象,把该对象与threadA绑定,并将sessionA返回。</li><li>当threadA再次调用SessionFactory对象的getCurrentSession()方法时,该方法将返回sessionA对象。</li><li>当 threadA提交sessionA对象关联的事务时,Hibernate 会自动flushsessionA对象的缓存,然后提交事务,关闭sessionA对象.当threadA撤销sessionA对象关联的事务时,也会自动关闭sessionA对象。</li><li>若 threadA再次调用SessionFactory对象的getCurrentSession()方法时,该方法会又创建一个新的Session(sessionB)对象,把该对象与threadA绑定,并将sessionB返回。</li></ul></li><li><p>批量操作</p><p>推荐使用原生的JDBC方式。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hibernate缓存</title>
      <link href="/2018/12/13/hibernate%E7%BC%93%E5%AD%98/"/>
      <url>/2018/12/13/hibernate%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<ol><li><p>缓存级别</p><ul><li>第一级别的缓存是Session级别的缓存，它是属于事务范围的缓存。这一级别的缓存由hibernate管理的。</li><li><p>第二级别的缓存是SessionFactory级别的缓存，它是属于进程范围的缓存，sessionFactory级别的缓存分为两类：</p><ul><li><p>内置缓存: Hibernate 自带的, 不可卸载.通常在Hibernate的初始化阶段,Hibernate 会把映射元数据和预定义的 SQL语句放到SessionFactory的缓存中,映射元数据是映射文件中数据（.hbm.xml文件中的数据）的复制.该内置缓存是只读的。</p></li><li><p>外置缓存(二级缓存):一个可配置的缓存插件.在默认情况下,SessionFactory不会启用这个缓存插件.外置缓存中的数据是数据库数据的复制,外置缓存的物理介质可以是内存或硬盘。</p><a id="more"></a></li></ul></li></ul></li><li><p>二级缓存的适用场景</p><ul><li>适合放入二级缓存中的数据：<ul><li>很少被修改</li><li>不是很重要的数据,允许出现偶尔的并发问题</li></ul></li><li>不适合放入二级缓存中的数据：<ul><li>经常被修改</li><li>财务数据,绝对不允许出现并发问题</li><li>与其他应用程序共享的数据</li></ul></li></ul></li><li><p>管理二级缓存，二级缓存是可配置的的插件,Hibernate 允许选用以下类型的缓存插件:</p><ul><li>EHCache: 可作为进程范围内的缓存,存放数据的物理介质可以是内存或硬盘,对Hibernate的查询缓存提供了支持。</li><li>其他看官方文档。</li></ul></li><li><p>使用二级缓存的步骤:</p><ol><li><p>加入二级缓存插件的 jar 包及配置文件:</p><ul><li>复制 \hibernate-release-4.2.4.Final\lib\optional\ehcache*.jar 到当前 Hibrenate 应用的类路径下</li><li>复制 \hibernate-release-4.2.4.Final\project\etc\ehcachexml 到当前 WEB 应用的类路径下</li></ul></li><li><p>配置 hibernate.cfg.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 启用二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache.use_second_level_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置使用的二级缓存的产品 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.region.factory_class"</span>&gt;</span>org.hibernate.cache.ehcache.EhCacheRegionFactory<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置对哪些类使用 hibernate 的二级缓存 (实际上也可以在 .hbm.xml 文件中配置对哪些类使用二级缓存, 及二级缓存的策略是什么)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class-cache</span> <span class="attr">usage</span>=<span class="string">"read-write"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.hibernate.entities.Employee"</span>/&gt;</span></span><br><span class="line">===============================集合的二级缓存</span><br><span class="line"><span class="tag">&lt;<span class="name">collection-cache</span> <span class="attr">usage</span>=<span class="string">"read-write"</span> <span class="attr">collection</span>=<span class="string">"com.atguigu.hibernate.entities.Department.emps"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--也可以在 .hbm.xml 文件中进行配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"emps"</span> <span class="attr">table</span>=<span class="string">"GG_EMPLOYEE"</span> <span class="attr">inverse</span>=<span class="string">"true"</span> <span class="attr">lazy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">usage</span>=<span class="string">"read-write"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"DEPT_ID"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.atguigu.hibernate.entities.Employee"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意: 还需要配置集合中的元素对应的持久化类也使用二级缓存! 否则将会多出 n 条 SQL 语句. --&gt;</span></span><br><span class="line">=================================查询缓存</span><br><span class="line"><span class="comment">&lt;!-- 查询缓存: 默认情况下, 设置的缓存对 HQL 及 QBC 查询时无效的, 但可以通过以下方式使其是有效的  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache.use_query_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 调用 Query 或 Criteria 的 setCacheable(true) 方法  查询缓存依赖于二级缓存 --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>ehcache 的配置文件: ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    指定一个目录：当 EHCache 把数据写到硬盘上时, 将把数据写到这个目录下.</span></span><br><span class="line"><span class="comment">    --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"d:\\tempDirectory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    设置缓存的默认数据过期策略 </span></span><br><span class="line"><span class="comment">    --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">   设定具体的命名缓存的数据过期策略。每个命名缓存代表一个缓存区域</span></span><br><span class="line"><span class="comment">   缓存区域(region)：一个具有名称的缓存块，可以给每一个缓存块设置不同的缓存策略。</span></span><br><span class="line"><span class="comment">   如果没有设置任何的缓存区域，则所有被缓存的对象，都将使用默认的缓存策略。即：&lt;defaultCache.../&gt;</span></span><br><span class="line"><span class="comment">   Hibernate 在不同的缓存区域保存不同的类/集合。</span></span><br><span class="line"><span class="comment">对于类而言，区域的名称是类名。如:com.atguigu.domain.Customer</span></span><br><span class="line"><span class="comment">对于集合而言，区域的名称是类名加属性名。如com.atguigu.domain.Customer.orders</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">   name: 设置缓存的名字,它的取值为类的全限定名或类的集合的名字 </span></span><br><span class="line"><span class="comment">maxElementsInMemory: 设置基于内存的缓存中可存放的对象最大数目 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">eternal: 设置对象是否为永久的, true表示永不过期,</span></span><br><span class="line"><span class="comment">此时将忽略timeToIdleSeconds 和 timeToLiveSeconds属性; 默认值是false </span></span><br><span class="line"><span class="comment">timeToIdleSeconds:设置对象空闲最长时间,以秒为单位, 超过这个时间,对象过期。</span></span><br><span class="line"><span class="comment">当对象过期时,EHCache会把它从缓存中清除。如果此值为0,表示对象可以无限期地处于空闲状态。 </span></span><br><span class="line"><span class="comment">timeToLiveSeconds:设置对象生存最长时间,超过这个时间,对象过期。</span></span><br><span class="line"><span class="comment">如果此值为0,表示对象可以无限期地存在于缓存中. 该属性值必须大于或等于 timeToIdleSeconds 属性值 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">overflowToDisk:设置基于内存的缓存中的对象数目达到上限后,是否把溢出的对象写到基于硬盘的缓存中 </span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"com.atguigu.hibernate.entities.Employee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"600"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"com.atguigu.hibernate.entities.Department.emps"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>kotlin</title>
      <link href="/2018/12/12/kotlin/"/>
      <url>/2018/12/12/kotlin/</url>
      
        <content type="html"><![CDATA[<h3 id="空类型"><a href="#空类型" class="headerlink" title="空类型"></a>空类型</h3><p>任意类型都有可空和不可空两种</p><p>val notNull:String = null //错误，不能为空</p><p>val nullable:String? = null //正确，可以为空</p><p>notNull.length //正确，不为空的值可以直接使用</p><p>Nullable.length //错误，可能为空，不能直接获取长度</p><p>Nullable!!.length //正确，强制认定nullable不可空</p><p>Nullable?.length //正确，若nullable为空，返回空</p><a id="more"></a><h3 id="智能类型转换"><a href="#智能类型转换" class="headerlink" title="智能类型转换"></a>智能类型转换</h3><ol><li><p>java style 类型转换</p><p>val sub:subClass  = parent as subClass</p><p>类似于java的类型转换，失败则抛出异常</p></li><li><p>安全类型转换</p><p>val sub :subClass = parent as? subClass</p><p>如果转换失败，返回null,不抛出异常</p></li></ol><h3 id="Lamdba表达式"><a href="#Lamdba表达式" class="headerlink" title="Lamdba表达式"></a>Lamdba表达式</h3><ul><li>写法：{[参数列表] -&gt;  [函数体,最后一行是返回值 ]}</li></ul><h3 id="var还是val"><a href="#var还是val" class="headerlink" title="var还是val?"></a>var还是val?</h3><ul><li>原则：如果两种方式都能满足需求的情况下，优先使用val声明，因为一方面val声明的变量是只读，一旦初始化后不能修改，还可以避免程序运行时错误的修改变量的内容；另一方面在声明引用类型使用val,对象的引用不会被修改，但是引用内容可以修改，这样会更加安全，也符合函数式编程的技术要求。</li></ul><h3 id="Elvis运算符"><a href="#Elvis运算符" class="headerlink" title="Elvis运算符"></a>Elvis运算符</h3><ul><li>A ?: B  如果A不为空值则结果为A,否则结果为B。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jpa</title>
      <link href="/2018/12/12/jpa/"/>
      <url>/2018/12/12/jpa/</url>
      
        <content type="html"><![CDATA[<ul><li><p>persistence.xml</p><p>JPA规范要求在类路径的META-INF目录下放置persistence.xml，文件的名称是固定的。</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">version</span>=<span class="string">"2.0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/persistence"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1.name 属性用于定义持久化单元的名字, 必选 </span></span><br><span class="line"><span class="comment"> 2.transaction-type：指定 JPA  的事务处理策略。</span></span><br><span class="line"><span class="comment">RESOURCE_LOCAL：默认值，数据库级别的事务，只能针对一种数据库，不支持分布式事务。</span></span><br><span class="line"><span class="comment">如果需要支持分布式事务，使用JTA：transaction-type="JTA“</span></span><br><span class="line"><span class="comment">--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">"jpa-1"</span> <span class="attr">transaction-type</span>=<span class="string">"RESOURCE_LOCAL"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">配置使用什么 ORM 产品来作为 JPA 的实现 </span></span><br><span class="line"><span class="comment">1. 实际上配置的是  javax.persistence.spi.PersistenceProvider 接口的实现类</span></span><br><span class="line"><span class="comment">2. 若 JPA 项目中只有一个 JPA 的实现产品, 则也可以不配置该节点. </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.ejb.HibernatePersistence<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加持久化类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span>&gt;</span>com.atguigu.jpa.helloworld.Customer<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span>&gt;</span>com.atguigu.jpa.helloworld.Order<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span>&gt;</span>com.atguigu.jpa.helloworld.Department<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span>&gt;</span>com.atguigu.jpa.helloworld.Manager<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span>&gt;</span>com.atguigu.jpa.helloworld.Item<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span>&gt;</span>com.atguigu.jpa.helloworld.Category<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">配置二级缓存的策略 </span></span><br><span class="line"><span class="comment">ALL：所有的实体类都被缓存</span></span><br><span class="line"><span class="comment">NONE：所有的实体类都不被缓存. </span></span><br><span class="line"><span class="comment">ENABLE_SELECTIVE：标识 @Cacheable(true) 注解的实体类将被缓存</span></span><br><span class="line"><span class="comment">DISABLE_SELECTIVE：缓存除标识 @Cacheable(false) 以外的所有实体类</span></span><br><span class="line"><span class="comment">UNSPECIFIED：默认值，JPA 产品默认值将被使用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shared-cache-mode</span>&gt;</span>ENABLE_SELECTIVE<span class="tag">&lt;/<span class="name">shared-cache-mode</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 连接数据库的基本信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///jpa"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.password"</span> <span class="attr">value</span>=<span class="string">"1230"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 JPA 实现产品的基本属性. 配置 hibernate 的基本属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span> <span class="attr">value</span>=<span class="string">"update"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 二级缓存相关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_second_level_cache"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.region.factory_class"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.cache.ehcache.EhCacheRegionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_query_cache"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NamedQuery</span>(name=<span class="string">"testNamedQuery"</span>, query=<span class="string">"FROM Customer c WHERE c.id = ?"</span>)</span><br><span class="line"><span class="meta">@Cacheable</span>(<span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"JPA_CUTOMERS"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Date createdTime;</span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String lastName, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.lastName = lastName;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;Order&gt; orders = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//@TableGenerator(name="ID_GENERATOR",</span></span><br><span class="line"><span class="comment">//table="jpa_id_generators",</span></span><br><span class="line"><span class="comment">//pkColumnName="PK_NAME",</span></span><br><span class="line"><span class="comment">//pkColumnValue="CUSTOMER_ID",</span></span><br><span class="line"><span class="comment">//valueColumnName="PK_VALUE",</span></span><br><span class="line"><span class="comment">//allocationSize=100)</span></span><br><span class="line"><span class="comment">//@GeneratedValue(strategy=GenerationType.TABLE,generator="ID_GENERATOR")</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.AUTO)</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"LAST_NAME"</span>,length=<span class="number">50</span>,nullable=<span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Temporal</span>(TemporalType.TIMESTAMP)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getCreatedTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> createdTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreatedTime</span><span class="params">(Date createdTime)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.createdTime = createdTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Temporal</span>(TemporalType.DATE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.birth = birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//映射单向 1-n 的关联关系</span></span><br><span class="line"><span class="comment">//使用 @OneToMany 来映射 1-n 的关联关系</span></span><br><span class="line"><span class="comment">//使用 @JoinColumn 来映射外键列的名称</span></span><br><span class="line"><span class="comment">//可以使用 @OneToMany 的 fetch 属性来修改默认的加载策略</span></span><br><span class="line"><span class="comment">//可以通过 @OneToMany 的 cascade 属性来修改默认的删除策略. </span></span><br><span class="line"><span class="comment">//注意: 若在 1 的一端的 @OneToMany 中使用 mappedBy 属性, 则 @OneToMany 端就不能再使用 @JoinColumn 属性了. </span></span><br><span class="line"><span class="comment">//@JoinColumn(name="CUSTOMER_ID")</span></span><br><span class="line"><span class="meta">@OneToMany</span>(fetch=FetchType.LAZY,cascade=&#123;CascadeType.REMOVE&#125;,mappedBy=<span class="string">"customer"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Order&gt; <span class="title">getOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orders;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrders</span><span class="params">(Set&lt;Order&gt; orders)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orders = orders;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工具方法. 不需要映射为数据表的一列. </span></span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"lastName: "</span> + lastName + <span class="string">", email: "</span> + email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Customer [id="</span> + id + <span class="string">", lastName="</span> + lastName + <span class="string">", email="</span></span><br><span class="line">+ email + <span class="string">", age="</span> + age + <span class="string">", createdTime="</span> + createdTime</span><br><span class="line">+ <span class="string">", birth="</span> + birth + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行持久化操作流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建 EntitymanagerFactory</span></span><br><span class="line">String persistenceUnitName = <span class="string">"jpa-1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可选</span></span><br><span class="line"><span class="comment">//Map&lt;String, Object&gt; properites = new HashMap&lt;String, Object&gt;();</span></span><br><span class="line"><span class="comment">//properites.put("hibernate.show_sql", true);</span></span><br><span class="line"></span><br><span class="line">EntityManagerFactory entityManagerFactory = </span><br><span class="line">Persistence.createEntityManagerFactory(persistenceUnitName);</span><br><span class="line"><span class="comment">//Persistence.createEntityManagerFactory(persistenceUnitName, properites);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建 EntityManager. 类似于 Hibernate 的 SessionFactory</span></span><br><span class="line">EntityManager entityManager = entityManagerFactory.createEntityManager();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 开启事务</span></span><br><span class="line">EntityTransaction transaction = entityManager.getTransaction();</span><br><span class="line">transaction.begin();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 进行持久化操作</span></span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">customer.setAge(<span class="number">12</span>);</span><br><span class="line">customer.setEmail(<span class="string">"tom@atguigu.com"</span>);</span><br><span class="line">customer.setLastName(<span class="string">"Tom"</span>);</span><br><span class="line">customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line">customer.setCreatedTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">entityManager.persist(customer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 提交事务</span></span><br><span class="line">transaction.commit();</span><br><span class="line">  </span><br><span class="line"><span class="comment">//6. 关闭 EntityManager</span></span><br><span class="line">entityManager.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//7. 关闭 EntityManagerFactory</span></span><br><span class="line">entityManagerFactory.close();</span><br></pre></td></tr></table></figure></li><li><p>基本注解</p><ol><li><p>@Entity<br>标注用于实体类声明语句之前，指出该Java类为实体类，将映射到指定的数据库表。如声明一个实体类Customer，它将映射到数据库中的customer表上。</p></li><li><p>@Table</p><ul><li><p>当实体类与其映射的数据库表名不同名时需要使用 @Table 标注说明，该标注与 @Entity 标注并列使用，置于实体类声明语句之前，可写于单独语句行，也可与声明语句同行。</p></li><li><p>@Table 标注的常用选项是 name，用于指明数据库的表名</p></li><li><p>@Table标注还有一个两个选项 catalog 和 schema 用于设置表所属的数据库目录或模式，通常为数据库名。uniqueConstraints选项用于设置约束条件，通常不须设置。</p></li></ul></li><li><p>@Id</p><ul><li>@Id标注用于声明一个实体类的属性映射为数据库的主键列。该属性通常置于属性声明语句之前，可与声明语句同行，也可写在单独行上。</li><li>•@Id标注也可置于属性的getter方法之前。</li></ul></li><li><p>@GeneratedValue</p><ul><li><p>@GeneratedValue  用于标注主键的生成策略，通过 strategy属性指定。默认情况下，JPA自动选择一个最适合底层数据库的主键生成策略：SqlServer对应identity，MySQL对应auto increment。</p></li><li><p>在 javax.persistence.GenerationType 中定义了以下几种可供选择的策略：</p><p>–IDENTITY：采用数据库 ID自增长的方式来自增主键字段，Oracle 不支持这种方式；</p><p>–AUTO： JPA自动选择合适的策略，是默认选项；</p><p>–SEQUENCE：通过序列产生主键，通过 @SequenceGenerator 注解指定序列名，MySql 不支持这种方式</p><p>–TABLE：通过表产生主键，框架借由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植。</p></li></ul></li><li><p>@Basic</p><ul><li>@Basic 表示一个简单的属性到数据库表的字段的映射,对于没有任何标注的 getXxxx() 方法,默认即为@Basic</li><li>fetch: 表示该属性的读取策略,有EAGER 和 LAZY两种,分别表示主支抓取和延迟加载,默认为EAGER.</li><li>optional:表示该属性是否允许为null,默认为true</li></ul></li><li><p>@Column</p><ul><li>当实体的属性与其映射的数据库表的列不同名时需要使用@Column标注说明，该属性通常置于实体的属性声明语句之前，还可与@Id标注一起使用。</li><li>@Column标注的常用属性是name，用于设置映射数据库表的列名。此外，该标注还包含其它多个属性，如：unique 、nullable、length 等。</li><li>@Column标注的columnDefinition属性:表示该字段在数据库中的实际类型.通常ORM框架可以根据属性类型自动判断数据库中字段的类型,但是对于Date类型仍无法确定数据库中字段类型究竟是DATE,TIME还是TIMESTAMP.此外,String的默认映射类型为VARCHAR,如果要将String类型映射到特定数据库的BLOB或TEXT字段类型。</li><li>@Column标注也可置于属性的getter方法之前。</li></ul></li><li><p>@Transient</p><ul><li>表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性.</li><li>如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic</li></ul></li><li><p>@Temporal</p><ul><li>在核心的JavaAPI 中并没有定义Date类型的精度(temporalprecision).  而在数据库中,表示Date类型的数据有DATE,TIME, 和 TIMESTAMP三种精度(即单纯的日期,时间,或者两者兼备). 在进行属性映射时可使用@Temporal注解来调整精度。</li></ul></li></ol></li><li><p>JPA API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JPATest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> EntityManagerFactory entityManagerFactory;</span><br><span class="line"><span class="keyword">private</span> EntityManager entityManager;</span><br><span class="line"><span class="keyword">private</span> EntityTransaction transaction;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">entityManagerFactory = Persistence.createEntityManagerFactory(<span class="string">"jpa-1"</span>);</span><br><span class="line">entityManager = entityManagerFactory.createEntityManager();</span><br><span class="line">transaction = entityManager.getTransaction();</span><br><span class="line">transaction.begin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">transaction.commit();</span><br><span class="line">entityManager.close();</span><br><span class="line">entityManagerFactory.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以使用 JPQL 完成 UPDATE 和 DELETE 操作. </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExecuteUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">String jpql = <span class="string">"UPDATE Customer c SET c.lastName = ? WHERE c.id = ?"</span>;</span><br><span class="line">Query query = entityManager.createQuery(jpql).setParameter(<span class="number">1</span>, <span class="string">"YYY"</span>).setParameter(<span class="number">2</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">query.executeUpdate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 jpql 内建的函数</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJpqlFunction</span><span class="params">()</span></span>&#123;</span><br><span class="line">String jpql = <span class="string">"SELECT lower(c.email) FROM Customer c"</span>;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; emails = entityManager.createQuery(jpql).getResultList();</span><br><span class="line">System.out.println(emails);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSubQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//查询所有 Customer 的 lastName 为 YY 的 Order</span></span><br><span class="line">String jpql = <span class="string">"SELECT o FROM Order o "</span></span><br><span class="line">+ <span class="string">"WHERE o.customer = (SELECT c FROM Customer c WHERE c.lastName = ?)"</span>;</span><br><span class="line"></span><br><span class="line">Query query = entityManager.createQuery(jpql).setParameter(<span class="number">1</span>, <span class="string">"YY"</span>);</span><br><span class="line">List&lt;Order&gt; orders = query.getResultList();</span><br><span class="line">System.out.println(orders.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JPQL 的关联查询同 HQL 的关联查询. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLeftOuterJoinFetch</span><span class="params">()</span></span>&#123;</span><br><span class="line">String jpql = <span class="string">"FROM Customer c LEFT OUTER JOIN FETCH c.orders WHERE c.id = ?"</span>;</span><br><span class="line"></span><br><span class="line">Customer customer = </span><br><span class="line">(Customer) entityManager.createQuery(jpql).setParameter(<span class="number">1</span>, <span class="number">12</span>).getSingleResult();</span><br><span class="line">System.out.println(customer.getLastName());</span><br><span class="line">System.out.println(customer.getOrders().size());</span><br><span class="line"></span><br><span class="line"><span class="comment">//List&lt;Object[]&gt; result = entityManager.createQuery(jpql).setParameter(1, 12).getResultList();</span></span><br><span class="line"><span class="comment">//System.out.println(result);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询 order 数量大于 2 的那些 Customer</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGroupBy</span><span class="params">()</span></span>&#123;</span><br><span class="line">String jpql = <span class="string">"SELECT o.customer FROM Order o "</span></span><br><span class="line">+ <span class="string">"GROUP BY o.customer "</span></span><br><span class="line">+ <span class="string">"HAVING count(o.id) &gt;= 2"</span>;</span><br><span class="line">List&lt;Customer&gt; customers = entityManager.createQuery(jpql).getResultList();</span><br><span class="line"></span><br><span class="line">System.out.println(customers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrderBy</span><span class="params">()</span></span>&#123;</span><br><span class="line">String jpql = <span class="string">"FROM Customer c WHERE c.age &gt; ? ORDER BY c.age DESC"</span>;</span><br><span class="line">Query query = entityManager.createQuery(jpql).setHint(QueryHints.HINT_CACHEABLE, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//占位符的索引是从 1 开始</span></span><br><span class="line">query.setParameter(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">List&lt;Customer&gt; customers = query.getResultList();</span><br><span class="line">System.out.println(customers.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 hibernate 的查询缓存. </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">String jpql = <span class="string">"FROM Customer c WHERE c.age &gt; ?"</span>;</span><br><span class="line">Query query = entityManager.createQuery(jpql).setHint(QueryHints.HINT_CACHEABLE, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//占位符的索引是从 1 开始</span></span><br><span class="line">query.setParameter(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">List&lt;Customer&gt; customers = query.getResultList();</span><br><span class="line">System.out.println(customers.size());</span><br><span class="line"></span><br><span class="line">query = entityManager.createQuery(jpql).setHint(QueryHints.HINT_CACHEABLE, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//占位符的索引是从 1 开始</span></span><br><span class="line">query.setParameter(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">customers = query.getResultList();</span><br><span class="line">System.out.println(customers.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//createNativeQuery 适用于本地 SQL</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNativeQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">String sql = <span class="string">"SELECT age FROM jpa_cutomers WHERE id = ?"</span>;</span><br><span class="line">Query query = entityManager.createNativeQuery(sql).setParameter(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Object result = query.getSingleResult();</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//createNamedQuery 适用于在实体类前使用 @NamedQuery 标记的查询语句</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNamedQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">Query query = entityManager.createNamedQuery(<span class="string">"testNamedQuery"</span>).setParameter(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">Customer customer = (Customer) query.getSingleResult();</span><br><span class="line"></span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认情况下, 若只查询部分属性, 则将返回 Object[] 类型的结果. 或者 Object[] 类型的 List.</span></span><br><span class="line"><span class="comment">//也可以在实体类中创建对应的构造器, 然后再 JPQL 语句中利用对应的构造器返回实体类的对象.</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPartlyProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line">String jpql = <span class="string">"SELECT new Customer(c.lastName, c.age) FROM Customer c WHERE c.id &gt; ?"</span>;</span><br><span class="line">List result = entityManager.createQuery(jpql).setParameter(<span class="number">1</span>, <span class="number">1</span>).getResultList();</span><br><span class="line"></span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloJPQL</span><span class="params">()</span></span>&#123;</span><br><span class="line">String jpql = <span class="string">"FROM Customer c WHERE c.age &gt; ?"</span>;</span><br><span class="line">Query query = entityManager.createQuery(jpql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//占位符的索引是从 1 开始</span></span><br><span class="line">query.setParameter(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">List&lt;Customer&gt; customers = query.getResultList();</span><br><span class="line">System.out.println(customers.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSecondLevelCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer1 = entityManager.find(Customer.class, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">transaction.commit();</span><br><span class="line">entityManager.close();</span><br><span class="line"></span><br><span class="line">entityManager = entityManagerFactory.createEntityManager();</span><br><span class="line">transaction = entityManager.getTransaction();</span><br><span class="line">transaction.begin();</span><br><span class="line"></span><br><span class="line">Customer customer2 = entityManager.find(Customer.class, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于关联的集合对象, 默认使用懒加载的策略.</span></span><br><span class="line"><span class="comment">//使用维护关联关系的一方获取, 还是使用不维护关联关系的一方获取, SQL 语句相同. </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testManyToManyFind</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//Item item = entityManager.find(Item.class, 5);</span></span><br><span class="line"><span class="comment">//System.out.println(item.getItemName());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//System.out.println(item.getCategories().size());</span></span><br><span class="line"></span><br><span class="line">Category category = entityManager.find(Category.class, <span class="number">3</span>);</span><br><span class="line">System.out.println(category.getCategoryName());</span><br><span class="line">System.out.println(category.getItems().size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多对所的保存</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testManyToManyPersist</span><span class="params">()</span></span>&#123;</span><br><span class="line">Item i1 = <span class="keyword">new</span> Item();</span><br><span class="line">i1.setItemName(<span class="string">"i-1"</span>);</span><br><span class="line"></span><br><span class="line">Item i2 = <span class="keyword">new</span> Item();</span><br><span class="line">i2.setItemName(<span class="string">"i-2"</span>);</span><br><span class="line"></span><br><span class="line">Category c1 = <span class="keyword">new</span> Category();</span><br><span class="line">c1.setCategoryName(<span class="string">"C-1"</span>);</span><br><span class="line"></span><br><span class="line">Category c2 = <span class="keyword">new</span> Category();</span><br><span class="line">c2.setCategoryName(<span class="string">"C-2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置关联关系</span></span><br><span class="line">i1.getCategories().add(c1);</span><br><span class="line">i1.getCategories().add(c2);</span><br><span class="line"></span><br><span class="line">i2.getCategories().add(c1);</span><br><span class="line">i2.getCategories().add(c2);</span><br><span class="line"></span><br><span class="line">c1.getItems().add(i1);</span><br><span class="line">c1.getItems().add(i2);</span><br><span class="line"></span><br><span class="line">c2.getItems().add(i1);</span><br><span class="line">c2.getItems().add(i2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行保存</span></span><br><span class="line">entityManager.persist(i1);</span><br><span class="line">entityManager.persist(i2);</span><br><span class="line">entityManager.persist(c1);</span><br><span class="line">entityManager.persist(c2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 默认情况下, 若获取不维护关联关系的一方, 则也会通过左外连接获取其关联的对象. </span></span><br><span class="line"><span class="comment">//可以通过 @OneToOne 的 fetch 属性来修改加载策略. 但依然会再发送 SQL 语句来初始化其关联的对象</span></span><br><span class="line"><span class="comment">//这说明在不维护关联关系的一方, 不建议修改 fetch 属性. </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneToOneFind2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Manager mgr = entityManager.find(Manager.class, <span class="number">1</span>);</span><br><span class="line">System.out.println(mgr.getMgrName());</span><br><span class="line"></span><br><span class="line">System.out.println(mgr.getDept().getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.默认情况下, 若获取维护关联关系的一方, 则会通过左外连接获取其关联的对象. </span></span><br><span class="line"><span class="comment">//但可以通过 @OntToOne 的 fetch 属性来修改加载策略.</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneToOneFind</span><span class="params">()</span></span>&#123;</span><br><span class="line">Department dept = entityManager.find(Department.class, <span class="number">1</span>);</span><br><span class="line">System.out.println(dept.getDeptName());</span><br><span class="line">System.out.println(dept.getMgr().getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双向 1-1 的关联关系, 建议先保存不维护关联关系的一方, 即没有外键的一方, 这样不会多出 UPDATE 语句.</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneToOnePersistence</span><span class="params">()</span></span>&#123;</span><br><span class="line">Manager mgr = <span class="keyword">new</span> Manager();</span><br><span class="line">mgr.setMgrName(<span class="string">"M-BB"</span>);</span><br><span class="line"></span><br><span class="line">Department dept = <span class="keyword">new</span> Department();</span><br><span class="line">dept.setDeptName(<span class="string">"D-BB"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置关联关系</span></span><br><span class="line">mgr.setDept(dept);</span><br><span class="line">dept.setMgr(mgr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行保存操作</span></span><br><span class="line">entityManager.persist(mgr);</span><br><span class="line">entityManager.persist(dept);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = entityManager.find(Customer.class, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">customer.getOrders().iterator().next().setOrderName(<span class="string">"O-XXX-10"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认情况下, 若删除 1 的一端, 则会先把关联的 n 的一端的外键置空, 然后进行删除. </span></span><br><span class="line"><span class="comment">//可以通过 @OneToMany 的 cascade 属性来修改默认的删除策略. </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneToManyRemove</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = entityManager.find(Customer.class, <span class="number">8</span>);</span><br><span class="line">entityManager.remove(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认对关联的多的一方使用懒加载的加载策略. </span></span><br><span class="line"><span class="comment">//可以使用 @OneToMany 的 fetch 属性来修改默认的加载策略</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneToManyFind</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = entityManager.find(Customer.class, <span class="number">9</span>);</span><br><span class="line">System.out.println(customer.getLastName());</span><br><span class="line"></span><br><span class="line">System.out.println(customer.getOrders().size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若是双向 1-n 的关联关系, 执行保存时</span></span><br><span class="line"><span class="comment">//若先保存 n 的一端, 再保存 1 的一端, 默认情况下, 会多出 n 条 UPDATE 语句.</span></span><br><span class="line"><span class="comment">//若先保存 1 的一端, 则会多出 n 条 UPDATE 语句</span></span><br><span class="line"><span class="comment">//在进行双向 1-n 关联关系时, 建议使用 n 的一方来维护关联关系, 而 1 的一方不维护关联系, 这样会有效的减少 SQL 语句. </span></span><br><span class="line"><span class="comment">//注意: 若在 1 的一端的 @OneToMany 中使用 mappedBy 属性, 则 @OneToMany 端就不能再使用 @JoinColumn 属性了. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//单向 1-n 关联关系执行保存时, 一定会多出 UPDATE 语句.</span></span><br><span class="line"><span class="comment">//因为 n 的一端在插入时不会同时插入外键列. </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneToManyPersist</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">customer.setAge(<span class="number">18</span>);</span><br><span class="line">customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line">customer.setCreatedTime(<span class="keyword">new</span> Date());</span><br><span class="line">customer.setEmail(<span class="string">"mm@163.com"</span>);</span><br><span class="line">customer.setLastName(<span class="string">"MM"</span>);</span><br><span class="line"></span><br><span class="line">Order order1 = <span class="keyword">new</span> Order();</span><br><span class="line">order1.setOrderName(<span class="string">"O-MM-1"</span>);</span><br><span class="line"></span><br><span class="line">Order order2 = <span class="keyword">new</span> Order();</span><br><span class="line">order2.setOrderName(<span class="string">"O-MM-2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立关联关系</span></span><br><span class="line">customer.getOrders().add(order1);</span><br><span class="line">customer.getOrders().add(order2);</span><br><span class="line"></span><br><span class="line">order1.setCustomer(customer);</span><br><span class="line">order2.setCustomer(customer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行保存操作</span></span><br><span class="line">entityManager.persist(customer);</span><br><span class="line"></span><br><span class="line">entityManager.persist(order1);</span><br><span class="line">entityManager.persist(order2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Test</span></span><br><span class="line"><span class="comment">public void testManyToOneUpdate()&#123;</span></span><br><span class="line"><span class="comment">Order order = entityManager.find(Order.class, 2);</span></span><br><span class="line"><span class="comment">order.getCustomer().setLastName("FFF");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//不能直接删除 1 的一端, 因为有外键约束. </span></span><br><span class="line"><span class="comment">@Test</span></span><br><span class="line"><span class="comment">public void testManyToOneRemove()&#123;</span></span><br><span class="line"><span class="comment">//Order order = entityManager.find(Order.class, 1);</span></span><br><span class="line"><span class="comment">//entityManager.remove(order);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Customer customer = entityManager.find(Customer.class, 7);</span></span><br><span class="line"><span class="comment">entityManager.remove(customer);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//默认情况下, 使用左外连接的方式来获取 n 的一端的对象和其关联的 1 的一端的对象. </span></span><br><span class="line"><span class="comment">//可使用 @ManyToOne 的 fetch 属性来修改默认的关联属性的加载策略</span></span><br><span class="line"><span class="comment">@Test</span></span><br><span class="line"><span class="comment">public void testManyToOneFind()&#123;</span></span><br><span class="line"><span class="comment">Order order = entityManager.find(Order.class, 1);</span></span><br><span class="line"><span class="comment">System.out.println(order.getOrderName());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">System.out.println(order.getCustomer().getLastName());</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存多对一时, 建议先保存 1 的一端, 后保存 n 的一端, 这样不会多出额外的 UPDATE 语句.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Test</span></span><br><span class="line"><span class="comment">public void testManyToOnePersist()&#123;</span></span><br><span class="line"><span class="comment">Customer customer = new Customer();</span></span><br><span class="line"><span class="comment">customer.setAge(18);</span></span><br><span class="line"><span class="comment">customer.setBirth(new Date());</span></span><br><span class="line"><span class="comment">customer.setCreatedTime(new Date());</span></span><br><span class="line"><span class="comment">customer.setEmail("gg@163.com");</span></span><br><span class="line"><span class="comment">customer.setLastName("GG");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Order order1 = new Order();</span></span><br><span class="line"><span class="comment">order1.setOrderName("G-GG-1");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Order order2 = new Order();</span></span><br><span class="line"><span class="comment">order2.setOrderName("G-GG-2");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//设置关联关系</span></span><br><span class="line"><span class="comment">order1.setCustomer(customer);</span></span><br><span class="line"><span class="comment">order2.setCustomer(customer);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//执行保存操作</span></span><br><span class="line"><span class="comment">entityManager.persist(order1);</span></span><br><span class="line"><span class="comment">entityManager.persist(order2);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">entityManager.persist(customer);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同 hibernate 中 Session 的 refresh 方法. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRefresh</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = entityManager.find(Customer.class, <span class="number">1</span>);</span><br><span class="line">customer = entityManager.find(Customer.class, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">entityManager.refresh(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同 hibernate 中 Session 的 flush 方法. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFlush</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = entityManager.find(Customer.class, <span class="number">1</span>);</span><br><span class="line">System.out.println(customer);</span><br><span class="line"></span><br><span class="line">customer.setLastName(<span class="string">"AA"</span>);</span><br><span class="line"></span><br><span class="line">entityManager.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若传入的是一个游离对象, 即传入的对象有 OID. </span></span><br><span class="line"><span class="comment">//1. 若在 EntityManager 缓存中有对应的对象</span></span><br><span class="line"><span class="comment">//2. JPA 会把游离对象的属性复制到查询到EntityManager 缓存中的对象中.</span></span><br><span class="line"><span class="comment">//3. EntityManager 缓存中的对象执行 UPDATE. </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMerge4</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">customer.setAge(<span class="number">18</span>);</span><br><span class="line">customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line">customer.setCreatedTime(<span class="keyword">new</span> Date());</span><br><span class="line">customer.setEmail(<span class="string">"dd@163.com"</span>);</span><br><span class="line">customer.setLastName(<span class="string">"DD"</span>);</span><br><span class="line"></span><br><span class="line">customer.setId(<span class="number">4</span>);</span><br><span class="line">Customer customer2 = entityManager.find(Customer.class, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">entityManager.merge(customer);</span><br><span class="line"></span><br><span class="line">System.out.println(customer == customer2); <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若传入的是一个游离对象, 即传入的对象有 OID. </span></span><br><span class="line"><span class="comment">//1. 若在 EntityManager 缓存中没有该对象</span></span><br><span class="line"><span class="comment">//2. 若在数据库中也有对应的记录</span></span><br><span class="line"><span class="comment">//3. JPA 会查询对应的记录, 然后返回该记录对一个的对象, 再然后会把游离对象的属性复制到查询到的对象中.</span></span><br><span class="line"><span class="comment">//4. 对查询到的对象执行 update 操作. </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMerge3</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">customer.setAge(<span class="number">18</span>);</span><br><span class="line">customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line">customer.setCreatedTime(<span class="keyword">new</span> Date());</span><br><span class="line">customer.setEmail(<span class="string">"ee@163.com"</span>);</span><br><span class="line">customer.setLastName(<span class="string">"EE"</span>);</span><br><span class="line"></span><br><span class="line">customer.setId(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">Customer customer2 = entityManager.merge(customer);</span><br><span class="line"></span><br><span class="line">System.out.println(customer == customer2); <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若传入的是一个游离对象, 即传入的对象有 OID. </span></span><br><span class="line"><span class="comment">//1. 若在 EntityManager 缓存中没有该对象</span></span><br><span class="line"><span class="comment">//2. 若在数据库中也没有对应的记录</span></span><br><span class="line"><span class="comment">//3. JPA 会创建一个新的对象, 然后把当前游离对象的属性复制到新创建的对象中</span></span><br><span class="line"><span class="comment">//4. 对新创建的对象执行 insert 操作. </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMerge2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">customer.setAge(<span class="number">18</span>);</span><br><span class="line">customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line">customer.setCreatedTime(<span class="keyword">new</span> Date());</span><br><span class="line">customer.setEmail(<span class="string">"dd@163.com"</span>);</span><br><span class="line">customer.setLastName(<span class="string">"DD"</span>);</span><br><span class="line"></span><br><span class="line">customer.setId(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">Customer customer2 = entityManager.merge(customer);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"customer#id:"</span> + customer.getId());</span><br><span class="line">System.out.println(<span class="string">"customer2#id:"</span> + customer2.getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 总的来说: 类似于 hibernate Session 的 saveOrUpdate 方法.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1. 若传入的是一个临时对象</span></span><br><span class="line"><span class="comment">//会创建一个新的对象, 把临时对象的属性复制到新的对象中, 然后对新的对象执行持久化操作. 所以</span></span><br><span class="line"><span class="comment">//新的对象中有 id, 但以前的临时对象中没有 id. </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMerge1</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">customer.setAge(<span class="number">18</span>);</span><br><span class="line">customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line">customer.setCreatedTime(<span class="keyword">new</span> Date());</span><br><span class="line">customer.setEmail(<span class="string">"cc@163.com"</span>);</span><br><span class="line">customer.setLastName(<span class="string">"CC"</span>);</span><br><span class="line"></span><br><span class="line">Customer customer2 = entityManager.merge(customer);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"customer#id:"</span> + customer.getId());</span><br><span class="line">System.out.println(<span class="string">"customer2#id:"</span> + customer2.getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类似于 hibernate 中 Session 的 delete 方法. 把对象对应的记录从数据库中移除</span></span><br><span class="line"><span class="comment">//但注意: 该方法只能移除 持久化 对象. 而 hibernate 的 delete 方法实际上还可以移除 游离对象.</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//Customer customer = new Customer();</span></span><br><span class="line"><span class="comment">//customer.setId(2);</span></span><br><span class="line"></span><br><span class="line">Customer customer = entityManager.find(Customer.class, <span class="number">2</span>);</span><br><span class="line">entityManager.remove(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类似于 hibernate 的 save 方法. 使对象由临时状态变为持久化状态. </span></span><br><span class="line"><span class="comment">//和 hibernate 的 save 方法的不同之处: 若对象有 id, 则不能执行 insert 操作, 而会抛出异常. </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPersistence</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">customer.setAge(<span class="number">15</span>);</span><br><span class="line">customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line">customer.setCreatedTime(<span class="keyword">new</span> Date());</span><br><span class="line">customer.setEmail(<span class="string">"bb@163.com"</span>);</span><br><span class="line">customer.setLastName(<span class="string">"BB"</span>);</span><br><span class="line">customer.setId(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">entityManager.persist(customer);</span><br><span class="line">System.out.println(customer.getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类似于 hibernate 中 Session 的 load 方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetReference</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = entityManager.getReference(Customer.class, <span class="number">1</span>);</span><br><span class="line">System.out.println(customer.getClass().getName());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-------------------------------------"</span>);</span><br><span class="line"><span class="comment">//transaction.commit();</span></span><br><span class="line"><span class="comment">//entityManager.close();</span></span><br><span class="line"></span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类似于 hibernate 中 Session 的 get 方法. </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Customer customer = entityManager.find(Customer.class, <span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"-------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单向多对一映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name=<span class="string">"JPA_ORDERS"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String orderName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Customer customer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"ORDER_NAME"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getOrderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orderName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderName</span><span class="params">(String orderName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//映射单向 n-1 的关联关系</span></span><br><span class="line"><span class="comment">//使用 @ManyToOne 来映射多对一的关联关系</span></span><br><span class="line"><span class="comment">//使用 @JoinColumn 来映射外键. </span></span><br><span class="line"><span class="comment">//可使用 @ManyToOne 的 fetch 属性来修改默认的关联属性的加载策略</span></span><br><span class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"CUSTOMER_ID"</span>)</span><br><span class="line"><span class="meta">@ManyToOne</span>(fetch=FetchType.LAZY)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customer = customer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单向一对多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NamedQuery</span>(name=<span class="string">"testNamedQuery"</span>, query=<span class="string">"FROM Customer c WHERE c.id = ?"</span>)</span><br><span class="line"><span class="meta">@Cacheable</span>(<span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"JPA_CUTOMERS"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Date createdTime;</span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String lastName, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.lastName = lastName;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;Order&gt; orders = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//@TableGenerator(name="ID_GENERATOR",</span></span><br><span class="line"><span class="comment">//table="jpa_id_generators",</span></span><br><span class="line"><span class="comment">//pkColumnName="PK_NAME",</span></span><br><span class="line"><span class="comment">//pkColumnValue="CUSTOMER_ID",</span></span><br><span class="line"><span class="comment">//valueColumnName="PK_VALUE",</span></span><br><span class="line"><span class="comment">//allocationSize=100)</span></span><br><span class="line"><span class="comment">//@GeneratedValue(strategy=GenerationType.TABLE,generator="ID_GENERATOR")</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.AUTO)</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"LAST_NAME"</span>,length=<span class="number">50</span>,nullable=<span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Temporal</span>(TemporalType.TIMESTAMP)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getCreatedTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> createdTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreatedTime</span><span class="params">(Date createdTime)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.createdTime = createdTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Temporal</span>(TemporalType.DATE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.birth = birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//映射单向 1-n 的关联关系</span></span><br><span class="line"><span class="comment">//使用 @OneToMany 来映射 1-n 的关联关系</span></span><br><span class="line"><span class="comment">//使用 @JoinColumn 来映射外键列的名称</span></span><br><span class="line"><span class="comment">//可以使用 @OneToMany 的 fetch 属性来修改默认的加载策略</span></span><br><span class="line"><span class="comment">//可以通过 @OneToMany 的 cascade 属性来修改默认的删除策略. </span></span><br><span class="line"><span class="comment">//注意: 若在 1 的一端的 @OneToMany 中使用 mappedBy(类似inverse,由多的一方来维护关联关系) 属性, 则 @OneToMany 端就不能再使用 @JoinColumn 属性了. </span></span><br><span class="line"><span class="comment">//@JoinColumn(name="CUSTOMER_ID")</span></span><br><span class="line"><span class="meta">@OneToMany</span>(fetch=FetchType.LAZY,cascade=&#123;CascadeType.REMOVE&#125;,mappedBy=<span class="string">"customer"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Order&gt; <span class="title">getOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orders;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrders</span><span class="params">(Set&lt;Order&gt; orders)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orders = orders;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工具方法. 不需要映射为数据表的一列. </span></span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"lastName: "</span> + lastName + <span class="string">", email: "</span> + email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Customer [id="</span> + id + <span class="string">", lastName="</span> + lastName + <span class="string">", email="</span></span><br><span class="line">+ email + <span class="string">", age="</span> + age + <span class="string">", createdTime="</span> + createdTime</span><br><span class="line">+ <span class="string">", birth="</span> + birth + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双向一对多(多对一)</p><p>单向一对多和单向多对一的组合(注意使用mappedBy提高性能，防止执行多余的update语句)。</p></li><li><p>双向一对一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name=<span class="string">"JPA_DEPARTMENTS"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String deptName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Manager mgr;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"DEPT_NAME"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDeptName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> deptName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptName</span><span class="params">(String deptName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.deptName = deptName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 @OneToOne 来映射 1-1 关联关系。</span></span><br><span class="line"><span class="comment">//若需要在当前数据表中添加外键则需要使用 @JoinColumn 来进行映射. 注意, 1-1 关联关系, 所以需要添加 unique=true</span></span><br><span class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"MGR_ID"</span>, unique=<span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@OneToOne</span>(fetch=FetchType.LAZY)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Manager <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mgr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(Manager mgr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">====================================================</span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"JPA_MANAGERS"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String mgrName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Department dept;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"MGR_NAME"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMgrName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mgrName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgrName</span><span class="params">(String mgrName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mgrName = mgrName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于不维护关联关系, 没有外键的一方, 使用 @OneToOne 来进行映射, 建议设置 mappedBy=true</span></span><br><span class="line"><span class="meta">@OneToOne</span>(mappedBy=<span class="string">"mgr"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Department <span class="title">getDept</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dept;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Department dept)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dept = dept;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双向多对多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name=<span class="string">"JPA_CATEGORIES"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;Item&gt; items = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"CATEGORY_NAME"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCategoryName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> categoryName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategoryName</span><span class="params">(String categoryName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.categoryName = categoryName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ManyToMany</span>(mappedBy=<span class="string">"categories"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Item&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(Set&lt;Item&gt; items)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.items = items;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">================================================</span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"JPA_ITEMS"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String itemName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;Category&gt; categories = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"ITEM_NAME"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getItemName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> itemName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItemName</span><span class="params">(String itemName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.itemName = itemName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 @ManyToMany 注解来映射多对多关联关系</span></span><br><span class="line"><span class="comment">//使用 @JoinTable 来映射中间表</span></span><br><span class="line"><span class="comment">//1. name 指向中间表的名字</span></span><br><span class="line"><span class="comment">//2. joinColumns 映射当前类所在的表在中间表中的外键</span></span><br><span class="line"><span class="comment">//2.1 name 指定外键列的列名</span></span><br><span class="line"><span class="comment">//2.2 referencedColumnName 指定外键列关联当前表的哪一列</span></span><br><span class="line"><span class="comment">//3. inverseJoinColumns 映射关联的类所在中间表的外键</span></span><br><span class="line"><span class="meta">@JoinTable</span>(name=<span class="string">"ITEM_CATEGORY"</span>,</span><br><span class="line">joinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"ITEM_ID"</span>, referencedColumnName=<span class="string">"ID"</span>)&#125;,</span><br><span class="line">inverseJoinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"CATEGORY_ID"</span>, referencedColumnName=<span class="string">"ID"</span>)&#125;)</span><br><span class="line"><span class="meta">@ManyToMany</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Category&gt; <span class="title">getCategories</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> categories;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategories</span><span class="params">(Set&lt;Category&gt; categories)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.categories = categories;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hibernate映射关系</title>
      <link href="/2018/12/11/hibernate%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2018/12/11/hibernate%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/haominglfs/images/master/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png" alt="实体映射关系"></p><a id="more"></a><h3 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer customerId;</span><br><span class="line"><span class="keyword">private</span> String customerName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getCustomerId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customerId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerId</span><span class="params">(Integer customerId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customerId = customerId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustomerName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customerName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerName</span><span class="params">(String customerName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customerName = customerName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer orderId;</span><br><span class="line"><span class="keyword">private</span> String orderName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Customer customer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orderId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(Integer orderId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getOrderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orderName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderName</span><span class="params">(String orderName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customer = customer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单向一对多"><a href="#单向一对多" class="headerlink" title="单向一对多"></a>单向一对多</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.atguigu.hibernate.entities.n21"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Order"</span> <span class="attr">table</span>=<span class="string">"ORDERS"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"orderId"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"ORDER_ID"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"orderName"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"ORDER_NAME"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">映射多对一的关联关系。 使用 many-to-one 来映射多对一的关联关系 </span></span><br><span class="line"><span class="comment">name: 多这一端关联的一那一端的属性的名字</span></span><br><span class="line"><span class="comment">class: 一那一端的属性对应的类名</span></span><br><span class="line"><span class="comment">column: 一那一端在多的一端对应的数据表中的外键的名字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"Customer"</span> <span class="attr">column</span>=<span class="string">"CUSTOMER_ID"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMany2OneSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">customer.setCustomerName(<span class="string">"BB"</span>);</span><br><span class="line"></span><br><span class="line">Order order1 = <span class="keyword">new</span> Order();</span><br><span class="line">order1.setOrderName(<span class="string">"ORDER-3"</span>);</span><br><span class="line"></span><br><span class="line">Order order2 = <span class="keyword">new</span> Order();</span><br><span class="line">order2.setOrderName(<span class="string">"ORDER-4"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设定关联关系</span></span><br><span class="line">order1.setCustomer(customer);</span><br><span class="line">order2.setCustomer(customer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行  save 操作: 先插入 Customer, 再插入 Order, 3 条 INSERT</span></span><br><span class="line"><span class="comment">//先插入 1 的一端, 再插入 n 的一端, 只有 INSERT 语句.</span></span><br><span class="line">    <span class="comment">//session.save(customer);</span></span><br><span class="line">       </span><br><span class="line"><span class="comment">//session.save(order1);</span></span><br><span class="line"><span class="comment">//session.save(order2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先插入 Order, 再插入 Customer. 3 条 INSERT, 2 条 UPDATE</span></span><br><span class="line"><span class="comment">//先插入 n 的一端, 再插入 1 的一端, 会多出 UPDATE 语句!</span></span><br><span class="line"><span class="comment">//因为在插入多的一端时, 无法确定 1 的一端的外键值. 所以只能等 1 的一端插入后, 再额外发送 UPDATE 语句.</span></span><br><span class="line"><span class="comment">//推荐先插入 1 的一端, 后插入 n 的一端</span></span><br><span class="line">session.save(order1);</span><br><span class="line">session.save(order2);</span><br><span class="line">session.save(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMany2OneGet</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1. 若查询多的一端的一个对象, 则默认情况下, 只查询了多的一端的对象. 而没有查询关联的</span></span><br><span class="line"><span class="comment">//1 的那一端的对象!</span></span><br><span class="line">Order order = (Order) session.get(Order.class, <span class="number">1</span>);</span><br><span class="line">System.out.println(order.getOrderName()); </span><br><span class="line"></span><br><span class="line">System.out.println(order.getCustomer().getClass().getName());</span><br><span class="line"></span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 在需要使用到关联的对象时, 才发送对应的 SQL 语句. </span></span><br><span class="line">Customer customer = order.getCustomer();</span><br><span class="line">System.out.println(customer.getCustomerName()); </span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 在查询 Customer 对象时, 由多的一端导航到 1 的一端时, </span></span><br><span class="line"><span class="comment">//若此时 session 已被关闭, 则默认情况下</span></span><br><span class="line"><span class="comment">//会发生 LazyInitializationException 异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 获取 Order 对象时, 默认情况下, 其关联的 Customer 对象是一个代理对象!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//在不设定级联关系的情况下, 且 1 这一端的对象有 n 的对象在引用, 不能直接删除 1 这一端的对象</span></span><br><span class="line">Customer customer = (Customer) session.get(Customer.class, <span class="number">1</span>);</span><br><span class="line">session.delete(customer); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">Order order = (Order) session.get(Order.class, <span class="number">1</span>);</span><br><span class="line">order.getCustomer().setCustomerName(<span class="string">"AAA"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向一对多"><a href="#双向一对多" class="headerlink" title="双向一对多"></a>双向一对多</h3><ul><li>java代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer customerId;</span><br><span class="line"><span class="keyword">private</span> String customerName;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1. 声明集合类型时, 需使用接口类型, 因为 hibernate 在获取</span></span><br><span class="line"><span class="comment"> * 集合类型时, 返回的是 Hibernate 内置的集合类型, 而不是 JavaSE 一个标准的</span></span><br><span class="line"><span class="comment"> * 集合实现. </span></span><br><span class="line"><span class="comment"> * 2. 需要把集合进行初始化, 可以防止发生空指针异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Order&gt; orders = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getCustomerId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customerId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerId</span><span class="params">(Integer customerId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customerId = customerId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustomerName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customerName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerName</span><span class="params">(String customerName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customerName = customerName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Order&gt; <span class="title">getOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orders;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrders</span><span class="params">(Set&lt;Order&gt; orders)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orders = orders;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer orderId;</span><br><span class="line"><span class="keyword">private</span> String orderName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Customer customer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orderId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(Integer orderId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getOrderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orderName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderName</span><span class="params">(String orderName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customer = customer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>映射配置(多的一端配置与单向相同)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.atguigu.hibernate.entities.n21.both"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Customer"</span> <span class="attr">table</span>=<span class="string">"CUSTOMERS"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"customerId"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"CUSTOMER_ID"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerName"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"CUSTOMER_NAME"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 映射 1 对多的那个集合属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- set: 映射 set 类型的属性, table: set 中的元素对应的记录放在哪一个数据表中. 该值需要和多对一的多的那个表的名字一致 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- inverse: 指定由哪一方来维护关联关系. 通常设置为 true, 以指定由多的一端来维护关联关系 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- cascade 设定级联操作. 开发时不建议设定该属性. 建议使用手工的方式来处理 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- order-by 在查询时对集合中的元素进行排序, order-by 中使用的是表的字段名, 而不是持久化类的属性名  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span> <span class="attr">table</span>=<span class="string">"ORDERS"</span> <span class="attr">inverse</span>=<span class="string">"true"</span> <span class="attr">order-by</span>=<span class="string">"ORDER_NAME DESC"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 执行多的表中的外键列的名字 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"CUSTOMER_ID"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定映射类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"Order"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCascade</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = (Customer) session.get(Customer.class, <span class="number">3</span>);</span><br><span class="line">customer.getOrders().clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//在不设定级联关系的情况下, 且 1 这一端的对象有 n 的对象在引用, 不能直接删除 1 这一端的对象</span></span><br><span class="line">Customer customer = (Customer) session.get(Customer.class, <span class="number">1</span>);</span><br><span class="line">session.delete(customer); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdat2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = (Customer) session.get(Customer.class, <span class="number">1</span>);</span><br><span class="line">customer.getOrders().iterator().next().setOrderName(<span class="string">"GGG"</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">Order order = (Order) session.get(Order.class, <span class="number">1</span>);</span><br><span class="line">order.getCustomer().setCustomerName(<span class="string">"AAA"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOne2ManyGet</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1. 对 n 的一端的集合使用延迟加载</span></span><br><span class="line">Customer customer = (Customer) session.get(Customer.class, <span class="number">7</span>);</span><br><span class="line">System.out.println(customer.getCustomerName()); </span><br><span class="line"><span class="comment">//2. 返回的多的一端的集合时 Hibernate 内置的集合类型. </span></span><br><span class="line"><span class="comment">//该类型具有延迟加载和存放代理对象的功能. </span></span><br><span class="line">System.out.println(customer.getOrders().getClass()); </span><br><span class="line"></span><br><span class="line"><span class="comment">//session.close();</span></span><br><span class="line"><span class="comment">//3. 可能会抛出 LazyInitializationException 异常 </span></span><br><span class="line"></span><br><span class="line">System.out.println(customer.getOrders().size()); </span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 再需要使用集合中元素的时候进行初始化. </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMany2OneGet</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1. 若查询多的一端的一个对象, 则默认情况下, 只查询了多的一端的对象. 而没有查询关联的</span></span><br><span class="line"><span class="comment">//1 的那一端的对象!</span></span><br><span class="line">Order order = (Order) session.get(Order.class, <span class="number">1</span>);</span><br><span class="line">System.out.println(order.getOrderName()); </span><br><span class="line"></span><br><span class="line">System.out.println(order.getCustomer().getClass().getName());</span><br><span class="line"></span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 在需要使用到关联的对象时, 才发送对应的 SQL 语句. </span></span><br><span class="line">Customer customer = order.getCustomer();</span><br><span class="line">System.out.println(customer.getCustomerName()); </span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 在查询 Customer 对象时, 由多的一端导航到 1 的一端时, </span></span><br><span class="line"><span class="comment">//若此时 session 已被关闭, 则默认情况下</span></span><br><span class="line"><span class="comment">//会发生 LazyInitializationException 异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 获取 Order 对象时, 默认情况下, 其关联的 Customer 对象是一个代理对象!</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMany2OneSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">customer.setCustomerName(<span class="string">"AA"</span>);</span><br><span class="line"></span><br><span class="line">Order order1 = <span class="keyword">new</span> Order();</span><br><span class="line">order1.setOrderName(<span class="string">"ORDER-1"</span>);</span><br><span class="line"></span><br><span class="line">Order order2 = <span class="keyword">new</span> Order();</span><br><span class="line">order2.setOrderName(<span class="string">"ORDER-2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设定关联关系</span></span><br><span class="line">order1.setCustomer(customer);</span><br><span class="line">order2.setCustomer(customer);</span><br><span class="line"></span><br><span class="line">customer.getOrders().add(order1);</span><br><span class="line">customer.getOrders().add(order2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行  save 操作: 先插入 Customer, 再插入 Order, 3 条 INSERT, 2 条 UPDATE</span></span><br><span class="line"><span class="comment">//因为 1 的一端和 n 的一端都维护关联关系. 所以会多出 UPDATE</span></span><br><span class="line"><span class="comment">//可以在 1 的一端的 set 节点指定 inverse=true, 来使 1 的一端放弃维护关联关系!</span></span><br><span class="line"><span class="comment">//建议设定 set 的 inverse=true, 建议先插入 1 的一端, 后插入多的一端</span></span><br><span class="line"><span class="comment">//好处是不会多出 UPDATE 语句</span></span><br><span class="line">session.save(customer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//session.save(order1);</span></span><br><span class="line"><span class="comment">//session.save(order2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先插入 Order, 再插入 Cusomer, 3 条 INSERT, 4 条 UPDATE</span></span><br><span class="line"><span class="comment">//session.save(order1);</span></span><br><span class="line"><span class="comment">//session.save(order2);</span></span><br><span class="line"><span class="comment">//session.save(customer);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="一对一-外键"><a href="#一对一-外键" class="headerlink" title="一对一(外键)"></a>一对一(外键)</h3><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer deptId;</span><br><span class="line"><span class="keyword">private</span> String deptName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Manager mgr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getDeptId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> deptId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptId</span><span class="params">(Integer deptId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.deptId = deptId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDeptName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> deptName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptName</span><span class="params">(String deptName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.deptName = deptName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Manager <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mgr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(Manager mgr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer mgrId;</span><br><span class="line"><span class="keyword">private</span> String mgrName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Department dept;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getMgrId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mgrId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgrId</span><span class="params">(Integer mgrId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mgrId = mgrId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMgrName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mgrName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgrName</span><span class="params">(String mgrName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mgrName = mgrName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Department <span class="title">getDept</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dept;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Department dept)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dept = dept;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.atguigu.hibernate.one2one.foreign.Manager"</span> <span class="attr">table</span>=<span class="string">"MANAGERS"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"mgrId"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"MGR_ID"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mgrName"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"MGR_NAME"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 映射 1-1 的关联关系: 在对应的数据表中已经有外键了, 当前持久化类使用 one-to-one 进行映射 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        没有外键的一端需要使用one-to-one元素，该元素使用 property-ref 属性指定使用被关联实体主键以外的字段作为关联字段(没有property-ref将使用dept主键做关联，否则使用mgr属性对应表字段做关联)</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"dept"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"com.atguigu.hibernate.one2one.foreign.Department"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">property-ref</span>=<span class="string">"mgr"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-one</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">====================================================</span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.atguigu.hibernate.one2one.foreign.Department"</span> <span class="attr">table</span>=<span class="string">"DEPARTMENTS"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"deptId"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"DEPT_ID"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deptName"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"DEPT_NAME"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 many-to-one 的方式来映射 1-1 关联关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"mgr"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.hibernate.one2one.foreign.Manager"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">column</span>=<span class="string">"MGR_ID"</span> <span class="attr">unique</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span>        </span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//在查询没有外键的实体对象时, 使用的左外连接查询, 一并查询出其关联的对象</span></span><br><span class="line"><span class="comment">//并已经进行初始化. </span></span><br><span class="line">Manager mgr = (Manager) session.get(Manager.class, <span class="number">1</span>);</span><br><span class="line">System.out.println(mgr.getMgrName()); </span><br><span class="line">System.out.println(mgr.getDept().getDeptName()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1. 默认情况下对关联属性使用懒加载</span></span><br><span class="line">Department dept = (Department) session.get(Department.class, <span class="number">1</span>);</span><br><span class="line">System.out.println(dept.getDeptName()); </span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 所以会出现懒加载异常的问题. </span></span><br><span class="line"><span class="comment">//session.close();</span></span><br><span class="line"><span class="comment">//Manager mgr = dept.getMgr();</span></span><br><span class="line"><span class="comment">//System.out.println(mgr.getClass()); </span></span><br><span class="line"><span class="comment">//System.out.println(mgr.getMgrName()); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 查询 Manager 对象的连接条件应该是 dept.manager_id = mgr.manager_id</span></span><br><span class="line"><span class="comment">//而不应该是 dept.dept_id = mgr.manager_id</span></span><br><span class="line">Manager mgr = dept.getMgr();</span><br><span class="line">System.out.println(mgr.getMgrName()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Department department = <span class="keyword">new</span> Department();</span><br><span class="line">department.setDeptName(<span class="string">"DEPT-BB"</span>);</span><br><span class="line"></span><br><span class="line">Manager manager = <span class="keyword">new</span> Manager();</span><br><span class="line">manager.setMgrName(<span class="string">"MGR-BB"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设定关联关系</span></span><br><span class="line">department.setMgr(manager);</span><br><span class="line">manager.setDept(department);</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存操作</span></span><br><span class="line"><span class="comment">//建议先保存没有外键列的那个对象. 这样会减少 UPDATE 语句</span></span><br><span class="line">session.save(department);</span><br><span class="line">session.save(manager);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="一对一-基于主键"><a href="#一对一-基于主键" class="headerlink" title="一对一(基于主键)"></a>一对一(基于主键)</h3><ul><li><p>实体类同上</p></li><li><p>映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.atguigu.hibernate.one2one.primary"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Department"</span> <span class="attr">table</span>=<span class="string">"DEPARTMENTS"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"deptId"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"DEPT_ID"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用外键的方式来生成当前的主键 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"foreign"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- property 属性指定使用当前持久化类的哪一个属性的主键作为外键 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"property"</span>&gt;</span>mgr<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deptName"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"DEPT_NAME"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">采用 foreign 主键生成器策略的一端增加 one-to-one 元素映射关联属性,</span></span><br><span class="line"><span class="comment">其 one-to-one 节点还应增加 constrained=true 属性, 以使当前的主键上添加外键约束</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"mgr"</span> <span class="attr">class</span>=<span class="string">"Manager"</span> <span class="attr">constrained</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-one</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">=================================================</span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.atguigu.hibernate.one2one.primary.Manager"</span> <span class="attr">table</span>=<span class="string">"MANAGERS"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"mgrId"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"MGR_ID"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mgrName"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"MGR_NAME"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"dept"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"com.atguigu.hibernate.one2one.primary.Department"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-one</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//在查询没有外键的实体对象时, 使用的左外连接查询, 一并查询出其关联的对象</span></span><br><span class="line"><span class="comment">//并已经进行初始化. </span></span><br><span class="line">Manager mgr = (Manager) session.get(Manager.class, <span class="number">1</span>);</span><br><span class="line">System.out.println(mgr.getMgrName()); </span><br><span class="line">System.out.println(mgr.getDept().getDeptName()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1. 默认情况下对关联属性使用懒加载</span></span><br><span class="line">Department dept = (Department) session.get(Department.class, <span class="number">1</span>);</span><br><span class="line">System.out.println(dept.getDeptName()); </span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 所以会出现懒加载异常的问题. </span></span><br><span class="line">Manager mgr = dept.getMgr();</span><br><span class="line">System.out.println(mgr.getMgrName()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Department department = <span class="keyword">new</span> Department();</span><br><span class="line">department.setDeptName(<span class="string">"DEPT-DD"</span>);</span><br><span class="line"></span><br><span class="line">Manager manager = <span class="keyword">new</span> Manager();</span><br><span class="line">manager.setMgrName(<span class="string">"MGR-DD"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设定关联关系</span></span><br><span class="line">manager.setDept(department);</span><br><span class="line">department.setMgr(manager);</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存操作</span></span><br><span class="line"><span class="comment">//先插入哪一个都不会有多余的 UPDATE</span></span><br><span class="line">session.save(department);</span><br><span class="line">session.save(manager);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="映射多对多"><a href="#映射多对多" class="headerlink" title="映射多对多"></a>映射多对多</h3><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;Item&gt; items = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Item&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(Set&lt;Item&gt; items)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.items = items;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;Category&gt; categories = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Category&gt; <span class="title">getCategories</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> categories;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategories</span><span class="params">(Set&lt;Category&gt; categories)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.categories = categories;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>映射(单向的配置为去掉一个的配置)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.atguigu.hibernate.n2n"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Category"</span> <span class="attr">table</span>=<span class="string">"CATEGORIES"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"ID"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"NAME"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- table: 指定中间表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"items"</span> <span class="attr">table</span>=<span class="string">"CATEGORIES_ITEMS"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"C_ID"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用 many-to-many 指定多对多的关联关系. column 执行 Set 集合中的持久化类在中间表的外键列的名称  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"Item"</span> <span class="attr">column</span>=<span class="string">"I_ID"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">======================================================</span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.atguigu.hibernate.n2n.Item"</span> <span class="attr">table</span>=<span class="string">"ITEMS"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"ID"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"NAME"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"categories"</span> <span class="attr">table</span>=<span class="string">"CATEGORIES_ITEMS"</span> <span class="attr">inverse</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"I_ID"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.atguigu.hibernate.n2n.Category"</span> <span class="attr">column</span>=<span class="string">"C_ID"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>映射继承关系</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解java虚拟机-读书笔记</title>
      <link href="/2018/11/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/11/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>1.局部变量表存放了编译期可知的各种基本数据类型(boolean\byte\char\short\int\float\long\double)、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置)和returnAddress类型(指向了一条字节码指令的地址)。</p><p>其中64位长度的long和double类型的数据会占用两个局部变量空间(slot),其余的数据类型只占用一个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p><p>在java虚拟机规范中，这个区域规定了两种异常状况：</p><pre><code>1. 如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverFlow异常；2. 如果栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-备忘录模式</title>
      <link href="/2018/11/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/11/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>保存一个对象的某个状态，以便在适当的时候恢复对象。</p><a id="more"></a><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li>保存及恢复数据相关业务场景。</li><li>后悔的时候，既想恢复到之前的状态。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>优点<ul><li>为用户提供一种可恢复的机制。</li><li>存档信息的封装。</li></ul></li><li>缺点<ul><li>资源占用。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-观察者模式</title>
      <link href="/2018/11/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/11/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>定义了对象之间的一对多依赖，让多个观察者对象同时监听某一个主题对象，当主题对象发生变化时，他的所有依赖者(观察者)都会收到通知并更新。</p><a id="more"></a><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li>关联行为场景，建立一套触发机制。</li></ul><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20181114215428.png" alt></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>优点<ul><li>观察者和被观察者之间建立一个抽象的耦合。</li><li>观察者模式支持广播通信。</li></ul></li><li>缺点<ul><li>观察者之间有过多的细节依赖，增加了时间消耗及程序的复杂度。</li><li>使用要得当，要避免循环调用。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-解释器模式</title>
      <link href="/2018/11/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/11/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。为了解释一种语言，而为语言创建的解释器。</p><a id="more"></a><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li>某个特定类型问题发生频率足够高。</li><li>平时需要写的并不多。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>优点</p><ul><li>语法有很多类表示，容易改变及扩展此语言。</li></ul></li><li><p>缺点</p><ul><li>当语法规则数目太多时，增加了系统的复杂度。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-策略模式</title>
      <link href="/2018/11/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/11/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>定义了算法家族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化不会影响到使用算法的用户。</p><a id="more"></a><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li>系统有很多类，而他们的区别仅仅在于他们的行为不同。</li><li>一个系统需要动态的在几种算法中选择一个。</li></ul><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20181111172142.png" alt></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>优点</p><ul><li>符合开闭原则。</li><li>避免使用多重条件转移语句。</li><li>提高算法的保密性和安全性。</li></ul></li><li><p>缺点</p><ul><li>客户端必须知道所有的策略类，并自行决定使用哪一种策略类。</li><li>产生很多策略类。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins配置邮件通知</title>
      <link href="/2018/11/01/jenkins%E9%85%8D%E7%BD%AE%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5/"/>
      <url>/2018/11/01/jenkins%E9%85%8D%E7%BD%AE%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="jenkins系统配置"><a href="#jenkins系统配置" class="headerlink" title="jenkins系统配置"></a>jenkins系统配置</h3><ol><li><p><strong>设置jenkins地址和管理员邮箱地址</strong></p><p>系统管理–&gt;系统设置–&gt;Jenkins Location</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101143431.png" alt></p><a id="more"></a></li><li><p><strong>设置发件人等信息</strong></p><p>系统管理–&gt;系统设置–&gt;Extended E-mail Notification</p><p>PS：这里的发件人邮箱地址切记要和系统管理员邮件地址保持一致（当然，也可以设置专门的发件人邮箱，不过不影响使用，根据具体情况设置即可）</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101143854.png" alt></p></li><li><p>配置邮件模板default Content</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;ENV, var="JOB_NAME"&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">"8"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">topmargin</span>=<span class="string">"8"</span> <span class="attr">marginheight</span>=<span class="string">"4"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">offset</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"95%"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>(本邮件是程序自动下发的，请勿回复！)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0000FF"</span>&gt;</span>构建结果 - $&#123;BUILD_STATUS&#125;<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>构建信息<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目名称&amp;nbsp;：&amp;nbsp;$&#123;PROJECT_NAME&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建编号&amp;nbsp;：&amp;nbsp;第$&#123;BUILD_NUMBER&#125;次构建<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>SVN&amp;nbsp;版本：&amp;nbsp;$&#123;SVN_REVISION&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>触发原因：&amp;nbsp;$&#123;CAUSE&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建日志：&amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;BUILD_URL&#125;console"</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建&amp;nbsp;&amp;nbsp;Url&amp;nbsp;：&amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;BUILD_URL&#125;"</span>&gt;</span>$&#123;BUILD_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>工作目录&amp;nbsp;：&amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;PROJECT_URL&#125;ws"</span>&gt;</span>$&#123;PROJECT_URL&#125;ws<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目&amp;nbsp;&amp;nbsp;Url&amp;nbsp;：&amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;PROJECT_URL&#125;"</span>&gt;</span>$&#123;PROJECT_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>Changes Since Last</span><br><span class="line">                        Successful Build:<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>历史变更记录 : <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;PROJECT_URL&#125;changes"</span>&gt;</span>$&#123;PROJECT_URL&#125;changes<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> $&#123;CHANGES_SINCE_LAST_SUCCESS,reverse=true, format="Changes for Build #%n:<span class="tag">&lt;<span class="name">br</span> /&gt;</span>%c<span class="tag">&lt;<span class="name">br</span> /&gt;</span>",showPaths=true,changesFormat="<span class="tag">&lt;<span class="name">pre</span>&gt;</span>[%a]<span class="tag">&lt;<span class="name">br</span> /&gt;</span>%m<span class="tag">&lt;/<span class="name">pre</span>&gt;</span>",pathFormat="&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;%p"&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Failed Test Results<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif"</span>&gt;</span>$FAILED_TESTS<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>构建日志 (最后 100行):<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;tr&gt;</span></span><br><span class="line"><span class="comment">            &lt;td&gt;Test Logs (if test has ran): &lt;a</span></span><br><span class="line"><span class="comment">                href="$&#123;PROJECT_URL&#125;ws/TestResult/archive_logs/Log-Build-$&#123;BUILD_NUMBER&#125;.zip"&gt;$&#123;PROJECT_URL&#125;/ws/TestResult/archive_logs/Log-Build-$&#123;BUILD_NUMBER&#125;.zip&lt;/a&gt;</span></span><br><span class="line"><span class="comment">                &lt;br /&gt;</span></span><br><span class="line"><span class="comment">            &lt;br /&gt;</span></span><br><span class="line"><span class="comment">            &lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;/tr&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"80"</span> <span class="attr">rows</span>=<span class="string">"30"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"font-family: Courier New"</span>&gt;</span>$&#123;BUILD_LOG, maxLines=100&#125;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置邮件触发机制</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101144430.png" alt></p></li><li><p>上面的几步完成后，点击应用，保存即可。</p></li></ol><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><ol><li><p>进入项目配置页面</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101144658.png" alt></p></li><li><p>进入系统配置页面后，点击上方的<strong>构建后操作</strong>选项，配置内容如下：</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101144826.png" alt></p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101145324.png" alt></p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101145623.png" alt></p></li><li><p>构建项目测试</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101145815.png" alt></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局域网内搭建邮件服务器-hMailServer</title>
      <link href="/2018/11/01/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E6%90%AD%E5%BB%BA%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8-hMailServer/"/>
      <url>/2018/11/01/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E6%90%AD%E5%BB%BA%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8-hMailServer/</url>
      
        <content type="html"><![CDATA[<h3 id="hMailServer安装"><a href="#hMailServer安装" class="headerlink" title="hMailServer安装"></a>hMailServer安装</h3><ol><li><p><a href="https://www.hmailserver.com/" target="_blank" rel="noopener">hMailServer</a>,到hMailServer网站下载最新版本hMailServer安装包。</p></li><li><p>双击安装文件</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101135057.png" alt></p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101135255.png" alt></p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101135402.png" alt></p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101135510.png" alt></p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101135557.png" alt></p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101135913.png" alt></p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101135944.png" alt></p><p>设置密码，该密码在配置服务器时使用。</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101140101.png" alt></p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101140136.png" alt></p></li><li><p>配置hMailServer</p><ul><li><p>打开配置程序</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101140316.png" alt></p></li><li><p>因为内网中没有DNS服务器，所以域名随便取一个。</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101140918.png" alt></p></li><li><p>添加邮件地址</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101141154.png" alt></p></li><li><p>配置SMTP</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101141649.png" alt></p></li><li><p>打开logging</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101141752.png" alt></p></li><li><p>配置ip Ranges</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101141855.png" alt></p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101141949.png" alt></p></li><li><p>修改hosts文件，添加SMTP的域名解析为本机地址。</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101142158.png" alt></p></li><li><p>到此，hmailServer服务端配置完成。</p></li></ul></li><li><p>配置foxmail客户端</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181101142726.png" alt></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VisualSVN</title>
      <link href="/2018/10/23/VisualSVN/"/>
      <url>/2018/10/23/VisualSVN/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> svn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>visualsvn配置hooks调用jenkins自动构建</title>
      <link href="/2018/10/23/visualsvn%E9%85%8D%E7%BD%AEhooks%E8%B0%83%E7%94%A8jenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA/"/>
      <url>/2018/10/23/visualsvn%E9%85%8D%E7%BD%AEhooks%E8%B0%83%E7%94%A8jenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="jenkins配置"><a href="#jenkins配置" class="headerlink" title="jenkins配置"></a>jenkins配置</h3><ol><li><p>为了让Jenkins中的job可以被触发，job需要被显式地配置为启用SCM轮询才行，未启用SCM轮询选项的job将不会被post-commit hook所触发。下图为在job中启用SCM轮询的示例：</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181023165142.png" alt></p></li><li><p>如果Jenkins启用了跨站点请求伪造防护(默认启用)选项，那么上面的请求会返回一个403错误(“No valid crumb was included”)。在”系统管理”→”全局安全配置”中，可以看到跨站点请求伪造防护是否有启用：</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181023165419.png" alt></p></li></ol><h3 id="VisualSVN配置"><a href="#VisualSVN配置" class="headerlink" title="VisualSVN配置"></a>VisualSVN配置</h3><ol><li><p>提交到 VisualSVN Server 时 hook 的 post-commit.bat（post-commit.cmd） 不执行的解决方法：</p><p>这是因为 bat 文件执行需要权限，而 VisualSVN Server 默认用的是 NETWORK 用户组，该组没有执行 bat 的权限，导致了 post-commit.bat 文件不能执行，解决方法如下：</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181023170119.png" alt></p></li><li><p>配置hooks</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181023170416.png" alt></p><p>curl -X POST  <a href="http://localhost:6080/job/cecaudit/build?delay=0sec" target="_blank" rel="noopener">http://localhost:6080/job/cecaudit/build?delay=0sec</a> –user admin:123456789 –data-urlencode json=</p><p>链接地址为jenkins中的job地址（点击立即构建时的链接），—user后为 用户名:密码</p><p>Ps:需要先安装curl或wget</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> svn </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-模板方法模式</title>
      <link href="/2018/10/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>定义了一个算法的骨架，并允许子类为一个或多个步骤提供实现。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法的某些步骤。</p><a id="more"></a><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。</li><li>各个子类中公共的行为被提取出来并集中到一个公共父类中，从而避免代码重复。</li></ul><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20181114203753.png" alt></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>优点<ol><li>提高复用性。</li><li>提高扩展性。</li><li>符合开闭原则。</li></ol></li><li>缺点<ol><li>类数目增加。</li><li>增加了系统实现的复杂度。</li><li>继承关系自身缺点，如果父类添加新的抽象方法，所有子类都要改一遍。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-迭代器模式</title>
      <link href="/2018/10/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>提供了一种方法，顺序访问一个集合中的各个元素，而又不暴露该对象的内部表示。</p><a id="more"></a><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li>访问一个集合对象的内容而无需暴露它的内部表示。</li><li>为遍历不同的集合结构提供一个统一的接口。</li></ul><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p><img src="http://ow83fnk93.bkt.clouddn.com/20181005173913.png" alt></p><ul><li><p>Iterator(抽象迭代器):它定义了访问和遍历元素的接口，声明了用于遍历数据元素的方法，例如:用于获取第一个元素的first()方法，用于访问下一个元素的next()方法，用于判断是否还有下一个元素的hasNext()方法，用于获取当前元素的currentItem()方法等，在具体迭代器中将实现这些方法。</p></li><li><p>ConcreteIterator(具体迭代器):它实现了抽象迭代器接口，完成对聚合对象的遍历，同时在具体迭代器中通过游标来记录在聚合对象中所处的当前位置，在具体实现时，游标通常是一个表示位置的非负整数。</p></li><li><p>Aggregate(抽象聚合类):它用于存储和管理元素对象，声明一个createIterator()方法用于创建一个迭代器对象，充当抽象迭代器工厂角色。</p></li><li><p>ConcreteAggregate(具体聚合类):它实现了在抽象聚合类中声明的createIterator()方法，该方法返回一个与该具体聚合类对应的具体迭代器ConcreteIterator实例。</p></li><li><p>在迭代器模式结构图中，我们可以看到具体迭代器类和具体聚合类之间存在双重关系，其中一个关系为关联关系，在具体迭代器中需要维持一个对具体聚合对象的引用，该关联关系的目的是访问存储在聚合对象中的数据，以便迭代器能够对这些数据进行遍历操作。除了使用关联关系外，为了能够让迭代器可以访问到聚合对象中的数据，我们还可以将迭代器类设计为聚合类的内部类，JDK中的迭代器类就是通过这种方法来实现的，如下AbstractList类代码片段所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    ......</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br><span class="line">...... </span><br><span class="line">    &#125;</span><br><span class="line">...... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>优点<ol><li>分离了集合对象的遍历行为</li></ol></li><li>缺点<ol><li>类的个数成对增加。</li><li>增加了程序的复杂性。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-代理模式</title>
      <link href="/2018/10/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>为其他对象提供一种代理，以控制对这个对象的访问。代理对象在客户端和目标对象之间起到中介的作用。</p><a id="more"></a><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li>保护目标对象。</li><li>增强目标对象。</li></ul><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><ul><li><p>静态代理</p><p><img src="http://ow83fnk93.bkt.clouddn.com/20181005170019.png" alt></p></li><li><p>动态代理</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>优点<ol><li>代理模式能将代理对象与真实被调用的目标对象分离。</li><li>一定程度上降低了系统的耦合度，扩展性好。</li><li>保护目标对象。</li><li>增强目标对象。</li></ol></li><li>缺点<ol><li>代理模式会造成系统设计中类的数目增加。</li><li>在客户端和目标对象增加一个代理对象，会造成请求处理速度变慢。</li><li>增加系统的复杂度。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-桥接模式</title>
      <link href="/2018/10/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>将抽象部分与它的具体实现部分分离，使他们都可以独立的变化。通过组合的方式建立两个类之间的联系，而不是继承。</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li>抽象和具体实现之间增加更多的灵活性</li><li>一个类存在两个（或多个）独立变化的纬度，且这两个（或读个）纬度都需要进行独立的扩展。</li><li>不希望使用继承，或因为多继承导致系统类的个数剧增。</li></ul><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p><img src="http://ow83fnk93.bkt.clouddn.com/20181004121246.png" alt></p><ul><li>在桥接模式结构图中包含如下几个角色:<ol><li>Abstraction(抽象类):用于定义抽象类的接口，它一般是抽象类而不是接口，其中定义了 一个Implementor(实现类接口)类型的对象并可以维护该对象，它与Implementor之间具有关 联关系，它既可以包含抽象业务方法，也可以包含具体业务方法。 </li><li>RefinedAbstraction(扩充抽象类):扩充由Abstraction定义的接口，通常情况下它不再是抽象类而是具体类，它实现了在Abstraction中声明的抽象业务方法，在RefinedAbstraction中可以调用在Implementor中定义的业务方法。</li><li>Implementor(实现类接口):定义实现类的接口，这个接口不一定要与Abstraction的接口完全一致，事实上这两个接口可以完全不同，一般而言，Implementor接口仅提供基本操作，而Abstraction定义的接口可能会做更多更复杂的操作。Implementor接口对这些基本操作进行了声明，而具体实现交给其子类。通过关联关系，在Abstraction中不仅拥有自己的方法，还可以调用到Implementor中定义的方法，使用关联关系来替代继承关系。</li><li>ConcreteImplementor(具体实现类):具体实现Implementor接口，在不同的ConcreteImplementor中提供基本操作的不同实现，在程序运行时，ConcreteImplementor对象将替换其父类对象，提供给抽象类具体的业务操作方法。</li></ol></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>优点<ol><li>分离抽象部分及其具体实现部分。</li><li>提高了系统的可扩展性。</li><li>符合开闭原则。</li><li>符合合成复用原则。</li></ol></li><li>缺点<ol><li>增加了系统的设计与理解难度。</li><li>需要正确的识别出系统中两个独立变化的纬度。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-组合模式</title>
      <link href="/2018/10/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使客户端对单个对象和组合对象保持一致的处理方式。</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li>希望客户端可以忽略组合对象与单个对象的差异时。</li><li>处理一个树形结构时。</li></ul><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p><img src="http://ow83fnk93.bkt.clouddn.com/20181004110601.png" alt></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>优点</p><ol><li>清楚的定义分层次的复杂对象，表示对象的全部或部分层次。</li><li>让客户端忽略层次的差异，方便对整个层次结构进行控制。</li><li>简化客户端代码。</li><li>符合开闭原则</li></ol></li><li><p>缺点</p><ol><li>限制类型时会较为复杂。</li><li>使设计变的更加抽象。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-享元模式</title>
      <link href="/2018/10/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>提供了减少对象数量从而改善应用所需的对象结构的方式。运用共享技术有效的支持大量细粒度的对象。</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li>常常应用于系统底层的开发，以便解决系统性能的问题。</li><li>系统有大量相似对象，需要缓冲池的场景。</li></ul><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p><img src="http://ow83fnk93.bkt.clouddn.com/20181003171112.png" alt></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>优点</p><ol><li>减少对象的创建，降低内存中对象的数量，降低系统的内存，提高效率。</li><li>减少内存之外的其他资源的占用。（减少new操作所需的时间）</li></ol></li><li><p>缺点</p><ol><li>关注内/外部状态，关注线程安全问题。</li><li>使程序的逻辑复杂化。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-外观模式</title>
      <link href="/2018/10/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>为子系统中的一组接口提供一个统一的入口。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p><img src="http://ow83fnk93.bkt.clouddn.com/20181003121434.png" alt></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>外观模式的主要优点如下: </p><p>(1) 它对客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目，并使得子系统使用起来更加容易。通过引入外观模式，客户端代码将变得很简单，与之关联的对象也很少。 </p><p>(2) 它实现了子系统与客户端之间的松耦合关系，这使得子系统的变化不会影响到调用它的客 户端，只需要调整外观类即可。 </p><p>(3) 一个子系统的修改对其他子系统没有任何影响，而且子系统内部变化也不会影响到外观对象。 </p></li><li><p>外观模式的主要缺点如下: </p><p>(1) 不能很好地限制客户端直接使用子系统类，如果对客户端访问子系统类做太多的限制则减少了可变性和灵活性。 </p><p>(2) 如果设计不当，增加新的子系统可能需要修改外观类的源代码，违背了开闭原则。 </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-单例模式2</title>
      <link href="/2018/10/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F2/"/>
      <url>/2018/10/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F2/</url>
      
        <content type="html"><![CDATA[<ol><li><p>单例模式安全问题</p><ul><li><p>序列化和反射问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span>,<span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> HungrySingleton hungrySingleton;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        hungrySingleton = <span class="keyword">new</span> HungrySingleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span></span>&#123; <span class="comment">//反射时处理，如果已存在则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(hungrySingleton != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"单例构造器禁止反射调用"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hungrySingleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;<span class="comment">//反序列化时会调用此方法，从而防止创建多个实例</span></span><br><span class="line">        <span class="keyword">return</span> hungrySingleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>内部类处理方式相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClassSingleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> StaticInnerClassSingleton staticInnerClassSingleton </span><br><span class="line">            = <span class="keyword">new</span> StaticInnerClassSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInnerClassSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.staticInnerClassSingleton;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticInnerClassSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(InnerClass.staticInnerClassSingleton != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"单例构造器禁止反射调用"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Effective java 推荐的枚举类型单例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumSingleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EnumSingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EnumSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line">        <span class="keyword">private</span> EnumSingleton singleton;</span><br><span class="line">        <span class="comment">//jvm保证这个方法绝对只调用一次</span></span><br><span class="line">        Singleton()&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> EnumSingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> EnumSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> singleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins自动构建配置</title>
      <link href="/2018/09/04/jenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/09/04/jenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装jenkins</h4><ol><li>官网下载jenkins <a href="https://jenkins.io/" target="_blank" rel="noopener">jenkins</a></li><li>终端运行：java -jar jenkins.war –httpPort=8080  8080为端口号，可以自行设置</li><li>在浏览器中输入：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>  访问jenkins服务</li><li>首次启动jenkins，出于安全考虑，jenkins会生成一个随机的口令到 /root/.jenkins/secrets/initialAdminPassword 文件中，复制文件中的口令到jenkins即可通过访问。</li></ol><h4 id="安装ant"><a href="#安装ant" class="headerlink" title="安装ant"></a>安装ant</h4><ol><li><p>官网下载Ant  <a href="http://ant.apache.org/" target="_blank" rel="noopener">Ant</a></p></li><li><p>配置环境变量</p><blockquote><p>ANT_HOME    ant的根路径</p><p>path             $ANT_HOME/bin</p><p>classpath      $ANT_HOME/lib</p></blockquote></li><li><p>验证   终端输入  ant     有正常的输出，则表示安装成功</p></li></ol><h4 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h4><ol><li><p>配置tomcat-users.xml 添加角色和用户</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"tomcat"</span> <span class="attr">password</span>=<span class="string">"123456"</span>  <span class="attr">roles</span>=<span class="string">"manager-gui, manager-script"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置TOMCAT_HOME/conf/context.xml，在<context>元素中增加一个属性antiResourceLocking=”true” antiJARLocking=”true”，默认是”false”。</context></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">antiResourceLocking</span>=<span class="string">"true"</span> <span class="attr">antiJARLocking</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上为了解决Jenkins部署异常：The Tomcat Manager responded FAIL - Deployed application at context path]。</p><p>异常原因：</p><ul><li>Tomcat应用更新时，把新的WAR包放到webapps目录下，Tomcat就会自动把原来的同名webapp删除，并把WAR包解压，运行新的 webapp</li><li>但是，有时候Tomcat并不能把旧的webapp完全删除，通常会留下WEB-INF/lib下的某个jar包，必须关闭Tomcat才能删除，这就导致自动部署失败</li><li>解决方法是在<context>元素中增加一个属性antiResourceLocking=”true” antiJARLocking=”true”，默认是”false”。这样就可以热部署了</context></li><li>实际上，这两个参数就是配置Tomcat的资源锁定和Jar包锁定策略</li></ul></li></ol><h4 id="安装jenkins插件"><a href="#安装jenkins插件" class="headerlink" title="安装jenkins插件"></a>安装jenkins插件</h4><p><img src="http://ow83fnk93.bkt.clouddn.com/20180904185758.png" alt></p><p>安装svn插件 Subversion Plug-in</p><p>安装 Deploy to container Plugin 插件</p><h4 id="创建jenkins任务-svn-ant-tomcat"><a href="#创建jenkins任务-svn-ant-tomcat" class="headerlink" title="创建jenkins任务(svn+ant+tomcat)"></a>创建jenkins任务(svn+ant+tomcat)</h4><ol><li><p>新建任务，构建一个自由风格的软件项目<img src="http://ow83fnk93.bkt.clouddn.com/20180904190948.png" alt></p></li><li><p>svn 配置<img src="http://ow83fnk93.bkt.clouddn.com/20180904191202.png" alt></p></li><li><p>构建环境和构建<img src="http://ow83fnk93.bkt.clouddn.com/20180904191312.png" alt></p></li><li><p>构建后操作<img src="http://ow83fnk93.bkt.clouddn.com/20180904191529.png" alt></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高性能js读书笔记</title>
      <link href="/2018/08/07/%E9%AB%98%E6%80%A7%E8%83%BDjs%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/08/07/%E9%AB%98%E6%80%A7%E8%83%BDjs%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="动态脚本元素"><a href="#动态脚本元素" class="headerlink" title="动态脚本元素"></a>动态脚本元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">script.src = <span class="string">"file1.js"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(script);</span><br></pre></td></tr></table></figure><p>这种技术的重点在于：无论何时启动下载，文件的下载和执行过程都不会阻塞页面其他进程。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>memcached</title>
      <link href="/2018/08/05/memcached/"/>
      <url>/2018/08/05/memcached/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Libevent:</p><ol><li>官网下载，解压缩</li><li>./configure  –prefix=/opt/install/libevent</li><li>make &amp;&amp; make install</li></ol><p>memecached:</p><ol><li><p>解压缩</p></li><li><p>./configure –prefix=/opt/install/memcached  –with-libevent=/opt/install/libevent</p></li><li><p>make &amp;&amp; make instll</p><a id="more"></a></li></ol><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动参数：</p><blockquote><p>-d   启动一个守护进程</p><p>-m  分配给memcached 的内存数量（单位为M）</p><p>-u   运行memcached 的用户</p><p>-L  监听的服务器IP地址</p><p>-p  监听的端口号</p><p>-c  最大运行的并发连接数</p><p>-P  设置Pid 文件</p></blockquote><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p><img src="http://ow83fnk93.bkt.clouddn.com/memcached.png" alt></p><h3 id="java客户端"><a href="#java客户端" class="headerlink" title="java客户端"></a>java客户端</h3><p><img src="http://ow83fnk93.bkt.clouddn.com/20180806231945.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mac安装autojump</title>
      <link href="/2018/08/01/mac%E5%AE%89%E8%A3%85autojump/"/>
      <url>/2018/08/01/mac%E5%AE%89%E8%A3%85autojump/</url>
      
        <content type="html"><![CDATA[<ol><li><p>brew install autojump</p></li><li><p>编辑 vim ~/.zshrc</p><ul><li>找到 plugins=，在后面添加autojump：plugins=(git autojump)</li><li>新开一行，添加：[[ -s $(brew –prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew –prefix)/etc/profile.d/autojump.sh</li></ul></li><li><p>j  + 跳转的目录</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tmux配置使用</title>
      <link href="/2018/07/23/tmux%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/07/23/tmux%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是tmux"><a href="#什么是tmux" class="headerlink" title="什么是tmux"></a>什么是tmux</h3><p>tmux是一个工具，用于在终端窗口中运行多个终端会话，可以使终端会话进入后台运行。</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>$ brew install tmux</p></blockquote><h3 id="快捷键前缀"><a href="#快捷键前缀" class="headerlink" title="快捷键前缀"></a>快捷键前缀</h3><p>为了使自身的快捷键不和其他软件的快捷键产生冲突，tmux提供了一个快捷键前缀。当使用快捷键时要先按下快捷键前缀，然后再按下快捷键，默认的前缀是Ctrl-b</p><h3 id="创建会话"><a href="#创建会话" class="headerlink" title="创建会话"></a>创建会话</h3><blockquote><p>tmux new -s <name-of-my-session></name-of-my-session></p></blockquote><p>假如还需要开发另一个项目，可以再创建一个新会话，但原来的会话不会消失，若要创建一个新会话，只需要按下</p><p><prefix> :，然后输入</prefix></p><blockquote><p>new -s <name-of-my-new-session></name-of-my-new-session></p></blockquote><p>除非显式的关闭会话，否则tmux的会话在重启计算机之前都不会消失。</p><h3 id="切换会话"><a href="#切换会话" class="headerlink" title="切换会话"></a>切换会话</h3><ol><li><p>获取会话列表</p><blockquote><p><prefix> s</prefix></p></blockquote><p>列表中的每个会话都有一个 ID，该 ID 是从 0 开始的。按下对应的 ID 就可以进入会话。如果你已经创建了一个或多个会话，但是还没有运行 tmux，那么可以输入如下命令以接入已开启的会话:</p><blockquote><p>tmux attach</p></blockquote></li><li><p>会话外获取会话列表：</p><blockquote><p>tmux  ls</p><p>tmux attach/a -t   <name-of-session>    在会话外进入session</name-of-session></p><p>tmux attach/a   进入列表第一个会话</p><p><prefix> d    临时退出但不删除会话</prefix></p><p><prefix> :kill-session 在会话内退出并删除session</prefix></p><p><prefix> :kill-server 删除所有session</prefix></p><p>tmux kill-session -t <name-of-session> 在会话外删除指定session  </name-of-session></p></blockquote></li></ol><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><p>一个tmux中可以包含多个窗口。</p><blockquote><p><prefix> c   创建窗口</prefix></p><p><prefix> w  查看窗口列表</prefix></p><p><prefix> 0 切换到指定窗口，窗口对应的数字</prefix></p><p><prefix> n 切换到下一个窗口</prefix></p><p><prefix> p 切换到上一个窗口</prefix></p><p><prefix> l 在相邻的两个窗口切换</prefix></p><p><prefix> , 重命名窗口</prefix></p><p><prefix> f 在多个窗口里搜索关键字</prefix></p><p><prefix> &amp; 删除窗口</prefix></p></blockquote><h3 id="窗格"><a href="#窗格" class="headerlink" title="窗格"></a>窗格</h3><p>一个tmux窗口可以分割成多个窗格，并且窗格可以在不同的窗口中移动、合并、拆分。</p><blockquote><p><prefix> “  水平分割</prefix></p><p><prefix> % 垂直分割</prefix></p><p><prefix> o 按顺序在Pane之间移动</prefix></p><p><prefix> 方向键   上下左右选择pane</prefix></p><p><prefix> :resize-pane -U   #向上调整大小</prefix></p><p><prefix> :resize-pane -D #向下</prefix></p><p><prefix> :resize-pane -L #向左</prefix></p><p><prefix> :resize-pane -R #向右</prefix></p><p><prefix> :resize-pane -D 5 #向下移动5行</prefix></p><p><prefix>  { （往左边，往上面）</prefix></p><p><prefix>  } （往右边，往下面）</prefix></p><p><prefix> x 删除pane</prefix></p><p><prefix> 空格  更换pane排版</prefix></p><p><prefix> ！ 移动pane至新的window</prefix></p><p><prefix> :join-pane -t $window_name   移动pane合并至某个window</prefix></p><p><prefix>  Ctrl+o   按顺序移动pane位置</prefix></p><p><prefix>  q 显示pane编号</prefix></p></blockquote><h3 id="滚动屏幕"><a href="#滚动屏幕" class="headerlink" title="滚动屏幕"></a>滚动屏幕</h3><blockquote><p><prefix>  [  进入copy-mode 模式，就可以进行屏幕滚动，q键退出。</prefix></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svn安装和配置</title>
      <link href="/2018/07/16/svn%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/07/16/svn%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ol><li><p>安装服务器端程序</p><blockquote><p>yum install -y subversion</p></blockquote></li><li><p>创建并配置版本库</p><ul><li><p>创建版本库目录</p><blockquote><p>mkdir -p /var/svn/repository</p></blockquote><p>版本库目录下创建具体的项目目录（可以多个）</p></li><li><p>创建svn版本库</p><blockquote><p>svnadmin  create /var/svn/repository/项目目录</p></blockquote></li></ul></li><li><p>配置svn对应的服务</p><ul><li><blockquote><p>svn://ip:3690/项目目录  （默认端口号3690）</p></blockquote></li><li><p>修改服务配置</p><p>/etc/rc.d/init.d/svnserve (注意备份)</p><p>原版：args=”–daemon –pid-file=${pidfile} $OPTIONS”</p><p>修改版：args=”–daemon –root=/var/svn/repository(版本库根目录) –listen-port 2255(实际的端口号) –pid-file=${pidfile} $OPTIONS”</p></li><li><p>启动svn服务</p><blockquote><p>service  svnserve start </p></blockquote></li></ul></li><li><p>命令行客户端</p><ul><li><p>检出（完整下载版本库中的全部内容）</p><blockquote><p>svn checkout svn://ip/项目目录  本地目录</p></blockquote></li><li><p>工作副本 </p><ul><li>.svn所在目录为工作副本。</li><li>版本控制相关操作都要在工作副本目录下执行。</li><li>为了保证工作副本能够正常和服务器进行交互，一般不要删除.svn中的内容。</li></ul></li><li><p>添加</p><ul><li><p>svn 要求提交一个新建的文件前先把这个文件添加到版本控制体系中。</p><blockquote><p>svn add 文件名 </p></blockquote></li><li><p>svn提交</p><blockquote><p>svn commit -m “提交信息” 要提交的文件</p></blockquote></li></ul></li><li><p>查看服务器端文件内容</p><blockquote><p>svn list svn:ip/项目目录 </p></blockquote></li><li><p>更新</p><blockquote><p>svn update [文件名]</p></blockquote></li></ul></li><li><p>svn权限管理</p><ul><li><p>三个对应的配置文件</p><ul><li><p>conf/svnserve.conf </p><blockquote><p>anon-access = read   匿名访问</p><p>auth-access = write  授权访问 （注意空格）</p><p>passwd-db= passwd 指定设置用户名密码的配置文件</p><p>authz-db=authz 分配权限的配置文件 </p></blockquote></li><li><p>conf/passwd</p><p>用户名 = 密码</p></li><li><p>conf/authz</p><blockquote><p>[groups]创建用户组  组名=组员，组员（使用，隔开）</p><p>[/] （/表示版本库根目录）</p><p>@组名=rw   配置组权限</p><p>用户名=r     配置用户名权限</p><p>*=               其他人没有权限</p></blockquote></li></ul></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim笔记</title>
      <link href="/2018/07/15/vim%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/15/vim%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ol><li><p>有些时候当我们使用Vi/Vim编辑文件时如果没有注意到文件权限的时候，当最后进行保存时候的可能会提示以下错误，如果强制退出后再切换用户，肯定会丢失当前的改动，可以按下边的方法执行：</p><blockquote><p>在Vi/Vim编辑器进入冒号，然后输入以下命令  %! sudo tee % /dev/null</p><p>此时会提示输入sudo用户的密码</p></blockquote></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>effective-java读书笔记2</title>
      <link href="/2018/07/14/effective-java%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02/"/>
      <url>/2018/07/14/effective-java%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h5 id="第一条：考虑用静态工厂方法代替构造器"><a href="#第一条：考虑用静态工厂方法代替构造器" class="headerlink" title="第一条：考虑用静态工厂方法代替构造器"></a>第一条：考虑用静态工厂方法代替构造器</h5><h6 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h6><ul><li><p>静态工厂方法有名字，当一个类需要多个带有相同签名的构造器时，就用静态工厂方法代替构造器，并且慎重的选择名称以便突出他们之间的区别。</p></li><li><p>不必在每次调用它们的时候都创建一个新对象。</p></li><li><p>它们可以返回原返回类型的任何子类型的对象。这样我们在选择返回对象的类时就有了更大的灵活性。</p></li><li><p>创建参数化类型实例的时候，它们使代码变得更加简洁(但在新版本的java中已经可以省略)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure></li></ul>  <a id="more"></a><p>劣势</p><ul><li>类如果不含公有的或者受保护的构造器，就不能被子类化。</li><li>它们与其它的静态方法实际上没有任何区别。在API文档中，它们没有像构造器那样在API文档中明确的标识出来。因此要想查明如何实例化一个类非常困难。</li></ul><h5 id="第六条：避免创建不必要的对象"><a href="#第六条：避免创建不必要的对象" class="headerlink" title="第六条：避免创建不必要的对象"></a>第六条：避免创建不必要的对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(<span class="string">"bikini"</span>); <span class="comment">// DON'T DO THIS!</span></span><br><span class="line">String s = <span class="string">"bikini"</span>; <span class="comment">//good</span></span><br></pre></td></tr></table></figure><p>判断一个字符串是否是一个合法的罗马数字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Performance can be greatly improved! 每次调用都会创建Pattern实例，非常昂贵的</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.matches(<span class="string">"^(?=.)M*(C[MD]|D?C&#123;0,3&#125;)"</span></span><br><span class="line">+ <span class="string">"(X[CL]|L?X&#123;0,3&#125;)(I[XV]|V?I&#123;0,3&#125;)$"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reusing expensive object for improved performance</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RomanNumerals</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern ROMAN = Pattern.compile(</span><br><span class="line">        <span class="string">"^(?=.)M*(C[MD]|D?C&#123;0,3&#125;)"</span></span><br><span class="line">        + <span class="string">"(X[CL]|L?X&#123;0,3&#125;)(I[XV]|V?I&#123;0,3&#125;)$"</span>);</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ROMAN.matcher(s).matches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动装箱、拆箱（要优先使用基本类型而不是装箱基本类型，当心无意识的自动装箱）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Long sum = <span class="number">0L</span>; <span class="comment">//使用long将更快</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt;= Integer.MAX_VALUE; i++)</span><br><span class="line">sum += i;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第七条：消除过期的对象引用"><a href="#第七条：消除过期的对象引用" class="headerlink" title="第七条：消除过期的对象引用"></a>第七条：消除过期的对象引用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Can you spot the "memory leak"?</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Object[] elements;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    elements = <span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">        ensureCapacity();</span><br><span class="line">        elements[size++] = e;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">        <span class="keyword">return</span> elements[--size];</span><br><span class="line">    &#125; /</span><br><span class="line">    **</span><br><span class="line">    * Ensure space <span class="keyword">for</span> at least one more element, roughly</span><br><span class="line">    * doubling the capacity each time the array needs to grow.</span><br><span class="line">    */</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elements.length == size)</span><br><span class="line">        elements = Arrays.copyOf(elements, <span class="number">2</span> * size + <span class="number">1</span>);</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>解决内存泄漏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">    Object result = elements[--size];</span><br><span class="line">    elements[size] = <span class="keyword">null</span>; <span class="comment">// Eliminate obsolete reference</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一般而言，只要类时自己管理内存，程序员就应该警惕内存泄漏问题</strong>，一旦元素被释放掉，则该元素中包含的任何对象引用都应该被清空。</p><h5 id="第八条：覆盖equals时请遵守通用约定。"><a href="#第八条：覆盖equals时请遵守通用约定。" class="headerlink" title="第八条：覆盖equals时请遵守通用约定。"></a>第八条：覆盖equals时请遵守通用约定。</h5><ul><li><p>什么条件下，不需要覆盖equals:</p><blockquote><p>类的每个实例本质上都是唯一的。代表活动实体而不是值的类来说确实如此。</p><p>不关心类是否提供了“逻辑相等“的测试功能。</p><p>超类已经覆盖了equals,从超类继承过来的行为对于子类也是合适的。</p><p>类是私有的或者包级私有的，可以确定它的equals方法永远不会被调用。</p></blockquote></li><li><p>什么时候应该覆盖equals方法：</p><blockquote><p>如果类具有自己特有的“逻辑相等”概念（不同于对象等同的概念），而且超类还没有覆盖equals以实现期望的行为。</p></blockquote></li><li><p>覆盖时必须遵守的通用约定：</p><blockquote><p>自反性：x.equals(x)返回true。</p><p>对称性：x.equals(y) == y.equals(x)。</p><p>传递性：x.equals(y)  y.equals(z)  x.equals(z)。</p><p>一致性：只要对象没有被修改，多次调用返回一致。</p></blockquote><p><strong>我们无法在扩展    可实例化的类的同时，既增加新的值组件，同时又保留equals约定</strong></p></li><li><p>实现高质量equals方法的诀窍：</p><ol><li>使用==操作符检查“参数是否为这个对象的引用”。</li><li>使用instanceof操作符检查参数是否为正确的类型。</li><li>把参数转换成正确的类型。</li><li>检查参数中的域是否与该对象中对应的域相匹配。对于既不是float也不是double类型的基本类型域，可以使用==操作符进行比较；对于对象引用域，可以递归的调用equals方法；对于float域，可以使用Float.compare方法，对于double域，则使用Double.compare。对于数组域，Arrays.equals()方法。</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmder配置使用</title>
      <link href="/2018/07/14/cmder%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/07/14/cmder%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><a href="http://cmder.net/" target="_blank" rel="noopener">cmder官网</a></p><p>下载的时候，有两个版本，分别是mini与full版；唯一的差别在于有没有内建msysgit工具，这是Git for Windows的标准配备；全安装版 cmder 自带了 msysgit, 压缩包 23M, 除了 git 本身这个命令之外, 里面可以使用大量的 linux 命令；比如 grep, curl(没有 wget)； 像vim, grep, tar, unzip, ssh, ls, bash, perl 对于爱折腾的Coder更是痛点需求。 </p><a id="more"></a><h5 id="配置cmder"><a href="#配置cmder" class="headerlink" title="配置cmder"></a>配置cmder</h5><ol><li><p>把 cmder 加到环境变量：可以把<code>Cmder.exe</code>存放的目录添加到系统环境变量；加完之后，<code>Win+r</code>一下输入<code>cmder</code>，即可。 </p></li><li><p>添加 cmder 到右键菜单：在某个文件夹中打开终端，在管理员权限的终端输入以下语句即可： </p><blockquote><p>Cmder.exe /REGISTER ALL</p></blockquote></li></ol><h5 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h5><ul><li>可以利用<code>Tab</code>，自动路径补全；</li><li>可以利用Ctrl+T建立新页签；</li><li>利用Ctrl+W关闭页签;</li><li>还可以透过Ctrl+Tab切换页签;</li><li>Alt+F4：关闭所有页签</li><li>Alt+Shift+1：开启cmd.exe</li><li>Alt+Shift+2：开启powershell.exe</li><li>Alt+Shift+3：开启powershell.exe (系统管理员权限)</li><li>Ctrl+1：快速切换到第1个页签</li><li>Ctrl+n：快速切换到第n个页签( n值无上限)</li><li>Alt + enter： 切换到全屏状态；</li><li>Ctr+r 历史命令搜索;</li><li>End, Home, Ctrl : Traversing text with as usual on Windows</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级程序设计-读书笔记2</title>
      <link href="/2018/05/04/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02/"/>
      <url>/2018/05/04/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><ol><li><p>Object类型<br> 创建Object实例的方式有两种：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  person.name = <span class="string">"Nicholas"</span>;</span><br><span class="line">  person.age = <span class="number">29</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//字面量方式:</span></span><br><span class="line">  <span class="keyword">var</span> person = &#123;</span><br><span class="line">      name : <span class="string">"Nicholas"</span>,</span><br><span class="line">      age :<span class="number">29</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><pre><code>&lt;!--more--&gt;</code></pre><p>一般来说，可以使用点表示法来访问对象属性，但也可以使用[]来访问对象属性，应该将要访问的属性以字符串的形式放在[]中，[]方法的主要优点是可以通过变量来访问属性。</p><ol start="2"><li><p>Array类型 </p><ol><li>创建方式：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>);</span><br><span class="line">  <span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>);</span><br><span class="line">  <span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);<span class="comment">//创建一个包含三项的数组</span></span><br><span class="line">  <span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"Greg"</span>);<span class="comment">//创建包含"Greg"一项的数组</span></span><br><span class="line">  <span class="keyword">var</span> colors = <span class="built_in">Array</span>();<span class="comment">//new 可以省略</span></span><br><span class="line">  <span class="keyword">var</span> colors = [];</span><br><span class="line">  <span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>]</span><br><span class="line">  <span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,]<span class="comment">//不要这样，这样会创建一个包含两个或三个的数组</span></span><br><span class="line">  <span class="keyword">var</span> colors = [,,,,,] <span class="comment">//不要这样，这样会创建一个包含五个或六个的数组</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</span><br><span class="line">colors.length = <span class="number">2</span>;</span><br><span class="line">alert(colors[<span class="number">2</span>]) ; <span class="comment">//undefined</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</span><br><span class="line">colors.length = <span class="number">4</span>;</span><br><span class="line">alert(colors[<span class="number">3</span>]); <span class="comment">//undefined</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//利用length可以很方便的在数组末尾添加新项:</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</span><br><span class="line">colors[colors.length] = <span class="string">"black"</span>;</span><br><span class="line">colors[colors.length] = <span class="string">"brown"</span>;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>数组的每一项都可以保存任何类型的数据。</li><li><p>检测数组:    </p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">    <span class="comment">//对数组执行某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>instanceof操作符的问题在于，它假定只有一个全局执行环境。如果网页中包含多个框架，那实际上就存在两个以上不同的全局执行环境，从而存在两个以上不同版本的Array构造函数。如果从一个框架向另一个框架传入数组，那么传入的数组与第二个框架原生创建的数组分别具有各自不同的构造函数，要解决这个问题，es5新增了Array.isArray()方法，这个方法的目的是最终确定某个值到底是不是数组，而不管他是在哪个全局执行环境中创建的。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(value))&#123;</span><br><span class="line">    <span class="comment">//对数组执行某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>转换方法</li></ol><p>所有对象都具有toLocalString()、toString()、valueOf()方法。调用数组的toString()方法会返回有数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串。而调用valueOf()返回的还是数组。实际上，为了创建这个字符串会调用数组每一项的toString()方法。<br>如果数组中的某一项的值是null、undefined,那么该值在join()、toLocalString()、toString()、valueOf()返回的结果中以空字符串表示。</p><ol start="6"><li><p>栈方法</p><ol><li>push()可以接收任意数量的参数，把他们逐个添加到数组的末尾，并返回修改后数组的长度</li><li>pop()方法从数组末尾移除最后一项，减少数组的length值，返回移除的项</li></ol></li><li><p>队列方法</p><ol><li>由于push()是向数组末尾添加项的方法，因此要模拟队列只需一个从数组前端取得项的方法。实现这一操作的方法是shift(),他能够移除数组中的第一个项并返回该项，同时将数组长度减一。结合shift()和push()方法，可以像使用队列一样使用数组。</li><li>unshift()与shift()用途相反，它可以在数组前端添加任意项并返回新数组的长度。因此，同时使用unshift()和pop()方法，可以从相反的方向来模拟队列</li></ol></li><li><p>排序</p><ol><li><p>sort()方法会调用每个数组项的toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值，sort方法比较的也是字符串，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> values = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>]</span><br><span class="line">values.sort()</span><br><span class="line">alert(values)  <span class="comment">//0,1,10,15,5</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><pre><code>2. sort()方法可以接收一个比较函数作为参数，以便我们指定那个值位于那个值得前面。比较函数接收两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回0，如何第一个参数应该位于第二个之后则返回一个正数。    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">v1,v2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(v1 &lt; v2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(v1&gt;v2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">values.sort(compare); <span class="comment">// 15,10,5,1,0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对于数值类型或者valueOf()方法会返回数值类型的对象类型，可以使用一个更简单的比较函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">v1,v2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v1 - v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ol start="9"><li><p>操作方法</p><ol><li><p>concat()该方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给concat()传递参数的情况下，它只是复制当前数组并返回副本。如果传递给concat()方法的是一个或多个数组，则该方法会将这些数组中的每一项都添加到结果数组中。如果传递的值不是数组，这些值就会简单的添加到结果数组的末尾。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>];</span><br><span class="line"><span class="keyword">var</span> colors2 = colors.cancat(<span class="string">'yellow'</span>,[<span class="string">'black'</span>,<span class="string">'brown'</span>]);</span><br><span class="line">alert(colors) <span class="comment">//red,green,blue</span></span><br><span class="line">alert(colors2) <span class="comment">//red,green,blue,yellow,black,brown</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li>slice()基于当前数组中的一个或多个项创建一个新数组。slice()方法接收一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice()返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项，但不包括结束位置的项。slice()方法不会影响原始数组。</li><li><p>splice()</p><ul><li>删除：可以删除任意数量的项，只需指定2个参数：要删除的第    一项的位置和要删除的项数</li><li>插入：可以向指定位置插入任意数量的项，只需提供三个参数：起始位置、0(要删除的项数)和要插入的项。如果要插入多个项，可以再传入第四、第五，一直任意多个项。</li><li><p>替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定3个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项不必与删除的项数相等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>];</span><br><span class="line"><span class="keyword">var</span> removed = colors.splice(<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//删除第一项</span></span><br><span class="line">alert(colors) <span class="comment">//green,blue</span></span><br><span class="line">alert(removed) <span class="comment">//red</span></span><br><span class="line"></span><br><span class="line">removed = colors.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="string">'yellow'</span>,<span class="string">'orange'</span>);<span class="comment">//从位置1开始插入两项</span></span><br><span class="line">alert(colors) <span class="comment">//green,yellow,orange,blue</span></span><br><span class="line">alert(removed) <span class="comment">//返回的是一个空数组</span></span><br><span class="line"></span><br><span class="line">removed = colors.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="string">'red'</span>,<span class="string">'purple'</span>)</span><br><span class="line">alert(colors) <span class="comment">//green,red,purple,orange,blue</span></span><br><span class="line">alert(removed) <span class="comment">// yellow</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="10"><li><p>位置方法:</p><ol><li>indexOf()从数组的开头开始向后查找</li><li>lastIndexOf()从数组的末尾开始向前查找</li><li>这两个方法都返回要查找的项在数组中的位置，在没有找到的情况下返回-1。在比较第一个参数和数组中的每一项时，会使用全等操作符</li></ol></li><li><p>迭代方法：每个方法都接收两个参数：要在每一项上运行的函数和(可选的)运行该函数的作用域对象–影响this的值。传入这些方法的函数会接收三个参数：数组项的值，该项在数组中的位置和数组对象本身。</p><ol><li>every():对数组中的每一项运行给定函数，如果该函数对每一项都返回true,则返回true.</li><li>filter():对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组。</li><li>forEach():对数组中的每一项运行给定函数,没有返回值。</li><li>map():对数组中的每一项运行给定函数,返回每次函数调用的结果组成的数组。</li><li>some():对数组中的每一项运行给定函数,如果该函数对任一项返回true,则返回true。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> everyResult = numbers.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item &gt;<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><ol start="12"><li><p>归并方法：这两个方法都接收两个参数：一个在每一项上调用的函数和(可选的)作为归并基础的初始值。传给reduce()和reduceRight()的函数接收四个参数：前一个值、当前值、项的索引和数组对象</p><ol><li>reduce()迭代数组中的每一项，构建一个最终的返回值，从数组的第一项开始。</li><li>reduceRight()从数组的最后一项向前遍历。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> sum = values.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,index,array(</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prev+cur;</span><br><span class="line"> &#125;);</span><br><span class="line"> alert(sum) <span class="comment">//15</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级程序设计-读书笔记</title>
      <link href="/2018/04/30/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/04/30/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="lt-script-gt-标签"><a href="#lt-script-gt-标签" class="headerlink" title="&lt;script&gt;标签"></a><code>&lt;script&gt;</code>标签</h3><ol><li><p>无论如何包含代码，只要不存在defer和async属性，浏览器都会按照<code>&lt;script&gt;</code>元素在页面中出现的先后顺序对他们依次进行解析。</p></li><li><p>在文档的<code>&lt;head&gt;</code>元素中包含所有javascript标签，意味着必须等到全部的javascript代码都被下载、解析和执行完成后，才能开始呈现页面的内容（浏览器在遇到<code>&lt;body&gt;</code>标签时才开始呈现内容），所以，一般都这样写：</p> <a id="more"></a> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=&lt;device-width&gt;, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--这里放内容--&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;example1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;example2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>defer属性：脚本会被延迟到整个页面都解析完毕后再运行。因此，在<code>&lt;script&gt;</code>元素中设置defer属性，相当于告诉浏览器立即下载，但延迟执行。defer属性只适用于外部脚本文件。在下面的代码中，虽然<code>&lt;script&gt;</code>放在了文档<code>&lt;head&gt;</code>元素中，但其中包含的脚本将延迟到浏览器遇到<code>&lt;/html&gt;</code>标签后再执行。HTML5规范要求脚本按照他们出现的先后顺序执行，因此第一个延迟脚本会先于第二个延迟脚本执行，而这两个脚本会先于DOMContentLoaded事件执行。在现实中，延迟脚本并不一定会按照顺序执行，也不一定会在DOMContentLoaded事件触发前执行，因此最好只包含一个延迟脚本。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=&lt;device-width&gt;, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; defer=&quot;defer&quot; src=&quot;example1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; defer=&quot;defer&quot; src=&quot;example2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--这里放内容--&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>HTML5为<code>&lt;script&gt;</code>元素定义了async属性。async属性告诉浏览器立即下载文件，但并不保证按照他们的先后顺序执行。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=&lt;device-width&gt;, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; async src=&quot;example1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; async src=&quot;example2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--这里放内容--&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p> 在以上代码中，第二个脚本可能会在第一个脚本之前执行，因此，确保两者之间互不依赖非常重要。指定async属性的目的是不让页面等待两个脚本下载和执行，从而异步加载页面其他内容。为此，建议异步脚本不要在加载期间修改DOM。</p></li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li>五种基本数据类型：Undefined、Null、Boolean、Number、String;一种复杂数据类型：Object。</li><li><p>在使用var声明变量但未对其加以初始化时，这个变量的值就是undefined。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var message;//这个变量声明之后默认取得了undefined值</span><br><span class="line">//下面这个变量并没有声明</span><br><span class="line">//var age</span><br><span class="line">alert(typeof message);  //&quot;undefined&quot;</span><br><span class="line">alert(typeof age);      //&quot;undefined&quot;</span><br></pre></td></tr></table></figure><p> 对未声明和未初始化的变量执行typeof操作符都返回了undifined值。</p></li><li><p>如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为null而不是其他值。这样一来，只要直接检查null值就可以知道相应的变量是否已经保存了一个对象的引用，如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(car != null)&#123;</span><br><span class="line">    //对car执行某些操作</span><br><span class="line">&#125;</span><br><span class="line">//实际上，undefined的值是派生自null值的</span><br><span class="line">alert(null == undefined) //true</span><br></pre></td></tr></table></figure></li><li><p>NaN,即非数值(Not a Number)是一个特殊的数值，这个数值用来表示一个本来要返回数值的操作数未返回数值的情况（这样就不会抛出错误了）。任何数值除以0会返回NaN；任何涉及NaN的操作（NaN/10）都会返回NaN;NaN与任何值都不相等，包括NaN本身。</p></li></ol><h3 id="执行环境及作用域"><a href="#执行环境及作用域" class="headerlink" title="执行环境及作用域"></a>执行环境及作用域</h3><p>　　执行环境(execution context)是javaScript中最为重要的一个概念。执行环境定义了变量或函数有权访问的其他数据，决定了他们各自的行为。每个执行环境都有一个与之关联的变量对象(variable object)，环境中定义的所有变量和函数都保存在这个对象中。虽然我们编写的代码无法访问这个对象，但解析器在处理数据时会在后台使用它。<br>　　全局执行环境是最外围的一个执行环境。根据宿主环境不同，执行环境的对象也不一样。在web浏览器中，全局执行环境被认为是window对象，因此所有全局变量和函数都是作为window对象的属性和方法创建的。<br>　　每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。<br>　　当代码在一个环境中执行时，会创建变量对象的一个作用域链(scope chain)。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象(activation object)作为变量对象。活动对象在最开始时只包含一个变量，即arguments对象(这个对象在全局环境中是不存在的)。作用域链中的下一个变量对象来自包含环境，而再下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境；全局执行环境的变量对象始终都是作用域链中的最后一个对象。    </p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-职责链模式</title>
      <link href="/2018/04/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/04/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>避免请求发送者与接收者 耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。职责链模式是一种对象行为型模式。</p><a id="more"></a><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><img src="http://ow83fnk93.bkt.clouddn.com/2018-04-06-chain.png" alt="chain"></p><ul><li>Handler(抽象处理者):它定义了一个处理请求的接口，一般设计为抽象类，由于不同的具体处理者处理请求的方式不同，因此在其中定义了抽象请求处理方法。因为每一个处理者 的下家还是一个处理者，因此在抽象处理者中定义了一个抽象处理者类型的对象(如结构图 中的successor)，作为其对下家的引用。通过该引用，处理者可以连成一条链。</li><li>ConcreteHandler(具体处理者):它是抽象处理者的子类，可以处理用户请求，在具体处理者类中实现了抽象处理者中定义的抽象请求处理方法，在处理请求之前需要进行判断，看是 否有相应的处理权限，如果可以处理请求就处理它，否则将请求转发给后继者;在具体处理 者中可以访问链中下一个对象，以便请求的转发。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>职责链模式的主要优点如下:<ol><li>职责链模式使得一个对象无须知道是其他哪一个对象处理其请求，对象仅需知道该请求会被处理即可，接收者和发送者都没有对方的明确信息，且链中的对象不需要知道链的结构，由客户端负责链的创建，降低了系统的耦合度。</li><li>请求处理对象仅需维持一个指向其后继者的引用，而不需要维持它对所有的候选处理者的引用，可简化对象的相互连接。</li><li>在给对象分派职责时，职责链可以给我们更多的灵活性，可以通过在运行时对该链进行动态的增加或修改来增加或改变处理一个请求的职责。</li><li>在系统中增加一个新的具体请求处理者时无须修改原有系统的代码，只需要在客户端重新建链即可，从这一点来看是符合“开闭原则”的。</li></ol></li><li>职责链模式的主要缺点如下:<ol><li>由于一个请求没有明确的接收者，那么就不能保证它一定会被处理，该请求可能一直到链的末端都得不到处理;一个请求也可能因职责链没有被正确配置而得不到处理。</li><li>对于比较长的职责链，请求的处理可能涉及到多个处理对象，系统性能将受到一定影响，而且在进行代码调试时不太方便。</li><li>如果建链不当，可能会造成循环调用，将导致系统陷入死循环。</li></ol></li></ul><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>有多个对象可以处理同一个请求，具体哪个对象处理该请求待运行时刻再确定，客户端只需将请求提交到链上，而无须关心请求的处理对象是谁以及它是如何处理的。</li><li>在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。</li><li>可动态指定一组对象处理请求，客户端可以动态创建职责链来处理请求，还可以改变链中处理者之间的先后次序。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-装饰模式</title>
      <link href="/2018/04/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/04/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>动态地给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模式是一种对象结构型模式。</p><a id="more"></a><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><img src="http://ow83fnk93.bkt.clouddn.com/2018-04-06-decorator.png" alt="decorato"></p><ul><li>Component(抽象构件):它是具体构件和抽象装饰类的共同父类，声明了在具体构件中实现的业务方法，它的引入可以使客户端以一致的方式处理未被装饰的对象以及装饰之后的对象，实现客户端的透明操作。</li><li>ConcreteComponent(具体构件):它是抽象构件类的子类，用于定义具体的构件对象，实现了在抽象构件中声明的方法，装饰器可以给它增加额外的职责(方法)。</li><li>Decorator(抽象装饰类):它也是抽象构件类的子类，用于给具体构件增加职责，但是具体职责在其子类中实现。它维护一个指向抽象构件对象的引用，通过该引用可以调用装饰之前构件对象的方法，并通过其子类扩展该方法，以达到装饰的目的。</li><li>ConcreteDecorator(具体装饰类):它是抽象装饰类的子类，负责向构件添加新的职责。每一个具体装饰类都定义了一些新的行为，它可以调用在抽象装饰类中定义的方法，并可以增加新的方法用以扩充对象的行为。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>装饰模式的主要优点如下:<ol><li>对于扩展一个对象的功能，装饰模式比继承更加灵活性，不会导致类的个数急剧增加。</li><li>可以通过一种动态的方式来扩展一个对象的功能，通过配置文件可以在运行时选择不同的具体装饰类，从而实现不同的行为。</li><li>可以对一个对象进行多次装饰，通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合，得到功能更为强大的对象。</li><li>具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，原有类库代码无须改变，符合“开闭原则”。</li></ol></li><li>装饰模式的主要缺点如下:<ol><li>使用装饰模式进行系统设计时将产生很多小对象，这些对象的区别在于它们之间相互连接的方式有所不同，而不是它们的类或者属性值有所不同，大量小对象的产生势必会占用更多 的系统资源，在一定程序上影响程序的性能。</li><li>装饰模式提供了一种比继承更加灵活机动的解决方案，但同时也意味着比继承更加易于出错，排错也很困难，对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为繁琐。</li></ol></li></ul><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</li><li>当不能采用继承的方式对系统进行扩展或者采用继承不利于系统扩展和维护时可以使用装饰模式。不能采用继承的情况主要有两类:第一类是系统中存在大量独立的扩展，为支持每一种扩展或者扩展之间的组合将产生大量的子类，使得子类数目呈爆炸性增长;第二类是因 为类已定义为不能被继承(如Java语言中的final类)。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-建造者模式</title>
      <link href="/2018/04/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/04/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一种对象创建型模式。</p><a id="more"></a><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><img src="http://ow83fnk93.bkt.clouddn.com/2018-04-06-builder.png" alt="builde"></p><ul><li>Builder(抽象建造者):它为创建一个产品Product对象的各个部件指定抽象接口，在该接口中一般声明两类方法，一类方法是buildPartX()，它们用于创建复杂对象的各个部件;另一 类方法是getResult()，它们用于返回复杂对象。Builder既可以是抽象类，也可以是接口。</li><li>ConcreteBuilder(具体建造者):它实现了Builder接口，实现各个部件的具体构造和装配方 法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象。</li><li>Product(产品角色):它是被构建的复杂对象，包含多个组成部件，具体建造者创建该产品 的内部表示并定义它的装配过程。</li><li>Director(指挥者):指挥者又称为导演类，它负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装 配方法，完成复杂对象的建造。客户端一般只需要与指挥者进行交互，在客户端确定具体建 造者的类型，并实例化具体建造者对象(也可以通过配置文件和反射机制)，然后通过指挥 者类的构造函数或者Setter方法将该对象传入指挥者类中。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>建造者模式的主要优点如下:</p><ol><li>在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</li><li>每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象。由于指挥者类针对抽象建造者编程，增加新的具体建造者无须修改原有类库的代码，系统扩展方便，符合“开闭原则”</li><li>可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li></ol></li><li><p>建造者模式的主要缺点如下:</p><ol><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，例如很多组成部分都不相同，不适合使用建造者模式，因此其使用范围受到一定的限制。</li><li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，增加系统的理解难度和运行成本。</li></ol></li></ul><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。</li><li>需要生成的产品对象的属性相互依赖，需要指定其生成顺序。</li><li>对象的创建过程独立于创建该对象的类。在建造者模式中通过引入了指挥者类，将创建过程封装在指            挥者类中，而不在建造者类和客户类中。</li><li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-原型模式</title>
      <link href="/2018/04/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/04/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>使用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。原型模式是一种对象创建型模式。</p><a id="more"></a><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><img src="http://ow83fnk93.bkt.clouddn.com/2018-04-01-prototype.png" alt="prototype"></p><ul><li>Prototype(抽象原型类):它是声明克隆方法的接口，是所有具体原型类的公共父类，可以 是抽象类也可以是接口，甚至还可以是具体实现类。</li><li>ConcretePrototype(具体原型类):它实现在抽象原型类中声明的克隆方法，在克隆方法中返回自己的一个克隆对象。</li><li>Client(客户类):让一个原型对象克隆自身从而创建一个新的对象，在客户类中只需要直 接实例化或通过工厂方法等方式创建一个原型对象，再通过调用该对象的克隆方法即可得到多个相同的对象。由于客户类针对抽象原型类Prototype编程，因此用户可以根据需要选择具体 原型类，系统具有较好的可扩展性，增加或更换具体原型类都很方便。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>原型模式的主要优点如下:</p><p> (1) 当创建新的对象实例较为复杂时，使用原型模式可以简化对象的创建过程，通过复制一个已有实例可以提高新实例的创建效率。<br> (2) 扩展性较好，由于在原型模式中提供了抽象原型类，在客户端可以针对抽象原型类进行编程，而将具体原型类写在配置文件中，增加或减少产品类对原有系统都没有任何影响。<br> (3) 原型模式提供了简化的创建结构，工厂方法模式常常需要有一个与产品类等级结构相同的 工厂等级结构，而原型模式就不需要这样，原型模式中产品的复制是通过封装在原型类中的 克隆方法实现的，无须专门的工厂类来创建产品。<br> (4) 可以使用深克隆的方式保存对象的状态，使用原型模式将对象复制一份并将其状态保存起 来，以便在需要的时候使用(如恢复到某一历史状态)，可辅助实现撤销操作。</p></li><li><p>原型模式的主要缺点如下:</p><p> (1) 需要为每一个类配备一个克隆方法，而且该克隆方法位于一个类的内部，当对已有的类进 行改造时，需要修改源代码，违背了“开闭原则”。<br> (2) 在实现深克隆时需要编写较为复杂的代码，而且当对象之间存在多重的嵌套引用时，为了实现深克隆，每一层对象对应的类都必须支持深克隆，实现起来可能会比较麻烦。</p></li></ul><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>(1) 创建新对象成本较大(如初始化需要占用较长的时间，占用太多的CPU资源或网络资 源)，新的对象可以通过原型模式对已有对象进行复制来获得，如果是相似对象，则可以对 其成员变量稍作修改。<br>(2) 如果系统要保存对象的状态，而对象的状态变化很小，或者对象本身占用内存较少时，可以使用原型模式配合备忘录模式来实现。<br>(3) 需要避免使用分层次的工厂类来创建分层次的对象，并且类的实例对象只有一个或很少的几个组合状态，通过复制原型对象得到新实例可能比使用构造函数创建一个新实例更加方便。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>effective java读书笔记</title>
      <link href="/2017/09/27/effective-java%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/09/27/effective-java%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h5 id="第52条：通过接口引用对象"><a href="#第52条：通过接口引用对象" class="headerlink" title="第52条：通过接口引用对象"></a>第52条：通过接口引用对象</h5><p>如果有合适的接口类型存在，那么对于参数、返回值、变量和成员变量来说，就都应该使用接口类型进行声明；如果你养成了用接口作为类型的习惯，你的程序将会更加灵活，当你决定更换实现时，所要做的就只是构造器中类的名称。<br>有一点值得注意：如果原来的实现提供了某种特殊的功能，而这种功能并不是这个接口的通用约定所要求的，并且周围的代码又依赖于这种功能，那么新的实现也要提供相同的功能。<br>类实现了接口，但是提供了接口中不存在的额外的方法–例如LinkedHashMap。如果程序依赖于这些额外的方法，这种类就应该只被用来引用它的实例。<br>实际上，给定的对象是否具有适当的接口应该是很显然的。如果是，用接口引用对象就会使程序更加灵活；如果不是，则使用类层次结构中提供了必要功能的最基础的类。</p><a id="more"></a><h5 id="第38条：检查参数的有效性"><a href="#第38条：检查参数的有效性" class="headerlink" title="第38条：检查参数的有效性"></a>第38条：检查参数的有效性</h5><p>每当编写方法或者构造器的时候，应该考虑它的参数有哪些限制，应该把这些限制写到文档中，并且在这个方法体的开头处，通过显式的检查来实施这些限制</p><h5 id="第43条：返回0长度的数组或者集合，而不是Null"><a href="#第43条：返回0长度的数组或者集合，而不是Null" class="headerlink" title="第43条：返回0长度的数组或者集合，而不是Null"></a>第43条：返回0长度的数组或者集合，而不是Null</h5><p>返回类型为数组或集合的方法没理由返回null，应该返回一个零长度的数组或者集合。<br>可以做成在每当需要返回空集合时，都返回同一个不可变的空集合。Collections.emptySet、emptyList、emptyMap提供的正是这种集合。<br><code>public List&lt;Person&gt; getPersons(){        if(persons.isEmpty()){            return Collections.emptyList();        }else{            return persons;        }}</code></p><h5 id="第46条：for-each循环优先于传统的for循环"><a href="#第46条：for-each循环优先于传统的for循环" class="headerlink" title="第46条：for-each循环优先于传统的for循环"></a>第46条：for-each循环优先于传统的for循环</h5><p>for-each在简洁性和预防bug方面有着传统的for循环无法比拟的优势，并且没有性能损失，应该尽可能的使用for-each循环。<br>有三种常见的情况无法使用for-each循环:</p><ol><li>过滤:如果需要遍历集合，并删除选定的元素，就需要使用显示的迭代器，以便可以调用它的remove方法。</li><li>转换：如果需要遍历列表或者数组，并取代它部分或者全部的元素值，就需要列表迭代器或者数组索引，以便设定元素的值。</li><li>平行迭代：如果需要并行的遍历多个集合，就需要显示的控制迭代器或者索引变量，以便所有迭代器或者索引变量都可以得到同步前移。<h5 id="第48条：如果需要精确的答案，请避免使用float和double"><a href="#第48条：如果需要精确的答案，请避免使用float和double" class="headerlink" title="第48条：如果需要精确的答案，请避免使用float和double"></a>第48条：如果需要精确的答案，请避免使用float和double</h5><h5 id="第49条：基本类型优先于装箱基本类型"><a href="#第49条：基本类型优先于装箱基本类型" class="headerlink" title="第49条：基本类型优先于装箱基本类型"></a>第49条：基本类型优先于装箱基本类型</h5>基本类型和装箱基本类型之间有三个主要的区别：</li><li>基本类型只有值，而装箱基本类型则具有与它们的值不同的地址。换句话说，两个装箱基本类型可以具有相同的值和不同的地址。</li><li>基本类型只有功能完备的值，而每个装箱基本类型除了它对应的基本类型的所有功能值外，还有个非功能值：null</li><li>基本类型通常比装箱基本类型更节省时间和空间.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">    Long sum = 0L;</span><br><span class="line">    for(long i=0;i&lt;Integer.MAX_VALUE;i++)&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序运行起来比预计的要慢一些，因为它不小心将一个局部变量(sum)声明为装箱基本类型Long,而不是基本类型long,变量被反复的装箱和拆箱，导致明显的性能下降。<br>总之，当可以选择的时候，基本类型要优先于装箱基本类型。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> effective-java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-适配器模式</title>
      <link href="/2017/09/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/09/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>将一个接口转换成客户希望的另一个接口，使接口不兼容的哪些类可以一起工作，其别名为包装器（Wrapper）。</p><a id="more"></a><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p>根据适配器类与适配者类的关系不同，适配器模式可分为对象 适配器和类适配器两种，在对象适配器模式中，适配器与适配者之间是关联关系;在类适配 器模式中，适配器与适配者之间是继承(或实现)关系。在实际开发中，对象适配器的使用 频率更高,对象适配器结构如下:<br><img src="/Users/haominglfs/Pictures/hexo-pic/adapter.png" alt="adapte"></p><ul><li>Target(目标抽象类):目标抽象类定义客户所需接口，可以是一个抽象类或接口也可以是具体类。</li><li>Adapter(适配器类):适配器可以调用另一个接口，作为一个转换器，对Adaptee和Target进行适配，适配器类是适配器模式的核心，在对象适配器中，它通过继承Target并关联一个 Adaptee对象使二者产生联系。</li><li>Adaptee(适配者类):适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类一般是一个具体类，包含了客户希望使用的业务方法，在某些情况下可 能没有适配者类的源代码。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-工厂方法模式</title>
      <link href="/2017/09/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/09/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>与简单工厂模式不同，在工厂方法模式中，不再提供一个统一的工厂类来创建所有的产品对象，而是针对不同的产品提供不同的工厂，系统提供一个与产品等级结构对应的工厂等级结构。</p><a id="more"></a><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><img src="http://ow83fnk93.bkt.clouddn.com/2017-09-17-factory.png" alt="factory"></p><ul><li>Product(抽象产品):它是定义产品的接口，是工厂方法模式所创建对象的超类型，也就是产品对象的公共父类。</li><li>ProductA(具体产品):它实现了抽象产品接口，某种类型的具体产品由专门的具体工厂创建，具体工厂和具体产品之间一一对应。</li><li>Factory(抽象工厂):在抽象工厂类中，声明了工厂方法（FactoryMethod)，用于返回一个产品。抽象工厂是工厂方法模式的核心，所有创建对象的工厂类都必须实现该接口。</li><li>FactoryA(具体工厂):它是抽象工厂类的子类，实现了抽象工厂中定义的工厂方法，并可由客户端调用，返回一个具体产品类的实例。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>工厂方法模式的主要优点如下:</p><ul><li>用户只需要关心所需产品对应的工厂，不需要关心创建细节。</li><li>系统中加入新产品时，无需修改抽象工厂和抽象产品类，只需要添加具体的产品类和工厂类，符合开闭原则。</li></ul><p>工厂方法模式的主要缺点如下:</p><ul><li>增加产品时，需要创建具体的产品类和具体的工厂类，增加了系统的复杂度。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm学习笔记</title>
      <link href="/2017/06/17/jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/06/17/jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="java虚拟机与程序的生命周期"><a href="#java虚拟机与程序的生命周期" class="headerlink" title="java虚拟机与程序的生命周期"></a>java虚拟机与程序的生命周期</h2><p>在如下几种情况下，java虚拟机将结束生命周期：</p><ul><li><p>执行了System.exit()方法</p></li><li><p>程序正常执行结束</p></li><li><p>程序在执行过程中遇到了异常或错误而异常终止</p></li><li><p>由于操作系统出现错误而导致java虚拟机进程结束</p><a id="more"></a></li></ul><h2 id="加载-class文件的方式"><a href="#加载-class文件的方式" class="headerlink" title="加载.class文件的方式:"></a>加载.class文件的方式:</h2><ul><li>从本地系统中直接加载</li><li>通过网络下载.class文件</li><li>从zip,jar等归档文件中加载.class文件</li><li>从专有数据库中提取.class文件</li><li>将java原文件动态编译为.class文件</li></ul><h2 id="线程运行诊断"><a href="#线程运行诊断" class="headerlink" title="线程运行诊断"></a>线程运行诊断</h2><ol><li><p>Cpu 占用过多</p><ul><li>用top定位那个进程对cpu的占用过高。</li><li>ps H -eo pid,tid,%cpu | grep 进程id(用ps进一步定位是那个线程引起的cpu占用过高)</li><li>Jstack 进程id<ul><li>可以根据线程id找到问题的线程，进一步定位问题代码的源码行数。</li></ul></li></ul></li><li><p>堆内存</p><ul><li>jps 查看当前系统中有哪些java进程</li><li>Jmap 查看堆内存占用情况 jmap -heap 进程id</li><li>Jconsole 图形界面</li></ul></li><li><p>StringTable特性</p><ul><li>常量池中的字符串仅是符号，第一次用到时才变成对象。</li><li>利用串池的机制，来避免重复创建字符串对象。</li><li>字符串拼接的原理是StringBuilder(1.8)</li><li>字符串常量拼接的原理是编译器优化。</li><li>可以使用intern方法，主动将串池中还没有的字符串放入串池<ul><li>1.8将这个字符串对象尝试放入串池，如果有则并不会放入，如果没有则放入串池；两种情况都会把串池中的对象返回。</li><li>1.6将这个字符串对象尝试放入串池，如果有则并不会放入，如果没有会把此对象复制一份放入串池；两种情况都会把串池中的对象返回。</li></ul></li><li>性能调优<ul><li>调整-XX:StringTableSize=桶个数</li><li>考虑将字符串对象是否入池</li></ul></li></ul></li></ol><h2 id="四种引用"><a href="#四种引用" class="headerlink" title="四种引用"></a>四种引用</h2><ul><li><p>强引用</p><p>只有所用GC Roots 对象都不强引用该对象，该对象才能被垃圾回收。</p></li><li><p>软引用(SoftReference)</p><ul><li><p>仅有软引用引用该对象时，在垃圾回收后，内存仍不足时会再次发出垃圾回收，回收软引用对象</p></li><li><p>可以配合引用队列释放软引用对象自身</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-Xmx20m -XX:+PrintGCDetails -verbose:gc</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">soft</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;SoftReference&lt;<span class="keyword">byte</span>[]&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ReferenceQueue&lt;<span class="keyword">byte</span>[]&gt; queue = <span class="keyword">new</span> ReferenceQueue();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//关联了引用队列，当软引用关联的byte[]被回收时，软引用自己会加入到queue中去</span></span><br><span class="line">            SoftReference&lt;<span class="keyword">byte</span>[]&gt; ref = <span class="keyword">new</span> SoftReference&lt;&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[_4MB],queue);</span><br><span class="line">            System.out.println(ref.get());</span><br><span class="line">            list.add(ref);</span><br><span class="line">            System.out.println(list.size());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从队列中获取无用的软引用对象并移除</span></span><br><span class="line">        java.lang.ref.Reference&lt;? extends <span class="keyword">byte</span>[]&gt; ref = queue.poll();</span><br><span class="line">        <span class="keyword">while</span> (ref != <span class="keyword">null</span>)&#123;</span><br><span class="line">            list.remove(ref);</span><br><span class="line">            ref = queue.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"循环结束："</span>+list.size());</span><br><span class="line">        System.out.println(<span class="string">"============================"</span>);</span><br><span class="line">        <span class="keyword">for</span> (SoftReference&lt;<span class="keyword">byte</span>[]&gt; softReference : list) &#123;</span><br><span class="line">            System.out.println(softReference.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>弱引用(WeakReference)</p><ul><li><p>只有弱引用引用该对象时，在垃圾回收时，无论内存是否充足，都会回收弱引用对象</p></li><li><p>可以配合引用队列释放弱引用对象自身</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">weak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;WeakReference&lt;<span class="keyword">byte</span>[]&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//ReferenceQueue&lt;byte[]&gt; queue = new ReferenceQueue();</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//关联了引用队列，当软引用关联的byte[]被回收时，软引用自己会加入到queue中去</span></span><br><span class="line">            WeakReference&lt;<span class="keyword">byte</span>[]&gt; ref = <span class="keyword">new</span> WeakReference&lt;&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[_4MB]);</span><br><span class="line">            System.out.println(ref.get());</span><br><span class="line">            list.add(ref);</span><br><span class="line">            <span class="keyword">for</span> (WeakReference&lt;<span class="keyword">byte</span>[]&gt; weakReference : list) &#123;</span><br><span class="line">                System.out.println(weakReference.get()+<span class="string">"  "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(list.size());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从队列中获取无用的软引用对象并移除</span></span><br><span class="line"><span class="comment">//        java.lang.ref.Reference&lt;? extends byte[]&gt; ref = queue.poll();</span></span><br><span class="line"><span class="comment">//        while (ref != null)&#123;</span></span><br><span class="line"><span class="comment">//            list.remove(ref);</span></span><br><span class="line"><span class="comment">//            ref = queue.poll();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        System.out.println(<span class="string">"循环结束："</span>+list.size());</span><br><span class="line">        System.out.println(<span class="string">"============================"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>虚引用(PhantomReference)</p><ul><li>必须配合引用队列使用，主要配合ByteBuffer使用，被引用对象回收时，会将虚引用入队，由Reference Handler 线程调用虚引用相关方法释放直接内存。</li></ul></li><li><p>终结器引用(FinalReference)</p><ul><li>无需手动编码，但其内部配合引用队列使用，在垃圾回收时，终结器引用入队（被引用对象暂时没有被回收），再由Finalizer线程通过终结器引用找到被引用对象并调用他的finalize方法，第二次GC时才能回收被引用对</li></ul><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2></li></ul><ol><li><p>相关VM参数</p><p>|        含义        |                            参数                            |<br>| :—————-: | :——————————————————–: |<br>|     堆初始大小     |                            -Xms                            |<br>|     堆最大大小     |                 -Xmx或-XX:MaxHeapSize=size                 |<br>|     新生代大小     |       -Xmn或(-XX:NewSize=size + -XX:MaxNewSize=size)       |<br>| 幸存区比例（动态） | -XX:InitialSurvivorRatio=ratio和-XX:+UseAdaptiveSizePolicy |<br>|     幸存区比例     |                  -XX:SurvivorRatio=ratio                   |<br>|      晋升阈值      |             -XX:MaxTenuringThreshold=threshold             |<br>|      晋升详情      |               -XX:+PrintTenuringDistribution               |<br>|       GC详情       |              -XX:+PrintGCDetails -verbose:gc               |<br>|  FullGC前minorGC   |                 -XX:+ScavengeBeforeFullGC                  |</p></li><li><p>特性</p><ul><li><p>大对象直接放到老年代。</p></li><li><p>线程中的OOM不会引起java进程的结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gc</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _512KB = <span class="number">512</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1M = <span class="number">1</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _6M = <span class="number">6</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _7M = <span class="number">7</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _8M = <span class="number">8</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                List&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_8M]);</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_8M]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        System.out.println(<span class="string">"主线程睡一秒钟"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000l</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>垃圾回收器</p><ul><li><p>串行</p><ul><li>单线程</li><li>堆内存较小，适合个人电脑</li><li>-XX:+</li></ul></li><li><p>吞吐量优先</p><ul><li><p>多线程</p></li><li><p>堆内存较大，多核CPU</p></li><li><p>单位时间内让STW的时间最短</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseParallelGC（开启后会自动使用parallelOldGC）   -XX:+UseParallelOldGC</span><br><span class="line">-XX:ParallelGCThreads=n (设置垃圾回收线程数，默认和cpu核数相同)</span><br><span class="line">-XX:UseAdaptiveSizePolicy  自适应调整新生代大小  </span><br><span class="line">-XX:GCTimeRatio=ratio    1/1+ratio(默认为99，一般设置为19，表示100分钟内允许5分钟的时间可以用来进行垃圾回收) 为垃圾回收时间所占的比例</span><br><span class="line">-XX:MaxGCPauseMillis=ms  每次垃圾回收使用的最大时间</span><br></pre></td></tr></table></figure></li></ul></li><li><p>响应时间优先</p><ul><li><p>多线程</p></li><li><p>堆内存较大，多核CPU</p></li><li><p>尽可能让STW的单次时间最短  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseConcMarkSweepGC(老年代) --&gt; 如果失败，会退化成SerialOld垃圾回收器  </span><br><span class="line">      -XX:UseParNewGC (新生代)</span><br><span class="line">      -XX:ParallelGCThreads=n (设置垃圾回收线程数，默认和cpu核数相同)</span><br><span class="line">      -XX:ConcGCThreads=n/4</span><br><span class="line">      -XX:CMSInitiatingOccupancyFraction=percent 执行垃圾回收的内存占比</span><br><span class="line">      -XX:+CMSScavengeBeforeRemark</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><pre><code>* G1(Garbage First 取代cms回收器)  * 2017年JDK9 默认的垃圾回收器  * 适用场景    * 同时注重吞吐量和低延迟，默认的暂停目标是200ms    * 超大堆内存，会将堆划分为多个大小相等的Region    * 整体上是标记+整理算法，两个区域之间是复制算法  * 配置    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseG1GC</span><br><span class="line">-XX:G1HeapRegionSize=size</span><br><span class="line">-XX:MaxGCPauseMillis=time</span><br></pre></td></tr></table></figure></code></pre><h3 id="垃圾回收调优"><a href="#垃圾回收调优" class="headerlink" title="垃圾回收调优"></a>垃圾回收调优</h3><h4 id="新生代调优"><a href="#新生代调优" class="headerlink" title="新生代调优"></a>新生代调优</h4><ol><li>新生代特点<ul><li>所有的new操作的内存分配非常廉价<ul><li>TLAB thread-local allocation buffer</li></ul></li><li>死亡对象的回收代价为0</li><li>大部分对象用过即死</li><li>Minor GC 的时间远远低于Full GC</li></ul></li><li>调优<ul><li>新生代能容纳所有[并发量*(请求-响应)]的数据</li></ul></li></ol><h2 id="class文件结构"><a href="#class文件结构" class="headerlink" title="class文件结构"></a>class文件结构</h2><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html" target="_blank" rel="noopener">参考文档</a></p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4             magic;</span><br><span class="line">    u2             minor_version;</span><br><span class="line">    u2             major_version;</span><br><span class="line">    u2             constant_pool_count;</span><br><span class="line">    cp_info        constant_pool[constant_pool_count-1];</span><br><span class="line">    u2             access_flags;</span><br><span class="line">    u2             this_class;</span><br><span class="line">    u2             super_class;</span><br><span class="line">    u2             interfaces_count;</span><br><span class="line">    u2             interfaces[interfaces_count];</span><br><span class="line">    u2             fields_count;</span><br><span class="line">    field_info     fields[fields_count];</span><br><span class="line">    u2             methods_count;</span><br><span class="line">    method_info    methods[methods_count];</span><br><span class="line">    u2             attributes_count;</span><br><span class="line">    attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = Short.MAX_VALUE + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> c = a + b;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   javap 查看字节码</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">Classfile /Users/haominglfs/IdeaProjects/leetcode/out/production/leetcode/test/HelloWorld.class</span><br><span class="line">  Last modified <span class="number">2020</span>-<span class="number">1</span>-<span class="number">10</span>; size <span class="number">602</span> bytes</span><br><span class="line">  MD5 checksum <span class="number">470</span>a732b94645485adf09a48f8e9bdd2</span><br><span class="line">  Compiled from <span class="string">"HelloWorld.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span>.<span class="title">HelloWorld</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #7.#25         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = Class              #26            // java/lang/Short</span><br><span class="line">   #3 = Integer            32768</span><br><span class="line">   #4 = Fieldref           #27.#28        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #5 = Methodref          #29.#30        // java/io/PrintStream.println:(I)V</span><br><span class="line">   #6 = Class              #31            // test/HelloWorld</span><br><span class="line">   #7 = Class              #32            // java/lang/Object</span><br><span class="line">   #8 = Utf8               &lt;init&gt;</span><br><span class="line">   #9 = Utf8               ()V</span><br><span class="line">  #10 = Utf8               Code</span><br><span class="line">  #11 = Utf8               LineNumberTable</span><br><span class="line">  #12 = Utf8               LocalVariableTable</span><br><span class="line">  #13 = Utf8               this</span><br><span class="line">  #14 = Utf8               Ltest/HelloWorld;</span><br><span class="line">  #15 = Utf8               main</span><br><span class="line">  #16 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #17 = Utf8               args</span><br><span class="line">  #18 = Utf8               [Ljava/lang/String;</span><br><span class="line">  #19 = Utf8               a</span><br><span class="line">  #20 = Utf8               I</span><br><span class="line">  #21 = Utf8               b</span><br><span class="line">  #22 = Utf8               c</span><br><span class="line">  #23 = Utf8               SourceFile</span><br><span class="line">  #24 = Utf8               HelloWorld.java</span><br><span class="line">  #25 = NameAndType        #8:#9          // "&lt;init&gt;":()V</span><br><span class="line">  #26 = Utf8               java/lang/Short</span><br><span class="line">  #27 = Class              #33            // java/lang/System</span><br><span class="line">  #28 = NameAndType        #34:#35        // out:Ljava/io/PrintStream;</span><br><span class="line">  #29 = Class              #36            // java/io/PrintStream</span><br><span class="line">  #30 = NameAndType        #37:#38        // println:(I)V</span><br><span class="line">  #31 = Utf8               test/HelloWorld</span><br><span class="line">  #32 = Utf8               java/lang/Object</span><br><span class="line">  #33 = Utf8               java/lang/System</span><br><span class="line">  #34 = Utf8               out</span><br><span class="line">  #35 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #36 = Utf8               java/io/PrintStream</span><br><span class="line">  #37 = Utf8               println</span><br><span class="line">  #38 = Utf8               (I)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> test.HelloWorld();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">2</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Ltest/HelloWorld;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">2</span>: istore_1</span><br><span class="line">         3: ldc           #3                  // int 32768</span><br><span class="line">         <span class="number">5</span>: istore_2</span><br><span class="line">         <span class="number">6</span>: iload_1</span><br><span class="line">         <span class="number">7</span>: iload_2</span><br><span class="line">         <span class="number">8</span>: iadd</span><br><span class="line">         <span class="number">9</span>: istore_3</span><br><span class="line">        10: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        <span class="number">13</span>: iload_3</span><br><span class="line">        14: invokevirtual #5                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">        <span class="number">17</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">4</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">5</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">17</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">18</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">3</span>      <span class="number">15</span>     <span class="number">1</span>     a   I</span><br><span class="line">            <span class="number">6</span>      <span class="number">12</span>     <span class="number">2</span>     b   I</span><br><span class="line">           <span class="number">10</span>       <span class="number">8</span>     <span class="number">3</span>     c   I</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"HelloWorld.java"</span></span><br></pre></td></tr></table></figure><p>   图解分析</p><ol><li><p>加载常量池到运行时常量池,方法字节码加载到方法区</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200110174354.png" alt></p></li><li><p>bipush 10  </p><ul><li><p>将一个byte压入操作数栈(其长度会补齐4个字节)</p></li><li><p>sipush将一个short压入操作数栈</p></li><li><p>ldc 将一个int压入操作数栈</p></li><li><p>Ldc2_w 将一个long压入操作数栈(分两次压入，因为long是两个字节)</p></li><li><p>这里小的数字都是和字节码指令存在一起，超过short范围的数字存入常量池</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200110174805.png" alt></p></li></ul></li><li><p>Istore_1 将操作数栈顶数据弹出，存入局部变量表的slot1</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200110180948.png" alt></p></li><li><p>ldc  #3 从常量池加载#3数据到操作数栈</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200110181911.png" alt></p></li><li><p>istore_2 </p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200110182250.png" alt></p></li><li><p>load_1 </p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200110183048.png" alt></p></li><li><p>Iload_2</p><p><img src="/Users/haominglfs/Library/Application Support/typora-user-images/image-20200110183557906.png" alt="image-20200110183557906"></p></li><li><p>iadd</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200110183821.png" alt></p></li><li><p>Istore_3</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200110184323.png" alt></p></li><li><p>getstatic #4</p><p>将堆中的System.out对象的引用压入操作数栈</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200113110702.png" alt></p></li><li><p>iload_3</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200113111310.png" alt></p></li><li><p>Invokevirtual #5</p><ul><li><p>找到常量池第五项</p></li><li><p>定位到方法区java/io/PrintStream.println:(I)V方法</p></li><li><p>生成新的栈帧(生成locals、stack等)</p></li><li><p>传递参数，执行新栈帧中的字节码</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200113142528.png" alt></p></li><li><p>执行完毕，弹出栈帧</p></li><li><p>清除main操作数栈内容</p><p><img src="/Users/haominglfs/Library/Application Support/typora-user-images/image-20200113142925906.png" alt="image-20200113142925906"></p></li></ul></li><li><p>return</p><ul><li>完成main方法调用，弹出main栈帧</li><li>程序结束</li></ul></li></ol><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ol><li><p><cinit>()V</cinit></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  i = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  i = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器会按照从上至下的顺序，收集所有static静态代码块和静态成员赋值的代码，合并为一个特殊的方法<cinit>()V</cinit></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">2: putstatic     #2                  // Field i:I</span><br><span class="line"><span class="number">5</span>: bipush        <span class="number">20</span></span><br><span class="line">7: putstatic     #2                  // Field i:I</span><br><span class="line"><span class="number">10</span>: bipush        <span class="number">30</span></span><br><span class="line">12: putstatic     #2                  // Field i:I</span><br><span class="line"><span class="number">15</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p><cinit>()V方法会在类加载的初始化阶段被调用</cinit></p></li><li><p><init>()V</init></p><p>编译器会按照从上至下的顺序，收集所有{}代码块和成员变量赋值的代码，形成新的构造方法，但原始构造方法内的代码总是在最后</p></li><li><p>方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">        d.test1();</span><br><span class="line">        d.test2();</span><br><span class="line">        d.test3();</span><br><span class="line">        d.test4();</span><br><span class="line">        Demo.test4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0: new           #2                  // class test/Demo  堆空间分配内存，引用放入操作数栈</span><br><span class="line"><span class="number">3</span>: dup <span class="comment">//复制栈顶引用</span></span><br><span class="line">4: invokespecial #3                  // Method "&lt;init&gt;":()V  调用构造方法</span><br><span class="line"><span class="number">7</span>: astore_1</span><br><span class="line"><span class="number">8</span>: aload_1</span><br><span class="line">9: invokespecial #4                  // Method test1:()V</span><br><span class="line"><span class="number">12</span>: aload_1</span><br><span class="line">13: invokespecial #5                  // Method test2:()V</span><br><span class="line"><span class="number">16</span>: aload_1</span><br><span class="line">17: invokevirtual #6                  // Method test3:()V</span><br><span class="line"><span class="number">20</span>: aload_1</span><br><span class="line"><span class="number">21</span>: pop<span class="comment">//入栈又出栈，通过对象调用静态方法会产生两次不必要的指令</span></span><br><span class="line">22: invokestatic  #7                  // Method test4:()V</span><br><span class="line">25: invokestatic  #7                  // Method test4:()V</span><br><span class="line"><span class="number">28</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>构造方法、私有方法、final方法使用invokespecial；普通public方法使用invokevirtual(动态绑定)；静态方法使用invokestatic</p></li><li><p>多态</p><p>当执行invokevirtual指令时</p><ol><li>先通过栈帧中的对象引用找到对象</li><li>分析对象头，找到对象的实际Class</li><li>class结构中有vtable,他在类加载的链接阶段就已经根据方法的重写规则生成好了</li><li>查表得到方法的具体地址</li><li>执行方法的字节码</li></ol></li><li><p>异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i = <span class="number">10</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            i = <span class="number">20</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: iconst_0</span><br><span class="line"><span class="number">1</span>: istore_1</span><br><span class="line"><span class="number">2</span>: bipush        <span class="number">10</span></span><br><span class="line"><span class="number">4</span>: istore_1</span><br><span class="line"><span class="number">5</span>: goto          <span class="number">12</span></span><br><span class="line"><span class="number">8</span>: astore_2</span><br><span class="line"><span class="number">9</span>: bipush        <span class="number">20</span></span><br><span class="line"><span class="number">11</span>: istore_1</span><br><span class="line"><span class="number">12</span>: <span class="keyword">return</span></span><br><span class="line"> Exception table:</span><br><span class="line">from    to  target type</span><br><span class="line"> <span class="number">2</span>     <span class="number">5</span>     <span class="number">8</span>   Class java/lang/Exception</span><br><span class="line"> LocalVariableTable:</span><br><span class="line">Start  Length  Slot  Name   Signature</span><br><span class="line"> <span class="number">9</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/Exception;</span><br><span class="line"><span class="number">0</span>      <span class="number">13</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">   <span class="number">2</span>      <span class="number">11</span>     <span class="number">1</span>     i   I</span><br></pre></td></tr></table></figure><p>可以看出多出来一个Exception table的结构，[from,to)是前闭后开的监测范围，一旦这个范围内的字节码执行出现异常，则通过type匹配异常类型，如果一致，进入target所指示行号。</p><p>8行的字节码指令astore_2是将异常对象引用存入局部变量表的slot 2 位置。</p></li></ol><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><h3 id="加载步骤"><a href="#加载步骤" class="headerlink" title="加载步骤"></a>加载步骤</h3><ol><li><p>加载</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200120110942.png" alt></p></li><li><p>链接</p><ul><li><p>验证</p></li><li><p>准备（为static变量分配空间，设置默认值）</p><ul><li>static 变量在JDK7之前存储在instanceKlass末尾，从JDK7开始，存储于java_mirror的末尾（堆中）</li><li>static 变量分配空间和赋值是两个步骤，分配空间在准备阶段完成，赋值在初始化阶段完成</li><li>如果变量是final的基本类型或字符串常量，那么编译阶段值就确定了，赋值在准备阶段完成</li><li>如果变量是final的，但属于引用类型，那么赋值也会在初始化阶段完成</li></ul></li><li><p>解析</p><p>符号引用解析为直接引用</p></li><li><p>初始化</p><ul><li><p>初始化即调用<cinit>()V,虚拟机会保证这个类的[构造方法]的线程安全</cinit></p></li><li><p>初始化时机</p><ol><li>主动使用(六种):<ul><li>创建类的实例</li><li>访问某个类或接口的静态变量，或者对该静态变量赋值</li><li>调用类的静态方法</li><li>反射(如 Class.forName(“info.haominglfs.test”))</li><li>初始化一个类的子类</li><li>java虚拟机启动时被表明为启动类的类(含有main方法)</li></ul></li><li>被动使用，除了以上六种情况，其他使用java类的方式都被看做是对类的被动使用，都不会导致类的初始化<ul><li>访问类的static final静态常量(基本类型和字符串)不会触发初始化</li><li>类对象.class不会触发初始化</li><li>创建该类的数组不会触发初始化</li><li>类加载器的loadClass方法</li><li>Class.forName的参数2为false时</li></ul></li><li>所有的java虚拟机实现必须在每个类或接口被java程序<strong>首次主动使用</strong>时才初始化他们，其他使用java类的方式都被看做是对类的被动使用，都不会导致类的初始化</li></ol></li><li><p>单例例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  <span class="comment">//懒惰式单例模式</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  <span class="comment">//1.首次使用时才会触发初始化</span></span><br><span class="line">    <span class="comment">//2.静态类可以访问外部类的构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HolderClass</span> </span>&#123;  </span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">  <span class="comment">//由类加载器来保证线程安全</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> HolderClass.instance;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><ol><li><p>以jdk8为例:</p><p>|          名称           |      加载哪的类       |            说明             |<br>| :———————: | :——————-: | :————————-: |<br>|  Bootstrap ClassLoader  |   JAVA_HOME/jre/lib   |        无法直接访问         |<br>|  Extension ClassLoader  | JAVA_HOME/jre/lib/ext | 上级为Bootstrap，显示为null |<br>| Application ClassLoader |       classpath       |       上级为Extension       |<br>|     自定义类加载器      |        自定义         |      上级为Application      |</p></li><li><p>双亲委派</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">    <span class="comment">// 1.检查该类是否已经加载</span></span><br><span class="line">    Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">//2.有上级的话，委派上级loadClass</span></span><br><span class="line">          c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//3.如果没有上级(ExtClassLoader),则委派BootstrapClassLoader</span></span><br><span class="line">          c = findBootstrapClassOrNull(name);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">        <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//4.每一层找不到，调用findClass方法(每个类加载器自己扩展)来加载</span></span><br><span class="line">        <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">        c = findClass(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.记录耗时</span></span><br><span class="line">        sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">        sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">        sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">      resolveClass(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线程上下文类加载器</p><p>是当前线程使用的类加载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DriverManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册驱动的集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> CopyOnWriteArrayList&lt;DriverInfo&gt; registeredDrivers = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Prevent the DriverManager class from being instantiated. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DriverManager</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Load the initial JDBC drivers by checking the System property</span></span><br><span class="line"><span class="comment">     * jdbc.properties and then use the &#123;<span class="doctag">@code</span> ServiceLoader&#125; mechanism</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//初始化驱动</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        loadInitialDrivers();</span><br><span class="line">        println(<span class="string">"JDBC DriverManager initialized"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadInitialDrivers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String drivers;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            drivers = AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;String&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> System.getProperty(<span class="string">"jdbc.drivers"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            drivers = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//1.使用serviceLoader机制加载驱动，即SPI</span></span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);</span><br><span class="line">                Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator();</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">while</span>(driversIterator.hasNext()) &#123;</span><br><span class="line">                        driversIterator.next();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span>(Throwable t) &#123;</span><br><span class="line">                <span class="comment">// Do nothing</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        println(<span class="string">"DriverManager.initialize: jdbc.drivers = "</span> + drivers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (drivers == <span class="keyword">null</span> || drivers.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">//2.使用jdbc.drivers定义的驱动名加载驱动</span></span><br><span class="line">        String[] driversList = drivers.split(<span class="string">":"</span>);</span><br><span class="line">        println(<span class="string">"number of Drivers:"</span> + driversList.length);</span><br><span class="line">        <span class="keyword">for</span> (String aDriver : driversList) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                println(<span class="string">"DriverManager.Initialize: loading "</span> + aDriver);</span><br><span class="line">                <span class="comment">//这里的ClassLoader.getSystemClassLoader()就是应用程序类加载器</span></span><br><span class="line">                Class.forName(aDriver, <span class="keyword">true</span>,</span><br><span class="line">                        ClassLoader.getSystemClassLoader());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                println(<span class="string">"DriverManager.Initialize: load failed: "</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">load</span><span class="params">(Class&lt;S&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//线程上下文类加载器</span></span><br><span class="line">        ClassLoader cl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">return</span> ServiceLoader.load(service, cl);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200120171351.png" alt></p></li><li><p>自定义类加载器</p><ul><li><p>什么时候需要自定义类加载器</p><ol><li>想加载非classpath随意路径中的类文件</li><li>都是通过接口来使用实现，希望解耦时，常用在框架设计中</li><li>这些类希望予以隔离，不同应用的同名类都可以加载，不冲突，常见于tomcat容器</li></ol></li><li><p>步骤</p><ol><li>继承ClassLoader父类</li><li>要遵从双亲委派模型，重写findClass方法（不是重写loadClass方法，否则不会走双亲委派机制）</li><li>读取类文件的字节码</li><li>调用父类的defineClass方法来加载类</li><li>使用者调用该类加载器的loadClass方法</li></ol></li><li><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        String path = <span class="string">"/myclasspath/"</span>+name+<span class="string">".class"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteOutputStream os = <span class="keyword">new</span> ByteOutputStream();</span><br><span class="line">            Files.copy(Paths.get(path),os);</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = os.toByteArray();</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> ClassNotFoundException(<span class="string">"类文件未找到"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>​     </p><p>​     </p><p>​<br>​     </p><p>​      </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-简单工厂模式</title>
      <link href="/2017/06/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/06/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>简单工厂模式:定义一个工厂类，他可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。因为在简单工厂模式中用于创建实例的方法是静态(static)方法，因此简单工厂模式又被称为静态工厂方法模式。</p><a id="more"></a><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><img src="https://raw.githubusercontent.com/haominglfs/images/master/20181115100226.png" alt></p><ul><li>Prodcut(抽象产品角色)：它是所有工厂类所创建的所有对象的父类，封装了各种产品对象的共有方法。</li><li>ProductA(具体产品角色)：它是简单工厂模式的创建目标，继承了抽象产品角色。</li><li>Factory(工厂角色）：简单工厂模式的核心，负责实现创建所有产品实例的内部逻辑，可以被外界直接调用，提供了静态工厂方法。</li></ul><h3 id="简单工厂模式的简化"><a href="#简单工厂模式的简化" class="headerlink" title="简单工厂模式的简化"></a>简单工厂模式的简化</h3><p>有时候，为了简化简单工厂模式，可以将抽象产品类和工厂类合并，将静态工厂方法移至抽象产品类中。<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fjlapzy2vqj30y40kt0t4.jpg" alt></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>简单工厂模式的主要优点如下:<br>(1) 工厂类包含必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的职责，而仅仅“消费”产品，简单工厂模式实现了对象创建和使用的分离。<br>(2) 客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可， 对于一些复杂的类名，通过简单工厂模式可以在一定程度减少使用者的记忆量。<br>(3) 通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类， 在一定程度上提高了系统的灵活性。</p></li><li><p>简单工厂模式的主要缺点如下<br>(1) 由于工厂类集中了所有产品的创建逻辑，职责过重，一旦不能正常工作，整个系统都要受 到影响<br>(2) 使用简单工厂模式势必会增加系统中类的个数(引入了新的工厂类)，增加了系统的复杂 度和理解难度。<br>(3) 系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成 工厂逻辑过于复杂，不利于系统的扩展和维护。<br>(4) 简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。</p></li><li>试用场景<br>(1) 工厂类负责创建的对象比较少，由于创建的对象较少，不会造成工厂方法中的业务逻辑太 过复杂<br>(2) 客户端只知道传入工厂类的参数，对于如何创建对象并不关心。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-单例模式</title>
      <link href="/2017/06/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/06/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在实际开发中，为了节约系统资源，有时需要确保系统中某个类只有唯一的一个实例，当这个唯一的实例创建成功后，我们无法再创建一个同类型的其他对象，所有的操作都基于这个唯一的对象，这就是单例模式的动机所在。<br>类图如下：<br><img src="http://ww4.sinaimg.cn/large/006tKfTcly1fggelk7z6pj30ho07s3yq.jpg" alt></p><a id="more"></a><p>为了实现唯一性，该类有以下特性：<br>1.将该类构造函数的可见性改为private。<br>2.定义一个静态类型的Singtelon私有变量。<br>3.增加一个共有的静态方法，用来获得该私有变量。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    private Singleton()&#123;&#125; //私有的构造函数</span><br><span class="line">    private static Singleton instance = null;//私有静态变量</span><br><span class="line"></span><br><span class="line">    public Singleton getInstance()&#123;</span><br><span class="line">        if(instance == null)&#123;</span><br><span class="line">            return new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码在多线程环境下会出现创建多个实例的情况。对此，有两种解决方案：<br>1.饿汉式单例模式<br><img src="https://raw.githubusercontent.com/haominglfs/images/master/20181115101817.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class EagerSingleton &#123;   </span><br><span class="line">    private static final EagerSingleton instance = new EagerSingleton();   </span><br><span class="line">    private EagerSingleton() &#123; &#125;   </span><br><span class="line"></span><br><span class="line">    public static EagerSingleton getInstance() &#123;  </span><br><span class="line">        return instance;   </span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.懒汉式单例模式(使用双重检查锁)<br><img src="https://raw.githubusercontent.com/haominglfs/images/master/20181115101952.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class LazySingleton &#123;   </span><br><span class="line">    private volatile static LazySingleton instance = null;   </span><br><span class="line"></span><br><span class="line">    private LazySingleton() &#123; &#125;   </span><br><span class="line"></span><br><span class="line">    public static LazySingleton getInstance() &#123;   </span><br><span class="line">        //第一重判断  </span><br><span class="line">        if (instance == null) &#123;  </span><br><span class="line">            //锁定代码块  </span><br><span class="line">            synchronized (LazySingleton.class) &#123;  </span><br><span class="line">                //第二重判断  </span><br><span class="line">                if (instance == null) &#123;  </span><br><span class="line">                    instance = new LazySingleton(); //创建单例实例  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return instance;   </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，如果使用双重检查锁定来实现懒汉式单例类，需要在静态成员变量instance之前增加修饰符volatile，被volatile修饰的成员变量可以确保多个线程都能够正确处理，且该代码只能在JDK 1.5及以上版本中才能正确执行。由于volatile关键字会屏蔽Java虚拟机所做的一些代码优化，可能会导致系统运行效率降低，因此即使使用双重检查锁定来实现单例模式也不是一种完美的实现方式。</p><p>饿汉式单例类在类被加载时就将自己实例化，它的优点在于无须考虑多线程访问问题，可以确保实例的唯一性；从调用速度和反应时间角度来讲，由于单例对象一开始就得以创建，因此要优于懒汉式单例。但是无论系统在运行时是否需要使用该单例对象，由于在类加载时该对象就需要创建，因此从资源利用效率角度来讲，饿汉式单例不及懒汉式单例，而且在系统加载时由于需要创建饿汉式单例对象，加载时间可能会比较长。</p><p>懒汉式单例类在第一次使用时创建，无须一直占用系统资源，实现了延迟加载，但是必须处理好多个线程同时访问的问题，特别是当单例类作为资源控制器，在实例化时必然涉及资源初始化，而资源初始化很有可能耗费大量时间，这意味着出现多线程同时首次引用此类的机率变得较大，需要通过双重检查锁定等机制进行控制，这将导致系统性能受到一定影响。</p><h2 id="一种更好的实现方式"><a href="#一种更好的实现方式" class="headerlink" title="一种更好的实现方式"></a>一种更好的实现方式</h2><p>Initialization Demand Holder (IoDH)技术：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Singleton &#123;  </span><br><span class="line">    private Singleton() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">    private static class HolderClass &#123;  </span><br><span class="line">            private final static Singleton instance = new Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">        return HolderClass.instance;  </span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>由于静态单例对象没有作为Singleton的成员变量直接实例化，因此类加载时不会实例化Singleton，第一次调用getInstance()时将加载内部类HolderClass，在该内部类中定义了一个static类型的变量instance，此时会首先初始化这个成员变量，由Java虚拟机来保证其线程安全性，确保该成员变量只能初始化一次。由于getInstance()方法没有任何线程锁定，因此其性能不会造成任何影响。</p><p>​    </p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/2017/04/30/git%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/04/30/git%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h2><p>今天写了一个在在标签页显示数字的chrome扩展程序，打算提交到github,顺便学习了将一个已有的项目提交到github的方法。</p><a id="more"></a><ul><li>登录github，新建一个仓库<br><img src="http://ww4.sinaimg.cn/large/006tKfTcly1ff4kewj8khj31dq0qe78o.jpg" alt></li><li><p>进入项目的本地目录，执行如下命令：</p><p><code>git init</code><br><code>git remote add origin git@github.com:haominglfs/tab_number.git//与远程仓库建立关联</code><br><code>git add .</code><br><code>git commit -m &#39;tab_number extension of chrome v0.1&#39;</code><br><code>git push -u origin master //push到远程仓库</code> </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iTerm2</title>
      <link href="/2017/04/19/iTerm2/"/>
      <url>/2017/04/19/iTerm2/</url>
      
        <content type="html"><![CDATA[<p>#iTerm2配置</p><ul><li>配色<br>1.<code>git clone git@github.com:altercation/solarized.git</code><br>2.这里我们要使用的是iterm2-colors-solarized目录下的，包括Solarized         Dark.itermcolors和Solarized Light.itermcolors两个配置文件。<br>3.打开Preferences-&gt;Profiles-&gt;Color面板，在Color Presets中将以上  两个配置方案导入，然后选择Solarized Dark或者Solarized Light即可。一般推荐使用Solarized Dark，Solarized Light有种亮瞎的感觉。</li><li>oh-my-zsh<br>1.接下来，用oh-my-zsh来武装zsh，一行命令搞定：<br><code>sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</code><br>2.oh-my-zsh中提供了多套主题可供选择，有不同的输出样式及配色。默认应该是robbyrussell，感觉中规中矩没啥亮点。翻看了一下，发现了agnoster主题，感觉非常入眼。<br>接下来，编辑~/.zshrc，找到变量ZSH_THEME将其赋值改为agnoster即可。<br>3.为了显示正常，需要安装powerline字体，方法如下：<br><code>git clone git@github.com:powerline/fonts.git</code><br><code>cd fonts</code><br><code>./install</code><br>然后，在iTerm2-&gt;Preferences-&gt;Profiles-&gt;Text面板中将Non-ASCII Font改成Roboto Mono Powerline，显示就正常了！  </li></ul>]]></content>
      
      
      <categories>
          
          <category> iTerm2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iTerm2配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shadowsocks配置</title>
      <link href="/2017/04/19/shadowsocks%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/04/19/shadowsocks%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="shadowsocks配置"><a href="#shadowsocks配置" class="headerlink" title="#shadowsocks配置"></a>#shadowsocks配置</h2><ul><li>第一步 用远程工具登录aws主机</li><li><p>第二步：安装shadowsocks依赖</p><ol><li><p><code>sudo -s</code> //获取超级管理员权限</p></li><li><p><code>apt-get update</code>//更新apt-get</p></li><li><p><code>apt-get install python-pip</code>//安装pyton包管理工具</p></li><li><p><code>pip install shadowsocks</code>//安装shadowsocks</p></li><li><p><code>ssserver -c /etc/shadowsocks.json -d start</code>//启动shadowsocks</p><a id="more"></a></li></ol></li><li><p>第三步:配置shadowsocks</p><ol><li><code>vi /etc/shadowsocks.json</code>//编辑配置文件</li><li><p>单一端口配置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_port&quot;:端口,</span><br><span class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;连接密码&quot;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">    &quot;fast_open&quot;:false</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>多端口配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">  &quot;port_password&quot;: &#123;</span><br><span class="line">      &quot;端口1&quot;: &quot;连接密码1&quot;,</span><br><span class="line">      &quot;端口2&quot; : &quot;连接密码2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;timeout&quot;:300,</span><br><span class="line">  &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">  &quot;fast_open&quot;: false</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>开启aws 入站端口</p><p>配置好shaodowsocks后，还需要将配置中的端口打开,这样客户端的服务才能链接得上EC2中的shadowsocks服务<br>首先打开正在运行的实例，向右滚动表格，看到最后一项，安全组，点击进入<br><img src="https://segmentfault.com/image?src=http://7fvd05.com1.z0.glb.clouddn.com/QQ20150815-0.png&amp;objectId=1190000003101075&amp;token=cdc26e8e1b55555923c613f33248fa51" alt></p></li></ul><p><img src="https://segmentfault.com/image?src=http://7fvd05.com1.z0.glb.clouddn.com/QQ20150815-4.png&amp;objectId=1190000003101075&amp;token=a6157d5b581643cfb706a380e15816f7" alt></p><p>默认是开启了一个22端口（这是给ssh访问的），再建一个如下图红框标示的端口，我的shadowsocks配置的端口是8388，所以这里就开启8388，<br><img src="https://segmentfault.com/image?src=http://7fvd05.com1.z0.glb.clouddn.com/QQ20150815-5.png&amp;objectId=1190000003101075&amp;token=9b7e5a2ca61848931c4b48136d7985da" alt></p><ul><li>配置文件编辑完成后，接下来就可以部署运行了：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure><p>当然，我们可不希望每次重启服务器都手动启动 SS, 因此我们要把这条命令放到这个文件下：/etc/rc.d/rc.local，这样以后就能开机自动运行了。</p>]]></content>
      
      
      <categories>
          
          <category> vpn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
